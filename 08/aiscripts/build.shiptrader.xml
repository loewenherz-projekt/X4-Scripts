<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="build.shiptrader" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="4">
  <!--
  
  Management script to process build orders in a shipyard and deal with ship repair requests
   
  Autor: Adrian / Owen
  
  -->
  <interrupts>
    <handler>
      <conditions>
        <check_any>
          <check_all>
            <check_any>
              <event_object_docked_at container="this.object"/>
              <event_object_dock_unassigned_from container="this.object" comment="This could be improved with additional check, but does not happen very often" />
            </check_any>
            <check_value value="not $lastcheck or player.age gt $lastcheck + 5s"/>
          </check_all>
          <event_build_added object="this.object" />
          <check_all>
            <event_build_finished object="this.object"/>
            <check_value value="event.param.container == this.object"/>
          </check_all>
          <event_object_signalled object="this.object" param="'object_parked'"/>
          <event_object_signalled object="this.object" param="'equip_request'"/>
          <check_all>
            <!-- signal sent from order.repair or menu_ship_configuration -->
            <!-- param = "'repairs_initiate'", param2 = $shiptoberepaired, param3 = [hullpercent(int), damagedcomponents(list)] -->
            <event_object_signalled object="this.container" param="'repairs_initiate'"/>
            <check_value value="event.param2 and event.param2.isoperational and ((@event.param2.dock.container == this.container) or (@event.param2.parkedat == this.container) or @event.param2.parkedat.hascontext.{this.container})"/>
          </check_all>
        </check_any>
      </conditions>
      <actions>
        <set_value name="$doabortscripts" exact="true"/>
        <do_all chance="$debugchance">
          <do_if value="typeof event.param == datatype.component">
            <debug_text text="player.age + ' interrupted by %1 (param %2 - %3)'.[event.name, event.param, @event.param.knownname]" />
          </do_if>
          <do_else>
            <debug_text text="player.age + ' interrupted by %1 (param %2)'.[event.name, event.param]" />
          </do_else>
        </do_all>

        <!--Check if the event related object needs instant repair-->
        <do_if value="(event.param == 'repairs_initiate') or (event.name == 'event_object_docked_at' and event.param == player.controlled and (@event.param.orders.{1}.id == 'Repair') and (event.param.orders.{1}.$destination == this.container))">
          <do_if value="event.param == 'repairs_initiate'">
            <!--Repair the ship instantly and do not abort called scripts or resume to the loop-->
            <set_value name="$doabortscripts" exact="false"/>
            <set_value name="$locship" exact="event.param2"/>
            <set_value name="$lochullpercent" exact="@event.param3.{1}"/>
            <set_value name="$locdamagedcomponents" exact="@event.param3.{2}"/>
          </do_if>
          <do_else>
            <!--Allow aborting of called scripts as this ship has docked and may need further processing after the repair-->
            <set_value name="$locship" exact="event.param"/>
            <set_value name="$lochullpercent" exact="event.param.orders.{1}.$hullpercent"/>
            <set_value name="$locdamagedcomponents" exact="event.param.orders.{1}.$damagedcomponents"/>
          </do_else>
          <debug_text text="'received signal to repair %s %s %s to %s. %s components to repair'.[$locship.idcode, $locship.knownname, $locship, $lochullpercent, @$locdamagedcomponents.count]" chance="$debugchance"/>
          <do_if value="$lochullpercent gt $locship.hullpercentage">
            <restore_object object="$locship" hull="$lochullpercent"/>
            <debug_text text="'repairing the hull of %s %s %s: %s %s'.[$locship.idcode, $locship.knownname, $locship, $lochullpercent, $locdamagedcomponents]" chance="$debugchance"/>
          </do_if>
          <do_all exact="@$locdamagedcomponents.count" counter="$i">
            <do_if value="@$locdamagedcomponents.{$i}.exists">
              <restore_object object="$locdamagedcomponents.{$i}" hull="100"/>
              <debug_text text="'repairing the %s of %s %s'.[$locdamagedcomponents.{$i}.knownname, $locship.idcode, $locship.knownname, $locship]" chance="$debugchance"/>
            </do_if>
          </do_all>
          <signal_objects object="$locship" param="'repairs_done'"/>

          <do_if value="event.name == 'event_object_docked_at'">
            <cancel_order order="$locship.orders.{1}"/>
          </do_if>
          <remove_value name="$locdamagedcomponents"/>
          <remove_value name="$lochullpercent"/>
          <remove_value name="$locship"/>
        </do_if>

        <do_if value="event.name == 'event_build_finished'">
          <set_value name="$buildprocessor" exact="event.param"/>
          <set_value name="$object" exact="$buildprocessor.buildanchor"/>
          <do_if value="$object">
            <do_if value="event.param3.exists and $object.isclass.ship">
              <do_if value="event.param3.isshipbuild">
                <transfer_people build="event.param3"/>
              </do_if>
              <set_value name="$playerownedobject" exact="$object.isplayerowned"/>
              <set_value name="$playerownedbuilder" exact="this.isplayerowned"/>
              <do_if value="event.param3.construction">
                <!--Ship was created by this build task-->
                <do_if value="$object.controlpostslot.{controlpost.aipilot}">
                  <set_value name="$select_races" exact="[]"/>
                  <do_if value="$playerownedobject">
                    <do_if value="$playerownedbuilder and this.assignedcontrolled.isclass.station">
                      <!--If a player shipyard, consider the workforce races-->
                      <append_list_elements name="$select_races" other="this.assignedcontrolled.workforce.races"/>
                    </do_if>
                    <!--Use shipyard owner to find a suitable pilot/commander-->
                    <set_value name="$select_owner" exact="this.owner"/>
                  </do_if>
                  <do_else>
                    <set_value name="$select_owner" exact="$object.owner"/>
                  </do_else>

                  <set_value name="$pilottags" exact="[controlpost.aipilot.tag]"/>
                  <do_if value="$playerownedobject or $playerownedbuilder">
                    <append_to_list name="$pilottags" exact="tag.rookie"/>
                  </do_if>
                  <do_elseif value="$object.primarypurpose == purpose.fight">
                    <!-- factions keep the best pilots for their professional fleets -->
                    <append_to_list name="$pilottags" exact="tag.regular"/>
                  </do_elseif>
                  <create_control_entity name="$newpilot" object="$object" post="controlpost.aipilot">
                    <select faction="$select_owner" race="$select_races" tags="$pilottags"/>
                    <owner exact="$object.owner"/>
                  </create_control_entity>
                  <assert value="$newpilot or $select_races.count == 0" text="'Unable to find suitable pilot from workforce races ' + $select_races + ' [Owen]'"/>
                  <do_if value="not $newpilot and $select_races.count">
                    <create_control_entity object="$object" post="controlpost.aipilot">
                      <select faction="$select_owner" tags="$pilottags"/>
                      <owner exact="$object.owner"/>
                    </create_control_entity>
                  </do_if>
                  <remove_value name="$pilottags"/>
                  <remove_value name="$select_races"/>
                  <remove_value name="$select_owner"/>
                  <remove_value name="$newpilot"/>
                </do_if>
                <do_else>
                  <create_control_entity object="$object" post="controlpost.aipilot">
                    <select race="race.drone" tags="controlpost.aipilot.tag"/>
                    <owner exact="$object.owner"/>
                  </create_control_entity>
                </do_else>

                <do_if value="$object.canhavecontrolentity.{controlpost.defence}">
                  <create_control_entity object="$object" post="controlpost.defence">
                    <select tags="controlpost.defence.tag"/>
                    <owner exact="$object.owner"/>
                  </create_control_entity>
                </do_if>
                <do_if value="$object.canhavecontrolentity.{controlpost.engineer}">
                  <create_control_entity object="$object" post="controlpost.engineer">
                    <select tags="controlpost.engineer.tag"/>
                    <owner exact="$object.owner"/>
                  </create_control_entity>
                </do_if>
                <do_if value="$object.canhavecontrolentity.{controlpost.shiptrader}">
                  <create_control_entity object="$object" post="controlpost.shiptrader">
                    <select tags="controlpost.shiptrader.tag" race="race.drone"/>
                    <owner exact="$object.owner"/>
                  </create_control_entity>
                </do_if>

                <create_ai_unit object="$object" />
              </do_if>
              <do_elseif value="event.param3.base and event.param3.isshipbuild">
                <do_if value="$object.isjobship">
                  <!--Ship was not created by this build task and it is a waiting job ship. Assume that is already has everything it needs to perform its job. -->
                  <activate_waiting_job_ship ship="$object"/>
                  <do_if value="$object.isrequestedjobship">
                    <set_requested_job_ship_timeout ship="$object" timeout="player.age + 1h" comment="fallback timeout"/>
                    <signal_objects object="$object" param="'build.shiptrader'" param2="'requested_ship_built'"/>
                  </do_if>
                  <do_else>
                    <create_order object="$object" id="'RestockSubordinates'">
                      <param name="init" value="true"/>
                      <param name="debugchance" value="$debugchance"/>
                    </create_order>
                  </do_else>
                </do_if>
                <set_value name="$finishedbuildprice" exact="event.param3.price"/>
                <do_if value="$finishedbuildprice gt 0 and @this.station.isplayerowned and not $playerownedobject">
                  <!--Player shipyard finished building a NPC ship-->

                  <!--%1(ship name) \(%2\)(ship ID code) finished construction at station: %3(station name) \(%4\)(station ID code). They have paid the station %5(price) Cr.-->
                  <set_value name="$logbooktext" exact="{1016,96}.[$object.knownname, $object.idcode, this.object.knownname, this.object.idcode, $finishedbuildprice.formatted.default]"/>
                  <write_to_logbook category="upkeep" title="{1016,150}" text="$logbooktext" interaction="showonmap" object="this.object" faction="$object.owner" money="$finishedbuildprice"/>
                  <remove_value name="$logbooktext"/>
                </do_if>
                <remove_value name="$finishedbuildprice"/>
              </do_elseif>
              <do_elseif value="event.param3.base and event.param3.isshipmodification">
                <!--Ship was upgraded-->
                <!--TODO @Owen @Nick check that non-player ships handle waiting for their upgrade properly before resuming orders-->
                <do_if value="event.param3.price gt 0 and @this.station.isplayerowned and not $playerownedobject">
                  <!--Player shipyard finished resupplying a NPC ship-->

                  <!--%1(ship name) \(%2\)(ship ID code) finished resupplying at station: %3(station name) \(%4\)(station ID code). They have paid the station %5(price) Cr.-->
                  <set_value name="$logbooktext" exact="{1016,97}.[$object.knownname, $object.idcode, this.object.knownname, this.object.idcode, event.param3.price.formatted.default]"/>
                  <write_to_logbook category="upkeep" title="{1016,151}" text="$logbooktext" interaction="showonmap" object="this.object" faction="$object.owner" money="event.param3.price"/>
                  <remove_value name="$logbooktext"/>
                </do_if>
              </do_elseif>
              <do_else>
                <assert value="false" break="1" text="'Unhandled build case. Ship ' + $object + ' ' + $object.knownname + ' build via buildprocessor ' + $buildprocessor + ' on ' + this.object.knownname"/>
              </do_else>
              <remove_value name="$playerownedobject"/>
            </do_if>
            <clear_buildanchor buildprocessor="$buildprocessor"/>
          </do_if>
        </do_if>

        <do_if value="$doabortscripts">
          <remove_value name="$doabortscripts"/>
          <abort_called_scripts resume="loop"/>
        </do_if>
      </actions>
    </handler>
    <handler>
      <conditions>
        <check_any>
          <check_all>
            <event_object_changed_true_owner group="$ownedtraders"/>
            <check_value value="event.param != this.object.trueowner"/>
          </check_all>
          <check_all>
            <event_build_finished group="$ownedtraders"/>
            <check_value value="event.param3.isshipbuild" />
          </check_all>
        </check_any>
      </conditions>
      <actions>
        <do_if value="event.name == 'event_object_changed_true_owner'">
          <!-- subordinate has been captured/boarded, remove from group of owned traders (subordinate status is cleared automatically) -->
          <do_if value="$ownedtraders.indexof.{event.object}">
            <debug_text text="'%1 (%2, %3) has changed true owner to %4, stop tracking it as owned trader of %5 (%6) in %7'.[event.object.knownname, event.object.idcode, event.object, event.param, this.object.knownname, this.object.idcode, this.sector.knownname]" chance="$debugchance"/>
            <remove_from_group group="$ownedtraders" object="event.object"/>
          </do_if>
        </do_if>
        <do_else>
          <!-- new subordinate has been built, assign commander and trade order -->
          <set_value name="$builtship" exact="event.object"/>
          <debug_text text="'%1 (%2, %3) has been built in %4 and will start trading for %5 (%6) in %7'.[$builtship.knownname, $builtship.idcode, $builtship, $builtship.sector.knownname, this.object.knownname, this.object.idcode, this.sector.knownname]" chance="$debugchance"/>
          <create_order object="$builtship" id="'AssignCommander'" immediate="true" >
            <param name="commander" value="this.object"/>
            <param name="assignment" value="assignment.trade"/>
            <param name="debugchance" value="$debugchance"/>
          </create_order>
        </do_else>
      </actions>
    </handler>
    <handler>
      <conditions>
        <!--Build request handler. Outside caller has a list of ship they want this shipyard to build. Take a look at the list and decide which, if any, can be added to the build queue
        event.param2 = list of ships to build, usually waiting job ships
        event.param3 = result list of added builds-->
        <event_object_signalled object="this.object" param="'shiptrader_requestbuilds'"/>
        <check_value value="typeof event.param2 == datatype.list and event.param2.count"/>
      </conditions>
      <actions>
        <!--We are not as restrictive as when deciding which build in the queue is allowed to start e.g. we don't care if the player has a blocked build at the front of the queue-->
        <set_value name="$maxbuilds" exact="this.object.buildprocessors.count"/>
        <set_value name="$maxbuilds" exact="$maxbuilds + ($maxbuilds / 4) + 1"/>
        <set_value name="$allowedbuilds" exact="$maxbuilds - (this.object.builds.inprogress.count + this.object.builds.queued.count)"/>
        <set_value name="$waitingshipsclone" exact="event.param2.clone"/>
        <set_value name="$pricelist" exact="if this.object.isplayerowned then this.object.buildbuyprices else null"/>
        <create_list name="$approvedships"/>
        <do_if value="event.param3.count">
          <assert value="event.param3.count == 0" text="'Result list for added builds is not empty. Clearing list: ' + event.param3 + ' [Owen]'"/>
          <clear_list list="event.param3"/>
        </do_if>
        <debug_text text="this.object + ' ' + this.object.knownname + ' ' + ' will potentially allow ' + $allowedbuilds + ' ship builds to be added ' + $waitingshipsclone.count + ' were requested'" chance="if $allowedbuilds gt 0 then $debugchance else 0"/>
        <do_while value="$allowedbuilds gt 0 and $waitingshipsclone.count">
          <set_value name="$potentialship" exact="$waitingshipsclone.last"/>
          <remove_value name="$waitingshipsclone.{$waitingshipsclone.count}"/>

          <set_value name="$buildmacro" exact="$potentialship.macro"/>
          <!--TODO @Owen should allow other cases beyond disconnected ships? e.g. ships of state construction docked at this object?-->
          <do_if value="$potentialship.isrealclass.ship and not $potentialship.parent and ($potentialship.isplayerowned or this.object.hasrelation.dock.{$potentialship.trueowner}) and this.object.canbuildmacro.{$buildmacro}">
            <do_if value="not $cargotable?">
              <!--Estimate resource usage of added builds as to not overload the shipyard with unachievable orders-->
              <set_value name="$cargotable" exact="this.object.cargo.table"/>
              <!-- TODO: if PLAYER_BUILD_RESOURCE_BUFFER_TIME is activated, adjust the cargotable handling -->
            </do_if>
            <!--TODO @Owen should this take the resources of the current queue into account?-->
            <set_value name="$buildachievable" exact="true"/>
            <set_value name="$buildresourcestable" exact="this.object.buildresources.{$potentialship}.table"/>
            <do_for_each name="$resourceware" in="$buildresourcestable">
              <!--Check that the cargo table has enough of this ware-->
              <do_if value="$cargotable.{$resourceware}?">
                <do_if value="$cargotable.{$resourceware} - $buildresourcestable.{$resourceware} le 0">
                  <set_value name="$buildachievable" exact="false"/>
                </do_if>
              </do_if>
              <do_else>
                <set_value name="$buildachievable" exact="false"/>
              </do_else>
              <do_if value="not $buildachievable">
                <debug_text text="this.object + ' ' + this.object.knownname + ' ' + ' does not have enough ' + $resourceware + ' to build ' + $potentialship + ' ' + $potentialship.knownname + ' ' + $buildmacro" chance="$debugchance"/>
                <break/>
              </do_if>
            </do_for_each>
            <do_if value="$buildachievable">
              <!--Remove resources for this build from the cargo table and check the next build-->
              <do_for_each name="$resourceware" in="$buildresourcestable">
                <set_value name="$cargotable.{$resourceware}" operation="subtract" exact="$buildresourcestable.{$resourceware}"/>
              </do_for_each>
              <do_if value="$pricelist">
                <get_object_value result="$shipprice" object="$potentialship" pricetable="$pricelist"/>
              </do_if>
              <do_else>
                <set_value name="$shipprice" exact="0Cr"/>
              </do_else>
              <add_build_to_construct_ship result="$newbuild" object="this.object" buildobject="$potentialship" faction="$potentialship.trueowner" price="$shipprice"/>
              <debug_text text="this.object + ' ' + this.object.knownname + ' ' + ' is adding build ' + $newbuild + ' for ' + $potentialship + ' ' + $potentialship.knownname" chance="$debugchance"/>
              <append_to_list name="event.param3" exact="$newbuild"/>
              <set_value name="$allowedbuilds" operation="subtract"/>
            </do_if>
          </do_if>
        </do_while>
        <remove_value name="$allowedbuilds"/>
        <remove_value name="$cargotable"/>
        <remove_value name="$buildresourcestable"/>
        <remove_value name="$buildmacro"/>
        <remove_value name="$waitingshipsclone"/>
        <remove_value name="$buildachievable"/>
        <remove_value name="$maxbuilds"/>
        <remove_value name="$resourceware"/>
        <remove_value name="$pricelist"/>
        <remove_value name="$shipprice"/>
      </actions>
    </handler>
  </interrupts>
  <init>
    <set_value name="$debugchance" exact="0" />
    <set_value name="$lastcheck" exact="0s"/>
    <create_group groupname="$ownedtraders"/>
  </init>
  <patch sinceversion="3" early="true">
    <set_value name="$lastcheck" exact="0s"/>
  </patch>
  <patch sinceversion="4" early="true">
    <create_group groupname="$ownedtraders"/>
  </patch>
  <attention min="unknown">
    <actions>

      <do_if value="not this.object.canequipships and not this.object.cansupplyships">
        <debug_text text="'attempting to run shiptrader script for an incapable object! object %1 %2 (on zone %3). Object not a shipyard or resupply ship?'.[this.object, this.object.knownname, this.object.zone.knownname]" />
        <return />
      </do_if>

      <label name="loop" />

      <!-- Check owned trade ships -->
      <do_if value="player.age gt 10s and (not $lastcheck or player.age gt $lastcheck + 5s)">
        <do_if value="not this.object.isplayerowned and this.object.isclass.station">
          <do_if value="this.station.isshipyard">
            <set_value name="$wantedtraders" exact="table[{class.ship_l} = table[$wanted = 1], {class.ship_m} = table[$wanted = 1]]"/>
          </do_if>
          <do_elseif value="this.station.iswharf">
            <set_value name="$wantedtraders" exact="table[{class.ship_m} = table[$wanted = 2]]"/>
          </do_elseif>
          <do_elseif value="this.station.isequipmentdock">
            <set_value name="$wantedtraders" exact="table[{class.ship_m} = table[$wanted = 1]]"/>
          </do_elseif>
          <do_if value="$wantedtraders?">

            <!-- check for suitable job definitions -->
            <set_value name="$jobs" exact="[]"/>
            <do_for_each name="$class" valuename="$classdata" in="$wantedtraders">
              <get_suitable_job result="$suitablejobs" faction="this.owner" tags="tag.stationtrader" size="$class" multiple="true" />
              <do_if value="$suitablejobs.count">
                <debug_text text="'%1 (%2) in %3 wants %4 traders of class %5, suitable jobs are %6'.[this.object.knownname, this.object.idcode, this.sector.knownname, $wantedtraders.{$class}.$wanted, $class, $suitablejobs]" chance="$debugchance"/>
                <set_value name="$classdata.$jobs" exact="$suitablejobs"/>
                <append_list_elements name="$jobs" other="$suitablejobs" />
              </do_if>
              <do_else>
                <debug_text text="'%1 (%2) in %3 wants %4 traders of class %5 but did not find any suitable jobs, skipping...'.[this.object.knownname, this.object.idcode, this.sector.knownname, $wantedtraders.{$class}.$wanted, $class]" chance="$debugchance"/>
                <remove_value name="$wantedtraders.{$class}"/>
              </do_else>
            </do_for_each>
            <remove_value name="$suitablejobs"/>

            <do_if value="$jobs.count">
              <!-- check existing subordinates and if necessary add them to the group of owned traders -->
              <set_value name="$subordinates" exact="this.object.subordinates"/>
              <do_all exact="$subordinates.count" counter="$s">
                <set_value name="$subordinate" exact="$subordinates.{$s}"/>
                <do_if value="not $ownedtraders.indexof.{$subordinate} and $subordinate.isjobship and $jobs.indexof.{$subordinate.job}">
                  <debug_text text="'%1 (%2) in %3 adds subordinate %4 (%5, %6) to group of owned traders'.[this.object.knownname, this.object.idcode, this.sector.knownname, $subordinate.knownname, $subordinate.idcode, $subordinate]" chance="$debugchance"/>
                  <add_to_group groupname="$ownedtraders" object="$subordinate"/>
                </do_if>
              </do_all>

              <!-- process owned traders and make sure they actually do work for this station -->
              <do_all exact="$ownedtraders.count" counter="$t">
                <set_value name="$trader" exact="$ownedtraders.{$t}"/>
                <!--<assert value="$trader.commander == this.object" text="'Shiptrader on %1 (%2) in %3 tracking ship %4 (%5) as owned but it is not a subordinate!'.[this.object.knownname, this.object.idcode, this.sector.knownname, $trader.knownname, $trader.idcode]"/>-->
                <do_if value="$trader.isjobship and $jobs.indexof.{$trader.job}">
                  <do_if value="$trader.isoperational and (not $trader.commander.exists or $trader.commander != this.object)">
                    <!-- trader is tracked as a supposed subordinate of our station but isn't - fix it -->
                    <debug_text text="'%1 (%2, %3) has lost the subordinate status, re-assigning to %4 (%5) in %6'.[$trader.knownname, $trader.idcode, $trader, this.object.knownname, this.object.idcode, this.sector.knownname]" chance="$debugchance"/>
                    <create_order object="$trader" id="'AssignCommander'" immediate="true" >
                      <param name="commander" value="this.object"/>
                      <param name="assignment" value="assignment.trade"/>
                      <param name="debugchance" value="$debugchance"/>
                    </create_order>
                  </do_if>
                  <do_if value="$wantedtraders.{$trader.realclass}?">
                    <set_value name="$wantedtraders.{$trader.realclass}.$wanted" operation="subtract"/>
                    <do_if value="$trader.isoperational">
                      <debug_text text="'%1 (%2) in %3 has owned trader %4 (%5, %6) of class %7 performing job %8'.[this.object.knownname, this.object.idcode, this.sector.knownname, $trader.knownname, $trader.idcode, $trader, $trader.realclass, $trader.job]" chance="$debugchance"/>
                    </do_if>
                    <do_else>
                      <debug_text text="'%1 (%2) in %3 is waiting for owned trader %4 (%5, %6) of class %7 to become operational and perform job %8'.[this.object.knownname, this.object.idcode, this.sector.knownname, $trader.knownname, $trader.idcode, $trader, $trader.realclass, $trader.job]" chance="$debugchance"/>
                    </do_else>
                  </do_if>
                </do_if>
              </do_all>

              <!-- request any missing traders -->
              <do_for_each valuename="$classdata" in="$wantedtraders">
                <do_if value="$classdata.$wanted gt 0">
                  <do_all exact="$classdata.$wanted">
                    <set_value name="$job" exact="$classdata.$jobs.random"/>
                    <request_job_ship name="$ship" job="$job" requester="this.object" zone="this.zone" />
                    <do_if value="$ship">
                      <add_to_group groupname="$ownedtraders" object="$ship"/>
                      <debug_text text="'%1 (%2) in %3 requested a subordinate ship to perform job %4. Requested ship is %5 (%6, %7) of class %8'.[this.object.knownname, this.object.idcode, this.sector.knownname, $job, $ship.knownname, $ship.idcode, $ship, $ship.realclass]" chance="$debugchance"/>
                    </do_if>
                    <do_else>
                      <debug_text text="'%1 (%2) in %3 requested a subordinate ship to perform job %4 but the request failed'.[this.object.knownname, this.object.idcode, this.sector.knownname, $job]" filter="error" />
                    </do_else>
                  </do_all>
                </do_if>
              </do_for_each>

            </do_if>

            <remove_value name="$job"/>
            <remove_value name="$jobs"/>
            <remove_value name="$wantedtraders"/>
          </do_if>
        </do_if>
      </do_if>

      <!-- Process new order -->
      <set_value name="$lastcheck" exact="player.age"/>
      <set_value name="$haswaitingplayerbuild" exact="false"/>
      <set_value name="$numplayerbuilds" exact="0"/>
      <set_value name="$builds" exact="this.object.builds.queued"/>
      <set_value name="$blockedbuilds" exact="[]"/>
      <set_value name="$blockindex" exact="0" comment="index of the first blocked build"/>
      <set_value name="$blockispriority" exact="false"/>
      <do_if value="not this.object.freebuildprocessor" chance="$debugchance">
        <debug_text text="this.object + ' ' + this.object.knownname + ' has no free build processors'"/>
      </do_if>
      <do_if value="$builds.count and this.object.freebuildprocessor">
        <set_value name="$numprocessors" exact="this.object.buildprocessors.count"/>
        <set_value name="$maxbuildage" exact="0s"/>
        <debug_text text="this.object + ' ' + this.object.knownname + ' ' + player.age + ' is checking ' + $builds.count + ' builds'" chance="$debugchance"/>
        <!--First pass to check if there is a player build which doesn't have the resources to begin yet-->
        <do_for_each name="$build" in="$builds" counter="$i">
          <!-- $maxbuildage will not be set correctly if there are blocked player builds but that doesn't matter because $haswaitingplayerbuild will result in non-player-builds being skipped anyway -->
          <set_value name="$maxbuildage" exact="[$maxbuildage, $build.age].max"/>
          <!--check if unit?-->
          <do_if value="$build.faction == faction.player">
            <set_value name="$numplayerbuilds" operation="add"/>
            <do_if value="this.object.neededbuildresources.{$build}.count gt 0">
              <debug_text text="this.object + ' ' + this.object.knownname + ' has a waiting player build which can not be started. Do not process any non-player builds. Build: ' + $build" chance="$debugchance"/>
              <set_value name="$haswaitingplayerbuild" exact="true"/>
              <append_to_list name="$blockedbuilds" exact="$build"/>
              <set_value name="$blockindex" exact="$i"/>
              <break/>
            </do_if>
            <do_if value="$numplayerbuilds gt $numprocessors">
              <!--There are enough player builds with enough resources to start. No need to check for more-->
              <set_value name="$blockindex" exact="$i"/>
              <break/>
            </do_if>
          </do_if>
        </do_for_each>
        <!-- we start by allowing up to 4 queue skips but scale that up towards the number of build processors the closer we get to the time at which older builds would be aborted-->
        <set_value name="$maxqueueskips" exact="4 + (($maxbuildage * [$numprocessors - 4, 1].max) / [param.shipbuilding.queued_build_abort_time_civilian, 10s].max + 0.5)i"/>
        <do_for_each name="$build" in="$builds" counter="$i">
          <do_if value="$i le $blockindex">
            <debug_text text="'Already checked build ' + $build + ' in the first pass'" chance="$debugchance"/>
            <continue/>
          </do_if>
          <!--Check if a queued build ship task is still allowed to be constructed at this object. If not, remove the build task. Player tasks will need to be manaully removed by the player.-->
          <do_if value="$build.isshipbuild and $build.faction != faction.player and not this.object.hasrelation.dock.{$build.faction}">
            <debug_text text="'Removing queued ship build task ' + $build + ' from object ' + this.object + ' ' + this.object.knownname + ' as the ship is no longer allowed to be docked'" chance="$debugchance"/>
            <remove_build build="$build" object="this.object"/>
            <!--while actually removed as a build, add it to the blockedbuilds list for this iteration-->
            <append_to_list name="$blockedbuilds" exact="$build"/>
            <set_value name="$blockindex" exact="$i" chance="if $blockindex then 0 else 100"/>
          </do_if>
          <do_else>
            <do_if value="$build.buildobject.isoperational and $build.buildobject.isclass.ship">
              <!--Check if the build ship is already docked at a stand alone buildmodule that can process it. If so, -->
              <set_value name="$buildshipmodule" exact="@$build.buildobject.dock.module"/>
              <do_if value="$buildshipmodule and $buildshipmodule.isclass.buildmodule and $buildshipmodule.object == this.object and $buildshipmodule.numdocks.{$build.buildobject.docksize} == 1 and this.object.neededbuildresources.{$build}.count == 0">
                <set_value name="$hasfreedockbuildprocessor" exact="false"/>
                <do_for_each name="$freedockbuildprocessor" in="$buildshipmodule.freebuildprocessors">
                  <do_if value="$build.issoftwareonlyupgrade or
                                ($build.isrestock and $freedockbuildprocessor.cansupplyclass.{$build.buildobject.class}) or
                                ($build.isshipmodification and $freedockbuildprocessor.canequipclass.{$build.buildobject.class}) or
                                ($build.isrecycleshipbuild and $freedockbuildprocessor.canbuildclass.{$build.buildobject.class})">
                    <set_value name="$hasfreedockbuildprocessor" exact="true"/>
                    <continue/>
                  </do_if>
                </do_for_each>
                <do_if value="$hasfreedockbuildprocessor">
                  <debug_text text="'Queued ship build task ' + $build + ' from object ' + this.object + ' ' + this.object.knownname + ' for ship ' + $build.buildobject + ' ' + $build.buildobject.knownname + ' is already docked at a standalone buildmodule and will attempt to be processed'" chance="$debugchance"/>
                  <remove_value name="$buildshipmodule"/>
                  <remove_value name="$hasfreedockbuildprocessor"/>
                  <continue/>
                </do_if>
              </do_if>
              <remove_value name="$buildshipmodule"/>
              <remove_value name="$hasfreedockbuildprocessor"/>
            </do_if>

            <do_if value="$haswaitingplayerbuild and $build.faction != faction.player">
              <debug_text text="this.object + ' ' + this.object.knownname + ' has a waiting player build. Skip non-player builds. Build: ' + $build" chance="$debugchance"/>
              <append_to_list name="$blockedbuilds" exact="$build"/>
              <set_value name="$blockindex" exact="$i" chance="if $blockindex then 0 else 100"/>
            </do_if>
            <do_elseif value="$blockindex and (($i ge ($blockindex + $maxqueueskips)) or ($blockispriority and $build.age lt param.shipbuilding.blocked_build_priority_time)) and not $build.isrecycleshipbuild">
              <!--Don't allow jumping the queue too much (recyling is fine though). If there is a priority block, then disregard this build unless it too is over the time threshold-->
              <debug_text text="this.object + ' ' + this.object.knownname + ' will not process build ' +  $build + ' as it is #' + $i + ' in the queue where there is a blocked build at ' + $blockindex + ', allowed skip up to ' + $maxqueueskips + ' entries that are at least ' + (param.shipbuilding.blocked_build_priority_time/1min) + ' min old' " chance="$debugchance"/>
              <append_to_list name="$blockedbuilds" exact="$build"/>
            </do_elseif>
            <do_elseif value="this.object.neededbuildresources.{$build}.count gt 0">
              <do_if value="false" comment="resource cheat to ensure builds do have all needed resources">
                <!-- resource cheat - enable for testing only! -->
                <set_value name="$resourcetable" exact="this.object.neededbuildresources.{$build}.table"/>
                <do_all exact="$resourcetable.keys.count" counter="$r">
                  <set_value name="$resource" exact="$resourcetable.keys.{$r}"/>
                  <add_cargo object="this.object" ware="$resource" exact="$resourcetable.{$resource}"/>
                  <set_value name="$dbgstr" exact="'%s%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s;%s'.[if $dbgstr? then '\n' else '', player.age, this.sector.knownname, this.object, this.object.idcode, this.object.knownname, this.owner, @(if $build.base then $build.base else $build).macro, @$build.base, @$build.base.idcode, @$build.base.knownname, $resource.name, $resourcetable.{$resource}, (((player.age + 1h) / 1h))i]" />
                </do_all>
                <debug_to_file name="'resourcecheat.csv'" directory="'cheatlog'" text="$dbgstr" append="true"/>
                <debug_text text="this.object + ' ' + this.object.knownname + ' cheated resources ' + $build + ': ' + $resourcetable"/>
                <remove_value name="$dbgstr"/>
                <remove_value name="$resource"/>
                <remove_value name="$resourcetable"/>
              </do_if>
              <do_else>
                <debug_text text="this.object + ' ' + this.object.knownname + ' does not have enough resources for build ' + $build" chance="$debugchance"/>
                <append_to_list name="$blockedbuilds" exact="$build"/>
                <do_if value="not $blockindex">
                  <set_value name="$blockindex" exact="$i"/>
                  <set_value name="$blockispriority" exact="$build.age ge param.shipbuilding.blocked_build_priority_time"/>
                </do_if>
              </do_else>
            </do_elseif>
            <do_else>
              <debug_text text="this.object + ' ' + this.object.knownname + ' can build ' + $build + ' which is ' + $i + ' in the queue'" chance="$debugchance"/>
            </do_else>
          </do_else>
        </do_for_each>
        <remove_value name="$haswaitingplayerbuild"/>
        <remove_value name="$maxqueueskips"/>
        <remove_value name="$maxbuildage"/>
        <do_for_each name="$loopbuild" in="$builds" counter="$i" reverse="true">
          <do_if value="$blockedbuilds.indexof.{$loopbuild}">
            <do_if value="$loopbuild.isshipbuild and $loopbuild.faction != faction.player">
              <set_value name="$shippurpose" exact="@(if $loopbuild.base then $loopbuild.base.macro else $loopbuild.macro).primarypurpose"/>
              <set_value name="$timeout" exact="if ($shippurpose == purpose.trade or $shippurpose == purpose.mine or $shippurpose == purpose.build) then param.shipbuilding.queued_build_abort_time_civilian else param.shipbuilding.queued_build_abort_time_military" />

              <do_if value="$loopbuild.age gt $timeout">
                <!--Abort this build-->
                <do_if value="$debugchance == 100">
                  <!--script filter debug message-->
                  <debug_text text="'build ' + $loopbuild + ' for ' + (if $loopbuild.base then $loopbuild.base.knownname else $loopbuild.macro) + ' on ' + this.object + ' ' + this.object.knownname + ' has taken ' + ($loopbuild.age/1min) + ' min aborting'"/>
                </do_if>
                <do_elseif value="$loopbuild.age gt param.shipbuilding.queued_build_abort_time_civilian">
                  <!--savegame filter debug message-->
                  <debug_text text="'build ' + $loopbuild + ' for ' + (if $loopbuild.base then $loopbuild.base.knownname else $loopbuild.macro) + ' on ' + this.object + ' ' + this.object.knownname + ' has taken ' + ($loopbuild.age/1min) + ' min aborting'" filter="savegame"/>
                </do_elseif>
                <abort_build build="$loopbuild" container="this.object"/>
              </do_if>
              <do_elseif value="$loopbuild.age gt param.shipbuilding.loadout_reduction_time">
                <do_if value="$loopbuild.base and $loopbuild.base.loadoutlevel gt $loopbuild.base.minloadoutlevel">
                  <!--Attempt to reduce the loadout-->
                  <set_value name="$newloadoutlevel" exact="[$loopbuild.base.loadoutlevel - 0.3, $loopbuild.base.minloadoutlevel, 0.0f].max"/>
                  <generate_loadout macro="$loopbuild.base.macro" faction="$loopbuild.base.owner" level="$newloadoutlevel" result="$reducedloadout" variation="0"/>
                  <apply_loadout object="$loopbuild.base" loadout="$reducedloadout.{1}"/>
                  <debug_text text="'build ' + $loopbuild + ' for ' + $loopbuild.base.knownname + ' on ' + this.object + ' ' + this.object.knownname + ' has taken ' + ($loopbuild.age/1min) + ' min and has had its loadout level reduced from ' + $loopbuild.base.loadoutlevel + ' to ' + $newloadoutlevel" chance="$debugchance"/>
                  <set_loadout_level object="$loopbuild.base" exact="$newloadoutlevel"/>
                  <remove_value name="$reducedloadout"/>
                  <remove_value name="$newloadoutlevel"/>
                </do_if>
              </do_elseif>
            </do_if>
            <remove_value name="$builds.{$i}"/>
          </do_if>
        </do_for_each>
        <remove_value name="$blockedbuilds"/>
        <remove_value name="$blockindex"/>
        <!-- Check the free build processors -->
        <set_value name="$buildprocessors" exact="if $builds.count then this.object.freebuildprocessors else []"/>
        <!-- iterate in reverse as order does not matter and it's much easier to remove entries from the list that way -->
        <do_all exact="$buildprocessors.count" counter="$i" reverse="true" >
          <set_value name="$buildprocessor" exact="$buildprocessors.{$i}"/>
          <set_value name="$buildmodule" exact="$buildprocessor.buildmodule"/>
          <!-- Check that the buildmodule this processor is attached to is functional -->
          <do_if value="$buildmodule.isfunctional">
            <!--No need to reverse as when a processed build is removed, we break-->
            <do_for_each name="$build" in="$builds" counter="$j">
              <set_value name="$process" exact="false"/>
              <do_if value="$build.isshipbuild and not $buildprocessor.buildanchor">
                <!--Ship Build-->
                <set_value name="$shipmacro" exact="null"/>
                <do_if value="$build.base">
                  <set_value name="$shipmacro" exact="$build.base.macro"/>
                </do_if>
                <do_else>
                  <set_value name="$shipmacro" exact="$build.macro"/>
                </do_else>
                <assert value="$shipmacro" text="'Build order does not have a valid macro. Build: ' + $build + ' - [Owen]'"/>
                <do_if value="$shipmacro">
                  <debug_text text="'checking that build processor %1 on buildmodule %2 of %3 (%4) can build %8 macro: %5, canbuild: %6, freedock: %7'.[$buildprocessor, $buildmodule, this.object.knownname, this.object, $shipmacro, $buildprocessor.canbuildmacro.{$shipmacro}, $buildmodule.freedock.{$shipmacro.docksize}, $build]" chance="$debugchance" />
                  <!-- $allowextmacro used in ego_dlc_pirate -->
                  <set_value name="$allowextmacro" exact="false"/>
                  <do_if value="$shipmacro and $buildprocessor.canbuildclass.{$shipmacro.class} and ($allowextmacro or $buildprocessor.canbuildmacro.{$shipmacro})">
                    <do_if value="$buildmodule.freedock.{$shipmacro.docksize}">
                      <set_value name="$process" exact="true"/>
                    </do_if>
                    <do_else>
                      <!-- try to free up a slot-->
                      <debug_text text="'no free slot to build ' + $shipmacro" chance="$debugchance"/>
                      <find_dockingbay object="this.object" name="$internaldocks" multiple="true">
                        <match_dock storage="true" free="true" size="$shipmacro.docksize"/>
                      </find_dockingbay>
                      <set_value name="$freeslots" exact="0"/>
                      <do_all exact="$internaldocks.count" counter="$d">
                        <set_value name="$freeslots" exact="$internaldocks.{$d}.shipstorage.free" operation="add"/>
                      </do_all>
                      <do_if value="$freeslots gt 3">
                        <!-- we have enough slots in internal storage, so just store a ship away -->
                        <request_store_ship object="$buildmodule" size="$shipmacro.docksize" faction="$build.faction" />
                      </do_if>
                      <do_else>
                        <!-- not a lot of room left in internal storage so try and make a ship undock instead -->
                        <find_object_component name="$dockedships" class="$shipmacro.class" docked="true" object="$buildmodule" includeobjects="true" multiple="true">
                          <match owner="faction.player" negate="true" />
                          <match_parent>
                            <match_dock storage="false"/>
                          </match_parent>
                        </find_object_component>
                        <!-- second find so player ships can be found as well but are appended to the list and therefore only considered if there are no suitable NPC ships to send away -->
                        <find_object_component name="$dockedships" class="$shipmacro.class" docked="true" object="$buildmodule" includeobjects="true" multiple="true" owner="faction.player" append="true">
                          <match_parent>
                            <match_dock storage="false"/>
                          </match_parent>
                        </find_object_component>
                        <do_all exact="$dockedships.count" counter="$s">
                          <set_value name="$dockedship" exact="$dockedships.{$s}"/>
                          <!-- now make sure this ship is not involved in any build/upgrade operation and actually able to fly away -->
                          <do_if value="@$dockedship.order.id == 'Wait' and $dockedship.order.$allowdocked and $dockedship.orders.count == 0 and $dockedship.isoperational and $dockedship.assignedpilot.exists">
                            <set_value name="$shipblocked" exact="false"/>
                            <!-- have to go over the builds to ensure they don't involve the ship we want to send away -->
                            <do_all exact="$builds.count" counter="$b">
                              <do_if value="$builds.{$b}.buildobject == $dockedship">
                                <set_value name="$shipblocked" exact="true"/>
                                <break />
                              </do_if>
                            </do_all>
                            <do_if value="not $shipblocked">
                              <!-- all good, this ship should be fine when sent away -->
                              <debug_text text="'station forces %1 (%2) to undock'.[$dockedship.knownname, $dockedship.idcode]" chance="$debugchance"/>
                              <create_order object="$dockedship" id="'Wait'" immediate="true">
                                <param name="allowdocked" value="false"/>
                              </create_order>
                              <break />
                            </do_if>
                          </do_if>
                        </do_all>
                        <remove_value name="$shipblocked"/>
                        <remove_value name="$dockedship"/>
                        <remove_value name="$dockedships"/>
                      </do_else>
                      <remove_value name="$freeslots"/>
                      <remove_value name="$internaldocks"/>
                    </do_else>
                  </do_if>
                  <remove_value name="$allowextmacro"/>
                </do_if>
              </do_if>
              <do_elseif value="$build.isrecycleshipbuild and $build.buildobject and
                         (not $build.buildobject.order or ($build.buildobject.order.id == 'Recycle' and $build.buildobject.order.state == orderstate.critical)) and
                         $buildmodule.canbuildclass.{$build.buildobject.class} and 
                         (not $build.buildobject.buildingprocessor or $build.buildobject.buildingprocessor == $buildprocessor) and 
                         (not $buildprocessor.buildanchor or $buildprocessor.buildanchor == $build.buildobject) and 
                         (@$build.buildobject == this.object or @$build.buildobject.dock.object == this.object or @$build.buildobject.parkedat == this.container)">
                <!--Ship recycling-->
                <do_if value="not $build.buildobject.buildingprocessor">
                  <set_buildanchor object="$build.buildobject" buildprocessor="$buildprocessor"/>
                </do_if>
                <do_if value="$build.buildobject.buildingprocessor == $buildprocessor">
                  <debug_text text="'assigned build processor %1 on buildmodule %2 of %3 (%4) to recycle %5 (%6)'.[$buildprocessor, $buildmodule, this.object.knownname, this.object, $build.buildobject.knownname, $build.buildobject]" chance="$debugchance" />
                  <set_value name="$process" exact="true"/>
                </do_if>
                <assert value="$process" text="'Object ' + $build.buildobject + ' ' + $build.buildobject.knownname + ' has the wrong build processor set. Is ' + $build.buildobject.buildingprocessor + ' Should be ' + $buildprocessor + ' [Owen]'"/>
              </do_elseif>
              <do_elseif value="$build.isshipmodification and $build.buildobject and 
                         $build.buildobject.order.id == 'Equip' and ($build.buildobject.order.state == orderstate.started or $build.buildobject == player.controlled) and
                         ($build.issoftwareonlyupgrade or ($build.isrestock and $buildmodule.cansupplyclass.{$build.buildobject.class}) or ($build.isupgrade and $buildmodule.canequipclass.{$build.buildobject.class})) and 
                         (not $build.buildobject.buildingprocessor or $build.buildobject.buildingprocessor == $buildprocessor) and 
                         (not $buildprocessor.buildanchor or $buildprocessor.buildanchor == $build.buildobject) and 
                         (@$build.buildobject == this.object or @$build.buildobject.dock.object == this.object or @$build.buildobject.parkedat == this.container)">
                <set_value name="$buildaborted" exact="false"/>
                <do_if value="$build.faction == faction.player and not this.isplayerowned">
                  <set_value name="$buildprice" exact="$build.price"/>
                  <set_value name="$transferredmoney" exact="$build.transferredamount"/>
                  <assert value="$buildprice le 0 or $buildprice ge $transferredmoney" text="'Player build ' + $build + ' for ' + $build.buildobject.knownname + ' costs less than the previously transferred amount which should not be possible [Owen]'"/>
                  <!--Check if the player needs to pay additional money due to 'sold' crew no longer being on the ship. If so, and they have the money, take it. Otherwise, abort the build.-->
                  <set_value name="$missingpayment" exact="$buildprice - $transferredmoney"/>
                  <do_if value="$missingpayment gt 0">
                    <debug_text text="'Player must now pay an additional ' + ($missingpayment / 1Cr) + ' credits due to changes in the build'" chance="$debugchance"/>
                    <do_if value="player.money lt $missingpayment">
                      <debug_text text="'Player does not have enough money to pay for the build. Aborting the equip order.'" chance="$debugchance"/>
                      <!--
                      Log title: $SHIPNAME$ ($IDCODE$) - Equip
                      Log text:
                      Order Status: Cancelled.
                      Insufficient funds.-->
                      <substitute_text text="$logbooktitle" source="'$SHIPNAME$ ($IDCODE$) - ' + {1041,501}">
                        <replace string="'$SHIPNAME$'" with="$build.buildobject.knownname"/>
                        <replace string="'$IDCODE$'" with="$build.buildobject.idcode"/>
                      </substitute_text>
                      <write_to_logbook category="general" title="$logbooktitle" text="{1001,8012} + ': ' + {10002,135} + '\n' + {1015,28}"/>
                      <remove_value name="$logbooktitle"/>
                      <remove_value name="$builds.{$j}"/>
                      <remove_build object="this.object" build="$build"/>
                      <set_value name="$buildaborted" exact="true"/>
                    </do_if>
                    <!--No else case here taking the money off of the player because during the transfer_people step, some new crew may not be added, reducing the final cost-->
                  </do_if>

                  <do_if value="not $buildaborted">
                    <transfer_people build="$build">
                      <failed added="$failedadded"/>
                    </transfer_people>
                    <!--People couldn't be added and the ship has free space, so the issue must be with the shipyard-->
                    <do_if value="$failedadded and $build.buildobject.people.free gt 0">
                      <debug_text text="'People transfer for player owned build was unable to add people with the value of ' + $failedadded + ' - Give the player a refund'" chance="$debugchance"/>
                      <set_value name="$missingpayment" operation="subtract" exact="$failedadded"/>
                    </do_if>

                    <do_if value="$missingpayment">
                      <do_if value="$missingpayment gt 0">
                        <debug_text text="'Ship modification build to start for ' + $build.buildobject + ' ' + $build.buildobject.knownname + ' - but player must pay an additional ' + ($missingpayment / 1Cr) + ' credits'" chance="$debugchance"/>
                        <transfer_money from="faction.player" to="this.object" amount="$missingpayment"/>
                      </do_if>
                      <do_else>
                        <debug_text text="'Ship modification build to start for ' + $build.buildobject + ' ' + $build.buildobject.knownname + ' - but player will be refunded an additional ' + (-$missingpayment / 1Cr) + ' credits'" chance="$debugchance"/>
                        <transfer_money from="this.object" to="faction.player" amount="-$missingpayment"/>
                      </do_else>
                    </do_if>
                  </do_if>
                  <remove_value name="$buildprice"/>
                  <remove_value name="$transferredmoney"/>
                  <remove_value name="$missingpayment"/>
                </do_if>
                <do_else>
                  <transfer_people build="$build"/>
                </do_else>
                <do_if value="$build.faction == faction.player">
                  <raise_lua_event name="'info_updatePeople'"/>
                </do_if>

                <do_if value="not $buildaborted">
                  <!--Ship Upgrade-->
                  <do_if value="not $build.buildobject.buildingprocessor">
                    <set_buildanchor object="$build.buildobject" buildprocessor="$buildprocessor"/>
                  </do_if>
                  <do_if value="$build.buildobject.buildingprocessor == $buildprocessor">
                    <!--Upgrade-->
                    <debug_text text="'assigned build processor %1 on buildmodule %2 of %3 (%4) to upgrade %5 (%6)'.[$buildprocessor, $buildmodule, this.object.knownname, this.object, $build.buildobject.knownname, $build.buildobject]" chance="$debugchance" />
                    <set_value name="$process" exact="true"/>
                  </do_if>
                  <assert value="$process" text="'Object ' + $build.buildobject + ' ' + $build.buildobject.knownname + ' has the wrong build processor set. Is ' + $build.buildobject.buildingprocessor + ' Should be ' + $buildprocessor + ' [Owen]'"/>
                </do_if>
                <remove_value name="$buildaborted"/>
              </do_elseif>

              <do_if value="$process">
                <process_build result="$successful" build="$build" object="this.object" buildprocessor="$buildprocessor"/>
                <!-- Remove build order -->
                <remove_value name="$builds.{$j}"/>
                <do_if value="$successful">
                  <remove_value name="$buildprocessors.{$i}"/>
                  <debug_text text="'Building order %1 using build processor %2 of buildmodule %3 on %4 (%5). %6 remaining builds in queue. Will wait for a short time to allow the processed build to start before checking the queue again.'.[$build, $buildprocessor, $buildmodule, this.object.knownname, this.object, $builds.count]" chance="$debugchance" />
                  <set_value name="$restartloop"/>
                  <break />
                </do_if>
                <remove_value name="$successful"/>
              </do_if>
            </do_for_each>
            <do_if value="$restartloop?">
              <break/>
            </do_if>
          </do_if>
        </do_all>
        <!-- cleanup -->
        <remove_value name="$j"/>

        <do_if value="$restartloop?">
          <remove_value name="$restartloop"/>
          <wait exact="50ms" sinceversion="2"/>
          <resume label="loop" />
        </do_if>
      </do_if>

      <!-- Wait a short time to reevaluate builds or until a ship has the dock unasigned from a buildmodule, or a new build order is added via the global interrupt-->
      <wait min="1min" max="2min"/>

      <!-- Return to process orders -->
      <resume label="loop" />

      <label name="finish" />
      <debug_text text="' End script. Unreachable under normal circumstances [Adrian]'" />

    </actions>
  </attention>
</aiscript>
