<?xml version="1.0" encoding="iso-8859-1" ?>
<aiscript name="trade.station" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="7">
  <!--
  This script allows stations to trade with their build storage
  in the same zone using the masstraffic network.
  The current station tries to "sell" to its build storage.
  by Benedikt
  -->
  <params>
    <param name="debugchance" default="0"/>
  </params>
  <interrupts>
    <library>
      <actions name="CleanupBuilds">
        <do_all exact="$builds.keys.count" counter="$i" reverse="true">
          <do_if value="not $builds.keys.{$i}.exists">
            <debug_text text="'build %s no longer exists. cleaning up.'.[$builds.keys.{$i}]" chance="$debugchance"/>
            <remove_value name="$builds.{$builds.keys.{$i}}"/>
          </do_if>
        </do_all>
        <debug_text text="'num remaining builds: ' + $builds.keys.count" chance="$debugchance"/>
      </actions>
      <actions name="RecordShortages">
        <do_all exact="@$loctable_shortage.keys.count" counter="$i">
          <set_value name="$int_locware" exact="$loctable_shortage.keys.{$i}"/>
          <debug_text text="'shortage. ware: %s, duration: %s, over threshold: %s'.[$int_locware, $loctable_shortage.{$int_locware}, $loctable_shortage.{$int_locware} ge $problemthreshold]" chance="0"/>
          <do_if value="not $table_problemresources.{$int_locware}? and ($loctable_shortage.{$int_locware} ge $problemthreshold)">
            <set_value name="$table_problemresources.{$int_locware}" exact="player.age - $loctable_shortage.{$int_locware}"/>
          </do_if>
          <remove_value name="$int_locware"/>
        </do_all>
        <do_all exact="@$loctable_insufficient.keys.count" counter="$i">
          <set_value name="$int_locware" exact="$loctable_insufficient.keys.{$i}"/>
          <debug_text text="'insufficiency. ware: %s, duration: %s, over threshold: %s'.[$int_locware, $loctable_insufficient.{$int_locware}, $loctable_insufficient.{$int_locware} ge $problemthreshold]" chance="0"/>
          <do_if value="$loctable_insufficient.{$int_locware} ge $problemthreshold">
            <do_if value="not $table_problemresources.{$int_locware}?">
              <set_value name="$table_problemresources.{$int_locware}" exact="player.age - $loctable_insufficient.{$int_locware}"/>
            </do_if>
            <do_if value="not $list_criticalresources.indexof.{$int_locware}">
              <append_to_list name="$list_criticalresources" exact="$int_locware"/>
            </do_if>
          </do_if>
          <remove_value name="$int_locware"/>
        </do_all>
      </actions>
      <actions name="GetMiners">
        <!-- check for suitable job definitions -->
        <set_value name="$jobs" exact="[]"/>
        <do_for_each name="$class" valuename="$classdata" in="$evaltable" reverse="true">
          <get_suitable_job result="$suitablejobs" faction="this.owner" tags="$classdata.$tags" size="$class" onlycommandeerable="true" multiple="true"/>
          <do_if value="$suitablejobs.count">
            <debug_text text="'%1 (%2) in %3 wants %4 miners of class %5, suitable jobs are %6'.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode, this.sector.knownname, $classdata.$wanted, $class, $suitablejobs]" chance="$debugchance"/>
            <set_value name="$classdata.$jobs" exact="$suitablejobs"/>
            <append_list_elements name="$jobs" other="$suitablejobs"/>
          </do_if>
          <do_else>
            <debug_text text="'%1 (%2) in %3 wants %4 miners of class %5 but did not find any suitable jobs, skipping...'.[this.station.knownname, this.station.idcode, this.sector.knownname, $evaltable.{$class}.$wanted, $class]" chance="$debugchance"/>
            <remove_value name="$evaltable.{$class}"/>
          </do_else>
        </do_for_each>
        <remove_value name="$suitablejobs"/>

        <do_if value="$jobs.count">
          <!-- check existing subordinates and if necessary add them to the group of owned miners -->
          <set_value name="$subordinates" exact="this.station.subordinates"/>
          <do_all exact="$subordinates.count" counter="$s">
            <set_value name="$subordinate" exact="$subordinates.{$s}"/>
            <do_if value="not $resultgroup.indexof.{$subordinate} and $subordinate.isjobship and $jobs.indexof.{$subordinate.job}">
              <debug_text text="'%1 (%2) in %3 adds subordinate %4 (%5, %6) to group of owned miners'.[this.station.knownname, this.station.idcode, this.sector.knownname, $subordinate.knownname, $subordinate.idcode, $subordinate]" chance="$debugchance"/>
              <add_to_group groupname="$resultgroup" object="$subordinate"/>
            </do_if>
          </do_all>

          <!-- process owned miners and make sure they actually do work for this station -->
          <do_for_each name="$miner" in="$resultgroup">
            <do_if value="$miner.isjobship and $jobs.indexof.{$miner.job}">
              <do_if value="$miner.isoperational and (not $miner.commander.exists or $miner.commander != this.station)">
                <!-- miner is tracked as a supposed subordinate of our station but isn't - fix it -->
                <debug_text text="'%1 (%2, %3) has lost subordinate status, re-assigning to %4 (%5) in %6'.[$miner.knownname, $miner.idcode, $miner, this.station.knownname, this.station.idcode, this.sector.knownname]" chance="$debugchance"/>
                <commandeer_object object="$miner"/>
                <create_order object="$miner" id="'AssignCommander'" immediate="true" >
                  <param name="commander" value="this.station"/>
                  <param name="assignment" value="assignment.mining"/>
                  <param name="debugchance" value="$debugchance"/>
                </create_order>
              </do_if>
              <do_if value="$evaltable.{$miner.realclass}?">
                <set_value name="$evaltable.{$miner.realclass}.$wanted" operation="subtract"/>
                <do_if value="$miner.isoperational">
                  <debug_text text="'%1 (%2) in %3 has owned miner %4 (%5, %6) of class %7 performing job %8'.[this.station.knownname, this.station.idcode, this.sector.knownname, $miner.knownname, $miner.idcode, $miner, $miner.realclass, $miner.job]" chance="$debugchance"/>
                </do_if>
                <do_else>
                  <debug_text text="'%1 (%2) in %3 is waiting for owned miner %4 (%5, %6) of class %7 to become operational and perform job %8'.[this.station.knownname, this.station.idcode, this.sector.knownname, $miner.knownname, $miner.idcode, $miner, $miner.realclass, $miner.job]" chance="$debugchance"/>
                </do_else>
              </do_if>
            </do_if>
          </do_for_each>

          <!-- request any missing miners -->
          <do_for_each valuename="$classdata" in="$evaltable">
            <do_if value="$classdata.$wanted gt 0">
              <do_all exact="$classdata.$wanted">
                <set_value name="$job" exact="$classdata.$jobs.random"/>
                <set_value name="$minerfound" exact="false"/>
                <!--trying to find a free miner before requesting to build new ship-->
                <find_sector_in_range name="$sectors" object="this.object" maxdistance="5" multiple="true"/>
                <do_for_each name="$sector" in="$sectors">
                  <find_ship_by_true_owner name="$freeminer" faction="this.object.trueowner" commandeerable="true" space="$sector" multiple="false" job="$job"/>
                  <do_if value="$freeminer">
                    <add_to_group groupname="$resultgroup" object="$freeminer"/>
                    <commandeer_object object="$freeminer"/>
                    <create_order object="$freeminer" id="'AssignCommander'" immediate="true" >
                      <param name="commander" value="this.station"/>
                      <param name="assignment" value="assignment.mining"/>
                      <param name="debugchance" value="$debugchance"/>
                    </create_order>
                    <debug_text text="'%1 (%2) in %3 has found a free commandeerable ship and requested it to perform job %4. Requested ship is %5 (%6, %7) of class %8'.[this.station.knownname, this.station.idcode, this.sector.knownname, $job, $freeminer.knownname, $freeminer.idcode, $freeminer, $freeminer.realclass]" chance="$debugchance"/>
                    <remove_value name="$freeminer"/>
                    <set_value name="$minerfound" exact="true"/>
                    <break/>
                  </do_if>
                </do_for_each>
                <do_if value="$minerfound == false">
                  <!--requesting building new ship if free one was not found-->
                  <request_job_ship name="$ship" job="$job" requester="this.station" zone="this.zone"/>
                  <do_if value="$ship">
                    <add_to_group groupname="$resultgroup" object="$ship"/>
                    <debug_text text="'%1 (%2) in %3 requested a subordinate ship to perform job %4 as no free ships found. Requested ship is %5 (%6, %7) of class %8'.[this.station.knownname, this.station.idcode, this.sector.knownname, $job, $ship.knownname, $ship.idcode, $ship, $ship.realclass]" chance="$debugchance"/>
                  </do_if>
                  <do_else>
                    <debug_text text="'%1 (%2) in %3 requested a subordinate ship to perform job %4 but the request failed'.[this.station.knownname, this.station.idcode, this.sector.knownname, $job]" filter="error"/>
                  </do_else>
                </do_if>
                <remove_value name="$minerfound"/>
              </do_all>
            </do_if>
          </do_for_each>
        </do_if>
        <remove_value name="$job"/>
        <remove_value name="$jobs"/>
        <remove_value name="$sectors"/>
      </actions>
    </library>
    <handler comment="Money Updates (player stations)">
      <conditions>
        <event_object_money_updated object="this.station"/>
        <check_value value="this.station.isplayerowned" />
      </conditions>
      <actions>
        <debug_text text="'event_object_money_updated: %s %s %s. %sCr changed to %sCr'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, event.param.formatted.default, event.param2.formatted.default]" chance="0"/>
        <set_value name="$productionmoney" exact="this.station.productionmoney"/>
        <do_if value="not @$belowbudget and ($productionmoney gt 0) and (event.param2 lt $productionmoney)">
          <debug_text text="'money below productionmoney. Money: ' + event.param2 + ' productionmoney: ' + $productionmoney" chance="$debugchance"/>
          <set_value name="$belowbudget" exact="true" />
          <do_if value="player.age" min="@$nextbudgetwarning">
            <set_value name="$nextbudgetwarning" exact="player.age + 10min" />
            <!-- INTERACTION: station is below budget (logbook entry added in player.interaction.budget) -->
            <run_interrupt_script name="'player.interaction.budget'"/>
          </do_if>
        </do_if>
        <do_else>
          <remove_value name="$belowbudget" />
        </do_else>
        <remove_value name="$productionmoney"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <check_any>
          <event_trade_completed buyer="this.station"/>
          <event_trade_completed seller="this.station"/>
        </check_any>
        <check_value value="event.param.isorder"/>
      </conditions>
      <actions>
        <do_if value="event.param.seller == this.station">
          <set_value name="$tradequality" exact="event.param.relativeprice"/>
          <set_value name="$XP_factor" exact="[(event.param.transferredamount)f / ([this.station.cargo.{event.param.ware}.count + event.param.transferredamount, 1].max)f, 1.0].min"/>
          <debug_text text="'Selling. XP factor: %s, transferred amount: %s, desired amount: %s, trade quality: %s'.[$XP_factor, event.param.transferredamount, this.station.cargo.{event.param.ware}.count - event.param.transferredamount, $tradequality]" chance="$debugchance"/>
        </do_if>
        <do_else>
          <set_value name="$tradequality" exact="-event.param.relativeprice"/>
          <set_value name="$XP_factor" exact="[(event.param.transferredamount)f / ([this.station.cargo.{event.param.ware}.target - this.station.cargo.{event.param.ware}.count, 1].max)f, 1.0].min"/>
          <debug_text text="'Buying. XP factor: %s, transferred amount: %s, desired amount: %s, trade quality: %s'.[$XP_factor, event.param.transferredamount, this.station.cargo.{event.param.ware}.target - this.station.cargo.{event.param.ware}.count, $tradequality]" chance="$debugchance"/>
        </do_else>

        <do_if value="$tradequality gt 0.5">
          <set_value name="$XP_category" exact="'station_trade_good'"/>
        </do_if>
        <do_elseif value="$tradequality lt -0.5">
          <set_value name="$XP_category" exact="'station_trade_bad'"/>
        </do_elseif>
        <do_else>
          <set_value name="$XP_category" exact="'station_trade_normal'"/>
        </do_else>

        <apply_experience entity="this" experience="$XP_category" factor="$XP_factor"/>

        <remove_value name="$XP_category"/>
        <remove_value name="$XP_factor"/>
        <remove_value name="$tradequality"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_build_added object="this.station"/>
        <check_value value="event.param.isshipbuild or event.param.isrecycleshipbuild or event.param.isshipmodification"/>
      </conditions>
      <actions>
        <debug_text text="'build added. building: %s. start time: %s'.[event.param.buildobject, player.age]" chance="$debugchance"/>
        <set_value name="$builds.{event.param}" exact="table[ $time_added = player.age, $isupgrade = event.param.isshipmodification, $isrecycleshipbuild = event.param.isrecycleshipbuild]"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_build_started object="this.station"/>
        <check_value value="event.param.container == this.station and event.param3 and $builds.{event.param3}?"/>
      </conditions>
      <actions>
        <!--Check if this build still exists in $builds. It may have been removed by another handler if it finished in the same frame.
        Would be nice to have the order ensured but such quick builds matter little to XP.-->
        <do_if value="$builds.{event.param3}?">
          <debug_text text="'build started. building: %s. total time: %s'.[event.param3.buildobject, event.param.totaltime]" chance="$debugchance"/>
          <set_value name="$builds.{event.param3}.$totaltime" exact="event.param.totaltime"/>
        </do_if>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_build_cancelled object="this.station"/>
        <check_value value="event.param3 and $builds.{event.param}?"/>
      </conditions>
      <actions>
        <debug_text text="'build cancelled. building: %s. cleaning up.'.[@event.param.buildobject]" chance="$debugchance"/>
        <remove_value name="$builds.{event.param}"/>

        <include_interrupt_actions ref="CleanupBuilds"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_build_finished object="this.station"/>
        <check_value value="event.param.container == this.station and event.param3 and $builds.{event.param3}? and $builds.{event.param3}.$totaltime?"/>
        <!--Creative Solution aka HACK by Owen. Construct a list of the finished builds in the condition itself.
        Multiple builds can finish in a frame. This previously lead to the first build being processed and the following ones being cleaned up in the 'CleanupBuilds' actions.
        Now, all of the finished builds will be processed in one batch and following hander actions will do nothing.-->
        <check_any>
          <check_value value="$finishedbuilds?"/>
          <set_value name="$finishedbuilds" exact="[]"/>
        </check_any>
        <set_value name="$finishedbuilds.{$finishedbuilds.count + 1}" operation="insert" exact="event.param3"/>
      </conditions>
      <actions>
        <!--$finishedbuilds may not exist if there were multiple handlers in this frame-->
        <do_if value="$finishedbuilds?">
          <do_all exact="$finishedbuilds.count" counter="$build_i">
            <!-- NB: there's a delay between a build finishing and this handler moving so best if it could work without the build having to exist. -->
            <set_value name="$build" exact="$finishedbuilds.{$build_i}"/>
            <set_value name="$buildduration" exact="player.age - $builds.{$build}.$time_added"/>
            <set_value name="$buildefficiency" exact="[$builds.{$build}.$totaltime / [$buildduration, 1s].max, 1.0].min"/>

            <do_if value="$builds.{$build}.$isupgrade">
              <set_value name="$XP_category" exact="'station_build_shipupgraded'"/>
            </do_if>
            <do_elseif value="@$builds.{$build}.$isrecycleshipbuild">
              <!--TODO @Owen @Nick - should there be experience for recycling?-->
              <set_value name="$XP_category" exact="'station_build_shipupgraded'"/>
            </do_elseif>
            <do_else>
              <set_value name="$XP_category" exact="'station_build_shipbuilt'"/>
            </do_else>
            <debug_text text="'build XP. object built: %s %s. XP category: %s\nelapsed time: %s. efficiency: %s. start time: %s. optimal time: %s.'.[@$build.buildobject.knownname, @$build.buildobject, $XP_category, $buildduration, $buildefficiency, $builds.{$build}.$time_added, $builds.{$build}.$totaltime]" chance="$debugchance"/>

            <apply_experience entity="this" experience="$XP_category" factor="$buildefficiency"/>

            <remove_value name="$builds.{$build}"/>
          </do_all>

          <include_interrupt_actions ref="CleanupBuilds"/>

          <remove_value name="$XP_category"/>
          <remove_value name="$buildefficiency"/>
          <remove_value name="$buildduration"/>
          <remove_value name="$build"/>
          <remove_value name="$finishedbuilds"/>
        </do_if>
      </actions>
    </handler>
    <handler>
      <conditions>
        <check_any>
          <check_all>
            <event_object_changed_true_owner group="$ownedminersliquid"/>
            <check_value value="event.param != this.object.trueowner"/>
            <set_value name="$locgroup" exact="$ownedminersliquid"/>
          </check_all>
          <check_all>
            <event_object_changed_true_owner group="$ownedminerssolid"/>
            <check_value value="event.param != this.object.trueowner"/>
            <set_value name="$locgroup" exact="$ownedminerssolid"/>
          </check_all>
          <check_all>
            <check_any>
              <event_object_signalled group="$ownedminersliquid" param="'build.shiptrader'" param2="'requested_ship_built'"/>
              <event_object_signalled group="$ownedminerssolid" param="'build.shiptrader'" param2="'requested_ship_built'"/>
            </check_any>
          </check_all>
        </check_any>
      </conditions>
      <actions>
        <do_if value="event.name == 'event_object_changed_true_owner'">
          <!-- subordinate has been captured/boarded, remove from group of owned traders (subordinate status is cleared automatically) -->
          <do_if value="$locgroup.indexof.{event.object}">
            <debug_text text="'%1 (%2, %3) has changed true owner to %4, stop tracking it as owned miner of %5 (%6) in %7'.[event.object.knownname, event.object.idcode, event.object, event.param, this.object.knownname, this.object.idcode, this.sector.knownname]" chance="$debugchance"/>
            <remove_from_group group="$locgroup" object="event.object"/>
          </do_if>
          <remove_value name="$locgroup"/>
        </do_if>
        <do_else>
          <!-- new subordinate has been built, assign commander and trade order -->
          <set_value name="$builtship" exact="event.object"/>
          <debug_text text="'%1 (%2, %3) has been built in %4 and will start mining for %5 (%6) in %7'.[$builtship.knownname, $builtship.idcode, $builtship, $builtship.sector.knownname, this.object.knownname, this.object.idcode, this.sector.knownname]" chance="$debugchance"/>
          <commandeer_object object="$builtship"/>
          <set_object_commander object="$builtship" commander="this.object" assignment="assignment.mining"/>
        </do_else>
      </actions>
    </handler>
  </interrupts>
  <init>
    <set_value name="$builds" exact="table[]"/>
    <set_value name="$needsmineables" exact="false"/>

    <set_value name="$table_problemresources" exact="table[]" comment="resources we are running short on. stuff we need to keep an eye on."/>
    <set_value name="$list_criticalresources" exact="[]" comment="resources preventing production. stuff we need more of."/>
    <set_value name="$problemthreshold" exact="5h"/>
    <set_value name="$table_temptradewares" exact="table[]"/>

    <set_command command="command.freetrade" />

    <create_group groupname="$ownedminersliquid"/>
    <create_group groupname="$ownedminerssolid"/>
  </init>
  <patch sinceversion="1" early="true">
    <!-- clean up any ware reservation that might exist, this is now handled internally by execute_trade for non-order-based trades -->
    <remove_ware_reservation reserver="this.station" object="this.station" />
    <do_if value="$finalselloffer?">
      <set_value name="$finalbuyoffer" exact="$finalselloffer"/>
      <remove_value name="$finalselloffer"/>
    </do_if>
    <do_if value="$buyoffer?">
      <set_value name="$selloffer" exact="$buyoffer"/>
      <remove_value name="$buyoffer"/>
    </do_if>
    <do_if value="$unbundle?">
      <remove_value name="$unbundle" />
    </do_if>
  </patch>
  <patch sinceversion="2">
    <set_value name="$needsmineables" exact="false"/>
    <do_if value="this.station.resources.count">
      <set_value name="$locresources" exact="this.station.resources.list"/>
      <do_all exact="$locresources.count" counter="$i">
        <do_if value="$locresources.{$i}.hastag.minable">
          <set_value name="$needsmineables" exact="true"/>
          <break/>
        </do_if>
      </do_all>
      <remove_value name="$locresources"/>

      <do_if value="$needsmineables">
        <do_all exact="this.station.subordinates.count" counter="$i">
          <set_value name="$locsubordinate" exact="this.station.subordinates.{$i}"/>
          <do_if value="($locsubordinate.primarypurpose == purpose.mine) and $locsubordinate.defaultorder and ($locsubordinate.defaultorder.id != 'MiningRoutine')">
            <debug_text text="'reassigning %s %s %s to mine.'.[@$locsubordinate.idcode, @$locsubordinate.knownname, $locsubordinate]" chance="$debugchance"/>
            <create_order id="'AssignCommander'" object="$locsubordinate" immediate="true">
              <param name="commander" value="this.station"/>
              <param name="assignment" value="assignment.mining"/>
              <param name="debugchance" value="$debugchance"/>
            </create_order>
          </do_if>
          <remove_value name="$locsubordinate"/>
        </do_all>
      </do_if>
    </do_if>
  </patch>
  <patch sinceversion="3">
    <remove_value name="$cannottrade"/>
  </patch>
  <patch sinceversion="4">
    <set_value name="$table_problemresources" exact="table[]"/>
    <set_value name="$list_criticalresources" exact="[]"/>
    <set_value name="$problemthreshold" exact="5h"/>
    <set_value name="$table_temptradewares" exact="table[]"/>
  </patch>
  <patch sinceversion="5">
    <do_if value="this.$lookingfortrades?">
      <do_all exact="this.assignedcontrolled.subordinates.count" counter="$_i">
        <set_value name="$locsub" exact="this.assignedcontrolled.subordinates.{$_i}"/>
        <do_if value="@$locsub.idcode == this.$lookingfortrades">
          <set_value name="$locfound"/>
          <break/>
        </do_if>
      </do_all>
      <do_if value="not $locfound?">
        <debug_text text="'PATCH: %s is no longer our subordinate. clearing blackboard variable.'.[this.$lookingfortrades]" filter="savegame"/>
        <remove_value name="this.$lookingfortrades"/>
      </do_if>
      <remove_value name="$locfound"/>
      <remove_value name="$locsub"/>
    </do_if>
  </patch>
  <patch sinceversion="6">
    <do_if value="this.$lookingfortrades?">
      <do_all exact="this.assignedcontrolled.subordinates.count" counter="$_i">
        <set_value name="$locsub" exact="this.assignedcontrolled.subordinates.{$_i}"/>
        <do_if value="@$locsub.idcode == this.$lookingfortrades">
          <do_if value="this.assignedcontrolled.defencenpc">
            <set_value name="this.assignedcontrolled.defencenpc.$lookingfortrades" exact="$locsub"/>
            <debug_text text="'PATCH: transferring $lookingfortrades to defence computer. now %s %s %s.'.[@this.assignedcontrolled.defencenpc.$lookingfortrades.idcode, @this.assignedcontrolled.defencenpc.$lookingfortrades.knownname, this.assignedcontrolled.defencenpc.$lookingfortrades]" filter="savegame"/>
          </do_if>
          <remove_value name="this.$lookingfortrades"/>
          <break/>
        </do_if>
      </do_all>
      <remove_value name="$locsub"/>
    </do_if>
  </patch>
  <patch sinceversion="7" early="true">
    <create_group groupname="$ownedminersliquid"/>
    <create_group groupname="$ownedminerssolid"/>
  </patch>
  <attention min="unknown">
    <actions>

      <label name="init"/>

      <set_value name="$waitduration" min="2min" max="4min"/>

      <label name="loop"/>

      <do_if value="this.assignedcontrolled.defencenpc.$lookingfortrades?">
        <do_if value="not @this.assignedcontrolled.subordinates.indexof.{this.assignedcontrolled.defencenpc.$lookingfortrades}">
          <debug_text text="'ship looking for trades: %s %s %s is not a subordinate of this station: %s %s %s. clearing.\n current commander: %s %s %s'.[@this.assignedcontrolled.defencenpc.$lookingfortrades.idcode, @this.assignedcontrolled.defencenpc.$lookingfortrades.knownname, this.assignedcontrolled.defencenpc.$lookingfortrades, @this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, @this.assignedcontrolled, @this.assignedcontrolled.defencenpc.$lookingfortrades.commander.idcode, @this.assignedcontrolled.defencenpc.$lookingfortrades.commander.knownname, @this.assignedcontrolled.defencenpc.$lookingfortrades.commander]" chance="$debugchance"/>
          <remove_value name="this.assignedcontrolled.defencenpc.$lookingfortrades"/>
        </do_if>
      </do_if>

      <set_value name="$resources" exact="this.station.resources.list"/>

      <do_if value="$resources.count">
        <set_value name="$locneededmineables" exact="$needsmineables"/>
        <set_value name="$needsmineables" exact="false"/>

        <do_all exact="$resources.count" counter="$i">
          <set_value name="$locware" exact="$resources.{$i}"/>
          <do_if value="$locware.hastag.minable">
            <set_value name="$needsmineables" exact="true"/>
            <break/>
          </do_if>
        </do_all>

        <!-- if we did not need mineables but now do, reassign mining ships but with the same assignment to update their behavior -->
        <do_if value="$needsmineables and not $locneededmineables">
          <do_all exact="this.station.subordinates.count" counter="$i">
            <set_value name="$locsubordinate" exact="this.station.subordinates.{$i}"/>
            <do_if value="($locsubordinate.primarypurpose == purpose.mine) and ($locsubordinate.assignment == assignment.mining)">
              <debug_text text="'reassigning %s %s %s to mine.'.[@$locsubordinate.idcode, @$locsubordinate.knownname, $locsubordinate]" chance="$debugchance"/>
              <create_order id="'AssignCommander'" object="$locsubordinate" immediate="true">
                <param name="commander" value="this.station"/>
                <param name="assignment" value="assignment.mining"/>
                <param name="debugchance" value="$debugchance"/>
              </create_order>
            </do_if>
            <remove_value name="$locsubordinate"/>
          </do_all>
        </do_if>
        <remove_value name="$locneededmineables"/>

        <do_if value="not this.isplayerowned">
          <!-- Check owned mining ships -->
          <!-- Do not check on shipyards/wharfs/EQ docks, or if station does not have minable resources -->
          <do_if value="this.object.isclass.station and not this.object.canequipships and not this.object.cansupplyships and $needsmineables">
            <debug_text text="'%1 (%2) in %3 is not shipyards/wharfs/EQ and needs minables so cehcking further'.[this.object.knownname, this.object.idcode, this.sector.knownname]" chance="$debugchance"/>

            <!--checking amount of operational production modules the station has-->
            <set_value name="$resourcetypes" exact="[]"/>
            <do_for_each name="$resource" in="this.station.resources.list">
              <do_if value="not $resourcetypes.indexof.{$resource.transporttag}">
                <append_to_list name="$resourcetypes" exact="$resource.transporttag"/>
              </do_if>
            </do_for_each>

            <set_value name="$numsolidproduction" exact="0"/>
            <set_value name="$numliquidproduction" exact="0"/>
            <do_for_each name="$locmodule" in="this.station.productions">
              <do_for_each name="$locware" in="$locmodule.resources.list">
                <do_if value="not $solidcounted? and ($locware.waretransport == waretransport.solid)">
                  <set_value name="$numsolidproduction" exact="$numsolidproduction + 1"/>
                  <set_value name="$solidcounted"/>
                </do_if>
                <do_if value="not $liquidcounted? and ($locware.waretransport == waretransport.liquid)">
                  <set_value name="$numliquidproduction" exact="$numliquidproduction + 1"/>
                  <set_value name="$liquidcounted"/>
                </do_if>
              </do_for_each>
              <remove_value name="$liquidcounted"/>
              <remove_value name="$solidcounted"/>
            </do_for_each>

            <do_if value="$resourcetypes.indexof.{tag.liquid}">
              <debug_text text="'%1 has %2 liquid storage so checking the need for liquid miners'.[this.station.knownname, this.station.cargo.capacity.liquid]" chance="$debugchance"/>
              <set_value name="$wantedminersliquidamount" exact="[($numliquidproduction / 4)i, 1].max"/>
              <debug_text text="'%1 wants %2 of liquid miners'.[this.station.knownname, $wantedminersliquidamount]" chance="$debugchance"/>

              <set_value name="$evaltable" exact="table[{class.ship_m} = table[$wanted = $wantedminersliquidamount, $tags = [tag.stationminerliquid]]]"/>
              <set_value name="$resultgroup" exact="$ownedminersliquid"/>
              <include_interrupt_actions ref="GetMiners"/>
              <remove_value name="$resultgroup"/>
              <remove_value name="$evaltable"/>
              <remove_value name="$wantedminersliquidamount"/>
            </do_if>
            <do_else>
              <debug_text text="'%1 has no liquid storage, liquid miners are not needed'.[this.station.knownname, this.station.cargo.capacity.liquid]" chance="$debugchance"/>
            </do_else>
            
            <do_if value="$resourcetypes.indexof.{tag.solid}">
              <debug_text text="'%1 has %2 solid storage so checking the need for solid miners'.[this.station.knownname, this.station.cargo.capacity.solid]" chance="$debugchance"/>
              <set_value name="$wantedminerssolidamount" exact="[($numsolidproduction / 4)i, 1].max"/>
              <debug_text text="'%1 wants %2 of solid miners'.[this.station.knownname, $wantedminerssolidamount]" chance="$debugchance"/>

              <set_value name="$evaltable" exact="table[{class.ship_m} = table[$wanted = $wantedminerssolidamount, $tags = [tag.stationminersolid]]]"/>
              <set_value name="$resultgroup" exact="$ownedminerssolid"/>
              <include_interrupt_actions ref="GetMiners"/>
              <remove_value name="$resultgroup"/>
              <remove_value name="$evaltable"/>
              <remove_value name="$wantedminerssolidamount"/>
            </do_if>
            <do_else>
              <debug_text text="'%1 has no solid storage, solid miners are not needed'.[this.station.knownname, this.station.cargo.capacity.solid]" chance="$debugchance"/>
            </do_else>
            <remove_value name="$numliquidproduction"/>
            <remove_value name="$numsolidproduction"/>
            <remove_value name="$resourcetypes"/>
          </do_if>

          <!-- detect cases where the station under our care can no longer function for lack of storage space. other cases that prevent functioning handled elsewhere. -->
          <do_all exact="$table_temptradewares.keys.count" counter="$i" reverse="true">
            <set_value name="$locware" exact="$table_temptradewares.keys.{$i}"/>
            <do_if value="not this.assignedcontrolled.cargo.{$locware}.exists or (not @$table_problemwares.{$locware}.$wasneeded and ($resources.indexof.{$locware} or this.assignedcontrolled.products.{$locware}.exists))">
              <remove_tradeware object="this.assignedcontrolled" ware="$locware"/>
              <remove_value name="$table_temptradewares.{$locware}"/>
              <do_if value="$table_problemwares.{$locware}?">
                <do_if value="@$table_problemwares.{$locware}.$wastradeware">
                  <add_tradeware object="this.assignedcontrolled" ware="$locware" allowbuy="true" allowsell="true"/>
                </do_if>
                <remove_value name="$table_problemwares.{$locware}"/>
              </do_if>
              <debug_text text="'%s is either now a resource or a product, or we have cleared out our stores. cleaning up.'.[$locware]" chance="$debugchance"/>
            </do_if>
            <do_else>
              <do_if value="((this.assignedcontrolled.cargo.{$locware}.count ge $table_temptradewares.{$locware}.$amount) and ((player.age - $table_temptradewares.{$locware}.$timestarted) gt $problemthreshold))">
                <remove_tradeware object="this.assignedcontrolled" ware="$locware"/>
                <remove_value name="$table_temptradewares.{$locware}"/>
                <do_if value="$table_problemwares.{$locware}?">
                  <set_value name="$table_problemwares.{$locware}.$cannotsell"/>
                </do_if>
                <debug_text text="'no one is buying %s. exploring other possibilities.'.[$locware]" chance="$debugchance"/>
              </do_if>
              <do_elseif value="@$table_problemwares.{$locware}.$wasneeded and $resources.indexof.{$locware} and (this.assignedcontrolled.cargo.{$locware}.count le this.assignedcontrolled.cargo.{$locware}.target)">
                <debug_text text="'%s is a resource that was temporarily sold and amount in storage is now under threshold. amount: %s, threshold: %s'.[$locware, this.assignedcontrolled.cargo.{$locware}.count, this.assignedcontrolled.cargo.{$locware}.target]" chance="$debugchance"/>
                <remove_tradeware object="this.assignedcontrolled" ware="$locware"/>
                <remove_value name="$table_temptradewares.{$locware}"/>
                <do_if value="$table_problemwares.{$locware}?">
                  <remove_value name="$table_problemwares.{$locware}"/>
                </do_if>
              </do_elseif>
              <do_else>
                <debug_text text="'stocks of %2 are going down. continuing to sell %1 %2. remaining time: %3s'.[this.assignedcontrolled.cargo.{$locware}.count, $locware, ($problemthreshold + $table_temptradewares.{$locware}.$timestarted) - player.age]" chance="$debugchance"/>
              </do_else>

              <do_if value="$table_temptradewares.{$locware}?">
                <set_value name="$table_temptradewares.{$locware}.$amount" exact="this.assignedcontrolled.cargo.{$locware}.count"/>
              </do_if>
            </do_else>
            <remove_value name="$locware"/>
          </do_all>

          <do_all exact="@$table_problemwares.keys.count" counter="$i" reverse="true">
            <set_value name="$locware" exact="$table_problemwares.keys.{$i}"/>
            <do_if value="$table_problemwares.{$locware}.$cannotsell">
              <set_value name="$locamount" exact="this.assignedcontrolled.cargo.{$locware}.count"/>
              <do_if value="not this.assignedcontrolled.cargo.{$locware}.target or ($locamount gt this.assignedcontrolled.cargo.{$locware}.target)">
                <do_if value="this.assignedcontrolled.cargo.{$locware}.target">
                  <set_value name="$locamount" exact="$locamount - this.assignedcontrolled.cargo.{$locware}.target"/>
                </do_if>
                <debug_text text="'unable to sell off problem ware %1. dropping %2 %1.'.[$locware, $locamount]" chance="$debugchance"/>
                <drop_cargo object="this.assignedcontrolled" ware="$locware" exact="$locamount"/>
              </do_if>
              <remove_value name="$table_problemwares.{$locware}"/>
              <remove_value name="$locamount"/>
            </do_if>
            <remove_value name="$locware"/>
          </do_all>

          <!-- keys: wares, values: duration. note that duration can be greater than player.age since the function increases the time if multiple modules are affected, so player.age - $value can be a negative number. -->
          <generate_shortage_reports object="this.assignedcontrolled" shortage="$loctable_shortage" insufficient="$loctable_insufficient" type="class.production"/>
          <include_interrupt_actions ref="RecordShortages"/>

          <generate_shortage_reports object="this.assignedcontrolled" shortage="$loctable_shortage" insufficient="$loctable_insufficient" type="class.buildmodule"/>
          <include_interrupt_actions ref="RecordShortages"/>

          <generate_shortage_reports object="this.assignedcontrolled" shortage="$loctable_shortage" insufficient="$loctable_insufficient" type="class.habitation"/>
          <include_interrupt_actions ref="RecordShortages"/>

          <remove_value name="$loctable_insufficient"/>
          <remove_value name="$loctable_shortage"/>

          <do_all exact="$resources.count" counter="$i">
            <set_value name="$locware" exact="$resources.{$i}"/>
            <do_if value="((this.assignedcontrolled.cargo.{$locware}.count + this.assignedcontrolled.cargo.{$locware}.free) lt this.assignedcontrolled.cargo.{$locware}.target)">
              <do_if value="not $table_problemresources.{$locware}?">
                <set_value name="$table_problemresources.{$locware}" exact="player.age"/>
              </do_if>
              <debug_text text="'WARNING: %s %s %s does not have enough storage space to fill target amount for %s.\namount in storage: %s\ntarget amount: %s\ntime in shortage: %ss'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, $locware, this.assignedcontrolled.cargo.{$locware}.count, this.assignedcontrolled.cargo.{$locware}.target, player.age - $table_problemresources.{$locware}]" chance="$debugchance"/>
              <debug_text text="'no stock: %s, time over threshold: %s, duration: %s, threshold: %s, current time: %s, time started: %s'.[not this.assignedcontrolled.cargo.{$locware}.exists, ((player.age - $table_problemresources.{$locware}) gt $problemthreshold), player.age - $table_problemresources.{$locware}, $problemthreshold, player.age, $table_problemresources.{$locware}]" chance="0"/>
              <do_if value="not this.assignedcontrolled.cargo.{$locware}.exists or ((player.age - $table_problemresources.{$locware}) gt $problemthreshold)">
                <do_if value="not $list_criticalresources.indexof.{$locware}">
                  <append_to_list name="$list_criticalresources" exact="$locware"/>
                </do_if>
                <debug_text text="'CRITICAL: %s %s %s has no stores of, and no space for, needed resource: %s'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, $locware]" chance="$debugchance"/>
              </do_if>
              <do_elseif value="$list_criticalresources.indexof.{$locware}">
                <remove_from_list name="$list_criticalresources" exact="$locware"/>
                <debug_text text="'%s is in shortage but is no longer in critical shortage.'.[$locware]" chance="$debugchance"/>
              </do_elseif>
            </do_if>
            <do_elseif value="$table_problemresources.{$locware}?">
              <remove_value name="$table_problemresources.{$locware}"/>
              <debug_text text="'%s %s %s no longer has a shortage of %s.'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, $locware]" chance="$debugchance"/>
              <do_if value="$list_criticalresources.indexof.{$locware}">
                <remove_from_list name="$list_criticalresources" exact="$locware"/>
                <debug_text text="'%s no longer in critical shortage.'.[$locware]" chance="$debugchance"/>
              </do_if>
            </do_elseif>
            <remove_value name="$locware"/>
          </do_all>

          <do_if value="$list_criticalresources.count">
            <do_if value="not $table_problemwares?">
              <set_value name="$table_problemwares" exact="table[]"/>
            </do_if>

            <debug_text text="'we have %s resources that require action. figure out why. critical resources:'.[$list_criticalresources.count]" chance="$debugchance"/>
            <do_all exact="$list_criticalresources.count" counter="$i" chance="$debugchance">
              <debug_text text="$list_criticalresources.{$i}"/>
            </do_all>
            <do_all exact="this.assignedcontrolled.cargo.count" counter="$i">
              <set_value name="$locware" exact="this.assignedcontrolled.cargo.{$i}"/>
              <do_if value="(this.assignedcontrolled.products.{$locware}.exists or this.assignedcontrolled.tradewares.{$locware}.exists) and not $table_temptradewares.{$locware}?">
                <debug_text text="'%s is either a product or a tradeware. amount: %s, target: %s'.[$locware, this.assignedcontrolled.cargo.{$locware}.count, this.assignedcontrolled.cargo.{$locware}.target]" chance="$debugchance"/>
                <do_if value="(this.assignedcontrolled.cargo.{$locware}.count gt this.assignedcontrolled.cargo.{$locware}.target)">
                  <debug_text text="'problem found. %s is a product and we have more than we want. marking ware unable to sell.'.[$locware]" chance="$debugchance"/>
                  <do_if value="not $table_problemwares.{$locware}?">
                    <set_value name="$table_problemwares.{$locware}" exact="table[ $cannotsell = true, $wasneeded = true, $wastradeware = this.assignedcontrolled.tradewares.{$locware}.exists ]"/>
                  </do_if>
                  <do_else>
                    <set_value name="$table_problemwares.{$locware}.$cannotsell" exact="true"/>
                  </do_else>
                </do_if>
              </do_if>
              <do_elseif value="this.assignedcontrolled.resources.{$locware}.exists or this.assignedcontrolled.supplyresources.{$locware}.exists">
                <do_if value="(this.assignedcontrolled.cargo.{$locware}.count gt this.assignedcontrolled.cargo.{$locware}.target)">
                  <debug_text text="'problem found. %s is a resource and we have more than we need. trying to sell ware for %ss'.[$locware, $problemthreshold]" chance="$debugchance"/>
                  <do_if value="not $table_problemwares.{$locware}?">
                    <set_value name="$table_problemwares.{$locware}" exact="table[ $cannotsell = false, $wasneeded = true ]"/>
                  </do_if>
                </do_if>
              </do_elseif>
              <do_else>
                <debug_text text="'problem found. %s is a ware that we do not need and is taking up storage space. trying to sell ware for %ss.'.[$locware, $problemthreshold]" chance="$debugchance"/>
                <do_if value="not $table_problemwares.{$locware}?">
                  <set_value name="$table_problemwares.{$locware}" exact="table[ $cannotsell = false, $wasneeded = false ]"/>
                </do_if>
              </do_else>
              <remove_value name="$locware"/>
            </do_all>

            <do_if value="not $table_problemwares.keys.count">
              <debug_text text="'no problems needing immediate attention found.'" chance="$debugchance"/>
              <clear_list list="$list_criticalresources"/>
              <remove_value name="$table_problemwares"/>
            </do_if>
            <do_else>
              <debug_text text="'problem wares:'" chance="$debugchance"/>
              <do_all exact="$table_problemwares.keys.count" counter="$i" reverse="true">
                <set_value name="$locware" exact="$table_problemwares.keys.{$i}"/>
                <debug_text text="'%s. amount: %s, target: %s'.[$locware, this.assignedcontrolled.cargo.{$locware}.count, this.assignedcontrolled.cargo.{$locware}.target]" chance="$debugchance"/>
                <do_if value="not this.assignedcontrolled.cargo.{$locware}.exists or (this.assignedcontrolled.cargo.{$locware}.count le this.assignedcontrolled.cargo.{$locware}.target)">
                  <remove_value name="$table_problemwares.{$locware}"/>
                  <debug_text text="'problem solved. we cleared out excess stocks of %s'.[$locware]" chance="$debugchance"/>
                </do_if>
                <do_elseif value="not $table_problemwares.{$locware}.$cannotsell">
                  <do_if value="not $table_temptradewares.{$locware}?">
                    <set_value name="$table_temptradewares.{$locware}" exact="table[ $amount = this.assignedcontrolled.cargo.{$locware}.count, $initialamount = this.assignedcontrolled.cargo.{$locware}.count, $timestarted = player.age ]"/>
                    <add_tradeware object="this.assignedcontrolled" ware="$locware" allowbuy="false" allowsell="true"/>
                    <debug_text text="'attempting to sell %s %s at game time: %ss.'.[$table_temptradewares.{$locware}.$amount, $locware, $table_temptradewares.{$locware}.$timestarted]" chance="$debugchance"/>
                  </do_if>
                </do_elseif>
                <remove_value name="$locware"/>
              </do_all>
            </do_else>
          </do_if>
        </do_if>
      </do_if>

      <!-- finding offers is expensive, we don't need to check this frequently -->
      <set_command_action commandaction="commandaction.searchingtrades" />

      <wait exact="$waitduration"/>

      <do_if value="not this.station.availableunits.{unitcategory.transport}.count">
        <set_value name="$waitduration" min="30min" max="1h"/>
        <debug_text text="'no cargolifters available. cannot trade. waiting for %s minutes.'.[$waitduration/60s]" chance="$debugchance"/>
        <resume label="loop"/>
      </do_if>

      <set_value name="$selloffer" exact="null"/>

      <!-- find the best trade opportunity -->
      <find_sell_offer seller="this.station" buyer="this.station.buildstorage" result="$selloffers" multiple="true" usereservations="false">
        <!--<stocklevel min="0.2" />-->
      </find_sell_offer>

      <do_if value="$selloffers.count gt 0">
        <!-- Trades between a station and its build storage do not require money so we include "empty" offers to get the desiredamount > 0 buy offers if the build storage has no funds. -->
        <find_buy_offer buyer="this.station.buildstorage" seller="this.station" result="$buyoffers" multiple="true" excludeempty="false" usereservations="false">
          <offeramount tradepartner="this.station" min="1"/>
        </find_buy_offer>

        <do_if value="true" chance="$debugchance">
          <debug_text text="'found %1 buyoffers on Build Storage (%2)'.[$buyoffers.count, this.station.buildstorage]" />
          <do_for_each name="$currentbuyoffer" in="$buyoffers">
            <debug_text text="'  buying %1 %2'.[$currentbuyoffer.amount, $currentbuyoffer.ware]"/>
          </do_for_each>
        </do_if>

        <do_if value="$buyoffers.count">
          <!-- shuffle list so that offers with the same relprice are still in a random order and not in the consistent order that the stations were found in -->
          <shuffle_list list="$buyoffers"/>
          <sort_trades name="$buyoffers" tradelist="$buyoffers" sorter="relativeprice" />

          <do_all exact="$selloffers.count">
            <!-- find the buyoffer with the highest amount -->
            <set_value name="$currentselloffer" exact="$selloffers.random"/>
            <set_value name="$offerindex" exact="$selloffers.indexof.{$currentselloffer}"/>
            <remove_value name="$selloffers.{$offerindex}" />
            <remove_value name="$offerindex" />

            <set_value name="$currentware" exact="$currentselloffer.ware"/>

            <set_value name="$buyoffer" exact="null"/>
            <do_all exact="$buyoffers.count" counter="$j">
              <set_value name="$currentbuyoffer" exact="$buyoffers.{$j}" />
              <do_if value="$currentbuyoffer.ware == $currentware">
                <!-- we don't want two stations shipping the same tradeware back and forth, so check if ware is a tradeware on both stations and negate -->
                <do_if value="this.station.tradewares.{$currentware}.exists and $currentbuyoffer.buyer.tradewares.{$currentware}.exists" negate="true">

                  <!-- cap the max trade volume at 100000 to avoid super-long huge trades, use desiredamount because trades between build storage and its station are free of charge -->
                  <clamp_trade_amount result="$finalamount" amount="[$currentbuyoffer.desiredamount, 100000 / $currentware.volume].min" trade="$currentbuyoffer" seller="this.station" buyer="$currentbuyoffer.buyer" />
                  <!--<assert value="$finalamount gt 0" text="'After clamping trade for %1 %2 finalamount is &lt;=0 [ Michael ]'.[$currentbuyoffer.desiredamount, $currentbuyoffer.ware]"/>-->

                  <debug_text text="'consider trading %1 %2 to %3 (stocklevel: %4)'.[$finalamount, $currentware, $currentbuyoffer.buyer.knownname, $currentbuyoffer.stocklevel]" chance="$debugchance"/>

                  <set_value name="$finalbuyoffer" exact="$currentbuyoffer"/>
                  <set_value name="$selloffer" exact="$currentselloffer"/>

                  <break />
                </do_if>
              </do_if>
            </do_all>
            <remove_value name="$currentware" />
            <do_if value="$finalbuyoffer? and $finalbuyoffer.exists">
              <break />
            </do_if>
          </do_all>
        </do_if>
      </do_if>

      <remove_value name="$buyoffers" />
      <remove_value name="$selloffers"/>
      <remove_value name="$currentbuyoffer"/>
      <remove_value name="$currentselloffer"/>

      <!-- execute the trade -->
      <do_if value="$selloffer.exists">
        <set_value name="$tradestart" exact="player.age"/>
        <set_value name="$tradeware" exact="$finalbuyoffer.ware"/>
        <debug_text text="player.age + ' %1 in %2 selling %3 units of %4 to %5...'.[this.station.knownname, this.station.sector.knownname, $finalamount, $tradeware.name, $finalbuyoffer.buyer.knownname]" chance="$debugchance"/>
        <!-- use a 3hour duration for station trades, as these can be inherently slower -->
        <set_command command="command.trade" param="$finalbuyoffer.buyer" />
        <execute_trade tradeoffer="$finalbuyoffer" amount="$finalamount" tradepartner="this.station" result="$traderesult" resume="true">
          <interrupt_after_time time="3h" />
          <interrupt>
            <conditions>
              <event_trade_cancelled tradeoffer="$finalbuyoffer" />
            </conditions>
            <actions>
              <debug_text text="player.age + ' trade %1 for %2 %3 got cancelled, interrupting execute_trade'.[$finalbuyoffer, $finalbuyoffer.amount, $finalbuyoffer.ware]" chance="$debugchance"/>      
            </actions>
          </interrupt>
        </execute_trade>
        <!-- no need to call detach_from_masstraffic since stations in the same zone are linked with a static network that persists anyway -->
        <debug_text text="player.age + ' trade executed in %1 seconds'.[player.age - $tradestart]" chance="$debugchance"/>
        <remove_value name="$tradestart" />
        <remove_value name="$tradeware" />
        <remove_value name="$traderesult" />
      </do_if>
      <remove_value name="$selloffer" />
      <remove_value name="$finalbuyoffer" />
      <remove_value name="$finalamount" />

      <resume label="init" />

    </actions>
  </attention>
  <on_abort killed="true">
    <do_for_each name="$miner" in="$ownedminersliquid">
      <release_commandeered_object object="$miner"/>
      <debug_text text="player.age + ' %1, %2 is released in %3 after station destruction'.[$miner.knownname, $miner.idcode, $miner.sector.knownname]" chance="$debugchance"/>
    </do_for_each>
    <do_for_each name="$miner" in="$ownedminerssolid">
      <release_commandeered_object object="$miner"/>
      <debug_text text="player.age + ' %1, %2 is released in %3 after station destruction'.[$miner.knownname, $miner.idcode, $miner.sector.knownname]" chance="$debugchance"/>
    </do_for_each>
  </on_abort>
</aiscript>
