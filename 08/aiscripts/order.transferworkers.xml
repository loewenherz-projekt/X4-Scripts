<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="order.transferworkers" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <order id="TransferWorkers" name="{1041, 781}" description="{1041, 782}" category="internal">
    <params>
      <param name="origin" text="{1041, 10172}" type="object" required="true" comment="Origin. Station.">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="destination" text="{1041, 10027}" type="object" required="true" comment="Destination. Station.">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="numpeople" text="{1041, 10173}" type="number" default="1" comment="Number. Number of workers to transfer.">
        <input_param name="min" value="1"/>
        <input_param name="max" value="this.ship.people.free + this.ship.people.{entityrole.worker}.count"/>
        <input_param name="step" value="1"/>
        <input_param name="startvalue" value="1"/>
      </param>
      <param name="species" type="internal" default="race.argon" comment="Species of people to be transferred. Defaults to Argon. Ignored when transferring to destination."/>
      <param name="cannotdock" type="internal" default="false" text="{1041, 10133}" comment="Unable to dock. Used for error handling in case of inability to dock"/>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
      <match class="class.spacesuit" negate="true"/>
    </requires>
    <location object="$origin" additionalobjects="[$destination]" condition="$origin.isoperational and $destination.isoperational"/>
  </order>
  <interrupts>
    <handler>
      <conditions>
        <check_any>
          <event_object_destroyed object="$origin"/>
          <event_object_destroyed object="$destination"/>
          <event_object_abandoned object="$origin"/>
          <event_object_abandoned object="$destination"/>
          <check_all>
            <check_any>
              <event_object_changed_true_owner object="$origin"/>
              <event_object_changed_true_owner object="$destination"/>
            </check_any>
            <check_value value="event.param != this.assignedcontrolled.trueowner"/>
          </check_all>
        </check_any>
        <check_value value="event.object == $target"/>
      </conditions>
      <actions>
        <do_if value="event.object == $destination">
          <debug_text text="'destination %s %s %s destroyed. cleaning up.'.[@event.object.idcode, event.object.knownname, event.object]" chance="$debugchance"/>
        </do_if>
        <do_else>
          <debug_text text="'origin %s %s %s destroyed. cleaning up.'.[@event.object.idcode, event.object.knownname, event.object]" chance="$debugchance"/>
        </do_else>
        <abort_called_scripts resume="cleanup"/>
      </actions>
    </handler>
    <handler ref="SectorChangeHandler"/>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="AttackHandler"/>
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler"/>
  </interrupts>
  <attention min="unknown">
    <actions>

      <label name="init"/>

      <do_if value="not $origin.isclass.station or not $destination.isclass.station">
        <debug_text text="'init: origin or destination not a station. cleaning up.'" filter="error"/>
        <resume label="cleanup"/>
      </do_if>

      <set_value name="$peoplecap" exact="this.assignedcontrolled.people.{entityrole.worker}.count + this.assignedcontrolled.people.free"/>
      <do_if value="$numpeople lt $peoplecap">
        <debug_text text="'%s %s %s is not able to carry %s people. capping to %s'.[@this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $numpeople, $peoplecap]"/>
        <set_value name="$numpeople" exact="$peoplecap"/>
        <edit_order_param order="this.assignedcontrolled.order" param="'numpeople'" value="$numpeople"/>
      </do_if>
      <remove_value name="$peoplecap"/>

      <set_value name="$target" exact="$origin"/>
      <do_if value="this.assignedcontrolled.people.{entityrole.worker}.count ge $numpeople">
        <set_value name="$target" exact="$destination"/>
        <debug_text text="'dropping off %s people at %s %s %s.\nworkers on board: %s\nfree berths: %s'.[$numpeople, @$target.idcode, $target.knownname, $target, this.assignedcontrolled.people.{entityrole.worker}.count, this.assignedcontrolled.people.free]" chance="$debugchance"/>
      </do_if>
      <do_else>
        <debug_text text="'picking up %s people at %s %s %s.\nworkers on board: %s\nfree berths: %s'.[$numpeople, @$target.idcode, $target.knownname, $target, this.assignedcontrolled.people.{entityrole.worker}.count, this.assignedcontrolled.people.free]" chance="$debugchance"/>
      </do_else>

      <do_if value="not $target.isoperational">
        <debug_text text="'init: origin or destination not operational. cleaning up.'" chance="$debugchance"/>
        <resume label="cleanup"/>
      </do_if>

      <label name="move_to_destination"/>

      <do_if value="this.assignedcontrolled.dock or this.assignedcontrolled.parkedat">
        <do_if value="this.assignedcontrolled.hascontext.{$target}">
          <debug_text text="'already at target. transferring people.'" chance="$debugchance"/>
          <resume label="transfer"/>
        </do_if>
        <!-- NB: undocking handled here rather than in orders.base since orders.base won't have access to $target. -->
        <debug_text text="'undocking from %s %s %s'.[@this.assignedcontrolled.container.idcode, @this.assignedcontrolled.container.knownname, this.assignedcontrolled.container]" chance="$debugchance"/>
        <!-- not necessary? we'll add a DockAndWait order. orders.base will add an Undock order as needed before DockAndWait is executed. -->
        <create_order id="'Undock'" object="this.assignedcontrolled" immediate="true">
          <param name="debugchance" value="$debugchance"/>
        </create_order>
        <wait exact="1s"/>
      </do_if>

      <do_if value="$cannotdock">
        <debug_text text="'unable to dock at %s %s %s. ending.'.[@$target.idcode, $target.knownname, $target]" chance="$debugchance"/>
        <resume label="cleanup"/>
      </do_if>
      <do_else>
        <create_order id="'DockAndWait'" object="this.assignedcontrolled" immediate="true">
          <param name="destination" value="$target"/>
          <param name="callerid" value="this.assignedcontrolled.order"/>
          <param name="debugchance" value="$debugchance"/>
        </create_order>
      </do_else>

      <wait exact="1s"/>

      <label name="transfer"/>

      <do_if value="not this.assignedcontrolled.hascontext.{$target}">
        <debug_text text="'%s %s %s about to transfer people but not at target.\ntarget: %s %s %s\ncontainer: %s %s %s'.[@this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, @$target.idcode, $target.knownname, $target, @this.assignedcontrolled.container.idcode, @this.assignedcontrolled.container.knownname, this.assignedcontrolled.container]" filter="error"/>
        <resume label="move_to_destination"/>
      </do_if>

      <debug_text text="'PRE-TRANSFER\nworkers on ship: %s\nworkforce at target: %s'.[this.assignedcontrolled.people.{entityrole.worker}.count, $target.workforce.amount]" chance="$debugchance"/>

      <do_if value="$target == $origin">
        <transfer_people result="$people_transferred" object="this.assignedcontrolled" otherobject="$target" providepeople="false">
          <matching_people newroles="[entityrole.worker]" races="[$species]" amounts="[$numpeople]"/>
        </transfer_people>
        <debug_text text="'%s people transferred from %s %s %s to %s %s %s.'.[$people_transferred.count, @$target.idcode, $target.knownname, $target, @this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
      </do_if>
      <do_elseif value="$target == $destination">
        <!-- NB: transfer may fail, completely or partially, if there is no compatible habitation for people who will transfer. -->
        <transfer_people result="$people_transferred" object="$target" otherobject="this.assignedcontrolled" receiveworkforce="true" receivepeople="false">
          <matching_people currentroles="[entityrole.worker]" amounts="[$numpeople]"/>
        </transfer_people>
        <debug_text text="'%s people transferred from %s %s %s to %s %s %s.'.[$people_transferred.count, @this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, @$target.idcode, $target.knownname, $target]" chance="$debugchance"/>
      </do_elseif>
      <do_else>
        <debug_text text="'%s %s %s docked at target, but target is neither origin nor destination. no transfer done.\ntarget: %s %s %s\norigin: %s %s %s\ndestination: %s %s %s'.[@this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, @$target.idcode, $target.knownname, $target, @$origin.idcode, $origin.knownname, $origin, @$destination.idcode, $destination.knownname, $destination]" filter="error"/>
        <resume label="cleanup"/>
      </do_else>

      <debug_text text="'POST-TRANSFER\nworkers on ship: %s\nworkforce at target: %s'.[this.assignedcontrolled.people.{entityrole.worker}.count, $target.workforce.amount]" chance="$debugchance"/>

      <wait min="2s" max="5s"/>

      <do_if value="$target == $origin">
        <debug_text text="'transfer with origin done. looping back.'" chance="$debugchance"/>
        <resume label="init"/>
      </do_if>

      <label name="cleanup"/>

    </actions>
  </attention>
</aiscript>