<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="order.build.find.task" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="10">
  <!--

  Order for a CV to find tasks to aid in building or repair
  by Owen

  -->
  <order id="FindBuildTasks" name="{1041, 491}" description="{1041, 492}" category="trade" infinite="true" allowinloop="false">
    <params>
      <param name="range" default="if this.ship.jobmainsector then this.ship.jobmainsector else this.sector" type="sector" text="{1041, 10017}" advanced="true" comment="Building space range"/>
      <param name="maxjumps" default="36" type="number" text="{1041, 10055}" advanced="true" comment="Max gate distance to find build tasks">
        <input_param name="startvalue" value="36"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="36"/>
        <input_param name="step" value="1"/>
      </param>
      <param name="playeronly" text="{1041, 10155}" default="this.ship.isplayerowned" type="internal" comment="Only respond to requests from player builds?"/>
      <param name="ownfactiononly" default="false" type="internal" comment="Only respond to requests from own true owner?"/>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires primarypurpose="purpose.build"/>
  </order>
  <interrupts>
    <handler ref="AttackHandler" />
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler" />
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler" />
    <handler ref="TideHandler"/>
    <handler comment="Requested for build">
      <conditions>
        <event_object_signalled object="this.container" param="'request construction vessel'" comment="event.param2 == $requesting_buildmodule, event.param3 = $buildtask" />
        <check_value value="event.param2.container.tradenpc"/>
        <set_value name="event.param2.container.tradenpc.$construction_vessel_response" exact="false"/>
        <check_value value="not $playeronly or event.param2.owner == faction.player"/>
        <check_any>
          <check_value value="$ownfactiononly and this.ship.trueowner == event.param2.trueowner"/>
          <check_value value="not $ownfactiononly and event.param2.hasrelation.dock.{this.ship}"/>
        </check_any>
        <check_value value="not @this.$assigningtobuildstorage and not this.ship.constructionmodule and $spaces.indexof.{event.param2.cluster}"/>
        <!--Immediate feedback as the actions will not occur this frame-->
        <set_value name="event.param2.container.tradenpc.$construction_vessel_response" exact="true"/>
        <!--Make sure this CV doesn't say YES! to any other build storage request this frame-->
        <set_value name="this.$assigningtobuildstorage" exact="true"/>
      </conditions>
      <actions>
        <set_value name="$buildmodule" exact="event.param2"/>
        <assign_construction_vessel object="this.ship" buildmodule="event.param2"/>
        <remove_value name="this.$assigningtobuildstorage"/>
        <!--TODO @Owen Do not abort restocking?-->
        <abort_called_scripts resume="deploy" />
      </actions>
    </handler>
  </interrupts>
  <init>
    <!-- Main action for waiting times -->
    <!--TODO @Owen -->
    <set_command_action commandaction="commandaction.searchingtrades" />

    <!-- declaration of $spaces moved to init since it's used in an interrupt handler which could be triggered before the script runs. -->
    <!-- Ranges -->
    <do_if value="$range and not @$range.isclass.space">
      <!-- For jobs, get the string range 'zone', 'sector', 'cluster' -->
      <set_value name="$range" exact="this.ship.{$range}" />
    </do_if>

    <debug_text text="'looking for clusters within %s jumps of %s %s.'.[$maxjumps, $range.knownname, $range]" chance="$debugchance"/>
    <find_cluster_in_range distances="$clusterstable" multiple="true" object="$range" maxdistance="$maxjumps"/>
    <!-- sort them -->
    <!-- NB: $spaces expected to be clusters further down. -->
    <set_value name="$spaces" exact="$clusterstable.keys.sorted" />
    <!-- init possible destinations -->
    <set_value name="$destinations" exact="[]" />
    <remove_value name="$clusterstable"/>
  </init>
  <patch sinceversion="7">
    <do_if value="this.ship.constructionmodule">
      <debug_text text="'Searching construction vessel ' + this.ship + ' ' + this.ship.knownname + ' had an assigned constructionmodule. Removing.'" filter="savegame"/>
      <disengage_construction_vessel object="this.ship"/>
    </do_if>
  </patch>
  <patch sinceversion="4">
    <do_if value="not $destinations.count?">
      <set_value name="$destinations" exact="$spaces"/>
    </do_if>
  </patch>
  <patch sinceversion="6">
    <do_all exact="@$destinations.count" counter="$i" reverse="true">
      <do_if value="$destinations.{$i}.owner and this.assignedcontrolled.hasrelation.enemy.{$destinations.{$i}.owner}">
        <remove_value name="$destinations.{$i}"/>
      </do_if>
    </do_all>
  </patch>
  <patch sinceversion="9">
    <debug_text text="'Setting CV to rebuild their search spaces as old list may have been modified'" filter="savegame"/>
    <set_value name="$patch_rebuild_spaces" exact="true"/>
  </patch>
  <patch sinceversion="10">
    <set_value name="$ownfactiononly" exact="false"/>
  </patch>
  <attention min="unknown">
    <actions>
      <label name="start" />

      <do_if value="player.age gt @$next_resupply_check" chance="30">
        <debug_text text="'%1 (%2) ready to resupply.'.[this.ship.knownname, this.ship]" chance="$debugchance"/>
        <signal_objects object="this.ship" param="'resupply'" param2="[false]" param3="$debugchance" comment="param2 = [urgent?, resupplystationID], param3 = $debugchance"/>
        <set_value name="$next_resupply_check" exact="player.age + 30min"/>
      </do_if>

      <include_interrupt_actions ref="GetBlacklistgroup"/>
      <!-- try to find an interesting location -->
      <clear_list list="$destinations"/>
      <do_if value="$patch_rebuild_spaces?">
        <!--Rebuild $spaces list-->
        <find_cluster_in_range distances="$clusterstable" multiple="true" object="$range" maxdistance="$maxjumps"/>
        <set_value name="$spaces" exact="$clusterstable.keys.sorted" />
        <remove_value name="$clusterstable"/>
      </do_if>
      <do_all exact="$spaces.count" counter="$i">
        <find_sector name="$sectors" space="$spaces.{$i}" multiple="true"/>
        <do_for_each name="$locsector" in="$sectors">
          <do_if value="(not this.assignedcontrolled.hasblacklist.{blacklisttype.sectoractivity}.{$blacklistgroup} and not this.assignedcontrolled.hasblacklist.{blacklisttype.sectortravel}.{$blacklistgroup}) or (not $locsector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{this.assignedcontrolled} and not $locsector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled})">
            <!-- find shipyards, wharfs, equipment docks (must be operational) -->
            <find_station name="$shipyards" space="$locsector" append="false" multiple="true">
              <match_any>
                <match plannedequipmentdock="true"/>
                <match plannedshipyard="true"/>
                <match plannedwharf="true"/>
              </match_any>
              <match_relation_to object="this.assignedcontrolled" relation="neutral" comparison="ge"/>
            </find_station>
            <!-- if there are shipyards in range -->
            <do_if value="$shipyards.count">
              <!-- add their zones as destinations -->
              <do_all exact="$shipyards.count" counter="$j">
                <append_to_list name="$destinations" exact="$shipyards.{$j}.zone"  />
              </do_all>
            </do_if>
            <!-- try and find gates, when no shipyard, with 50% chance -->
            <do_elseif value="true" chance="50">
              <find_gate name="$gates" space="$locsector" active="true" multiple="true"/>
              <!-- if there are gates in range -->
              <do_if value="$gates.count">
                <set_value name="$disregardedzones" exact="[]"/>

                <!-- add their zones as destinations if safe -->
                <do_for_each name="$potentialgate" in="$gates">
                  <set_value name="$disregardgate" exact="false"/>
                  <do_if value="not $destinations.indexof.{$potentialgate.zone} and not $disregardedzones.indexof.{$potentialgate.zone}">
                    <!--Check gate in 2 passes. 1st: its own sector owners, 2nd: its destination sector owners-->
                    <do_all exact="2" counter="$gate_pass">
                      <set_value name="$gatesec" exact="if $gate_pass == 1 then $potentialgate.sector else $potentialgate.destination.sector"/>
                      <do_if value="$gatesec.iscontested">
                        <do_for_each name="$contestingfaction" in="$gatesec.contestingfactions">
                          <do_if value="this.assignedcontrolled.hasrelation.enemy.{$contestingfaction}">
                            <set_value name="$disregardgate" exact="true"/>
                            <break/>
                          </do_if>
                        </do_for_each>
                      </do_if>
                      <!-- NB: $spaces are clusters which do not have owners. biggest spaces that can be owned are sectors. -->
                      <do_elseif value="this.assignedcontrolled.hasrelation.enemy.{$gatesec.owner}">
                        <set_value name="$disregardgate" exact="true"/>
                      </do_elseif>

                      <do_if value="$disregardgate">
                        <break/>
                      </do_if>
                    </do_all>
                    <do_if value="$disregardgate">
                      <append_to_list name="$disregardedzones" exact="$potentialgate.zone"/>
                    </do_if>
                    <do_else>
                      <append_to_list name="$destinations" exact="$potentialgate.zone"/>
                    </do_else>
                  </do_if>
                </do_for_each>
              </do_if>
              <remove_value name="$gates"/>
              <remove_value name="$disregardgate"/>
              <remove_value name="$disregardedzones"/>
            </do_elseif>
            <remove_value name="$shipyards"/>
            <!-- with a max number of destinations is enough -->
            <do_if value="$destinations.count ge 5">
              <break/>
            </do_if>
          </do_if>
        </do_for_each>
        <do_if value="$destinations.count ge 5">
          <break/>
        </do_if>
      </do_all>
      <!-- Default random destinations -->
      <do_if value="not $destinations.count">
        <debug_text text="'No interesting destination found. Use all valid $spaces in range'" chance="$debugchance" />
        <do_if value="this.assignedcontrolled.hasblacklist.{blacklisttype.sectoractivity}.{$blacklistgroup} or this.assignedcontrolled.hasblacklist.{blacklisttype.sectortravel}.{$blacklistgroup}">
          <do_for_each name="$loccluster" in="$spaces">
            <find_sector name="$sectors" space="$loccluster" multiple="true"/>
            <do_for_each name="$locsector" in="$sectors">
              <do_if value="not $locsector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{this.assignedcontrolled} and not $locsector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{this.assignedcontrolled}">
                <append_to_list name="$destinations" exact="$locsector"/>
              </do_if>
            </do_for_each>
          </do_for_each>
        </do_if>
        <do_else>
          <set_value name="$destinations" exact="$spaces.clone"/>
        </do_else>
      </do_if>
      <do_if value="$patch_rebuild_spaces?">
        <debug_text text="'Rebuilt spaces and destinations list. $spaces: ' + $spaces.count + ' elements. $destinations: ' + $destinations.count + ' elements.'" filter="savegame" chance="0" />
        <remove_value name="$patch_rebuild_spaces"/>
      </do_if>
      <remove_value name="$sectors"/>

      <set_order_syncpoint_reached order="this.ship.order"/>

      <assert value="not this.ship.constructionmodule" text="this.ship + ' ' + this.ship.knownname + ' is looking for build tasks while it already is assigned to ' + this.ship.constructionmodule + ' [Owen]'" break="always"/>

      <label name="await build task"/>

      <do_while value="true">
        <!-- Initialize buildmodule to later be set by an event-->
        <set_value name="$buildmodule" exact="null"/>
        <do_if value="$patch_rebuild_spaces?">
          <resume label="start"/>
        </do_if>

        <!-- Move to destination -->
        <do_if value="@$destinations.count">
          <set_value name="$randindex" min="1" max="$destinations.count" profile="decreasing"/>
          <do_if value="not $destinations.{$randindex}.isoperational">
            <!-- destination (zone) no longer exists, go back to the top to rebuild the $destinations list-->
            <resume label="start"/>
          </do_if>
          <debug_text text="'Idle destination: %s (%s of %s)'.[$destinations.{$randindex}.knownname, $randindex, $destinations.count]" chance="$debugchance" />

          <run_script name="'move.generic'" result="$movesuccess">
            <param name="destination" value="$destinations.{$randindex}"/>
            <param name="endintargetzone" value="true" />
          </run_script>
          <do_if value="not $movesuccess">
            <debug_text text="'No path to destination.'" chance="$debugchance"/>
            <remove_from_list name="$destinations" exact="$destinations.{$randindex}"/>
            <do_if value="$destinations.count">
              <debug_text text="'Clearing current destination and re-evaluating.'" chance="$debugchance"/>
              <resume label="await build task"/>
            </do_if>
            <debug_text text="'Aborting.'" chance="$debugchance"/>
            <do_if value="@this.assignedcontrolled.order.isrunning">
              <set_order_failed order="this.assignedcontrolled.order" text="{1045, 101}" comment="Unable to reach destination."/>
            </do_if>
            <resume label="cleanup"/>
          </do_if>
        </do_if>

        <!-- Idle for a while -->
        <run_script name="'move.idle'" >
          <param name="Min" value="1min" />
          <param name="Max" value="5min" />
        </run_script>
      </do_while>

      <label name="deploy"/>

      <do_if value="not $buildmodule.exists or not $buildmodule.buildstorage.base">
        <resume label="await build task"/>
      </do_if>

      <create_order id="'DeployToStation'" object="this.ship" immediate="true">
        <param name="station" value="$buildmodule.buildstorage.base"/>
        <param name="debugchance" value="$debugchance"/>
      </create_order>

      <wait sinceversion="8"/>

      <label name="cleanup"/>

      <do_if value="@this.assignedcontrolled.order.isrunning">
        <set_order_failed order="this.assignedcontrolled.order" text="{1045, 101}" comment="Unable to reach destination."/>
      </do_if>

      <do_if value="@this.assignedcontrolled.defaultorder == this.assignedcontrolled.order">
        <do_if value="this.assignedcontrolled.isjobship">
          <debug_text text="'Job ship %s %s %s unable to reach destination to execute default order.'.[@this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" filter="error"/>
        </do_if>
        <cancel_order order="this.assignedcontrolled.defaultorder"/>
      </do_if>

    </actions>
  </attention>
</aiscript>
