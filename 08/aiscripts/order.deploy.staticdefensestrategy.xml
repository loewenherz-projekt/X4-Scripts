<?xml version="1.0" encoding="utf-8"?>
<aiscript name="order.deploystaticdefensestrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="2">
  <!--
    overview of steps. these steps may have been changed (e.g. danger signal, pause deployment signal) since this summary. but the overall approach is the same.
    1. requeststrategy: signal galaxy with "StaticDefense_request"
    2. InitStrategy
    3. updateloadout: add_build_to_modify_ship
    4. getnextdeployableandposition
    5. if there's already a deployable withint 5m then add to count_success
    6. count_success < positionsfield.count then getnextdeployableandposition
    7. if count_success >= positionsfield.count then resume at requeststrategy
    8. deploy
    9. resume getnextdeployableandposition
  -->
  <order id="DeployStaticDefenseStrategy" name="{1041, 881}" description="{1041, 882}" category="internal" infinite="true" allowinloop="false">
    <params>
      <param name="staticdefensestrategy" type="internal" default="null" text="{1041, 10174}" comment="list. Static Defense Strategy" />
      <param name="isminesonly" type="internal" default="false" text="{1041, 10175}" comment="bool. Minelaying strategies only" />
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <location object="$staticdefensestrategy.$Sector" position="$staticdefensestrategy.$Position" radius="20km" condition="$staticdefensestrategy != null"/>
  </order>
  <interrupts>
    <library>
      <actions name="InitStrategy">
        <set_value name="$sector" exact="$staticdefensestrategy.$Sector" />
        <debug_text text="'%s, %s InitStrategy $sector: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $sector.knownname]" chance="$debugchance" />
        <include_interrupt_actions ref="GetMacrosToDeploy" />
        <debug_text text="'%s, %s $macros_todeploy: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $macros_todeploy]" chance="$debugchance" />
        <set_value name="$count_nostrategyreceived" exact="0" />
      </actions>

      <actions name="DeinitStrategy">
        <debug_text text="'%s, %s DeinitStrategy'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
        <set_value name="$staticdefensestrategy" exact="null" />
        <set_value name="$macros_todeploy" exact="null" />
      </actions>

      <actions name="GetRequiredLoadout">
        <!-- <set_value name="$price" exact="0Cr" /> -->
        <set_value name="$build_ammo" exact="table[]" comment="for add_build_to_modify_ship" />
        <set_value name="$number_perdeployable" exact="this.assignedcontrolled.ammostorage.deployable.capacity / $macros_todeploy.count" />
        <do_all counter="$i" exact="$macros_todeploy.count">
          <set_value name="$deployable" exact="$macros_todeploy.{$i}" />
          <set_value name="$build_ammo.{$deployable}" exact="$number_perdeployable - this.assignedcontrolled.ammostorage.{$deployable}.count" />
          <debug_text text="'%s, %s $deployable (buy): %s, %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $deployable.name, $build_ammo.{$deployable}]" chance="$debugchance" />
        </do_all>
        <set_value name="$extra" exact="(this.assignedcontrolled.ammostorage.deployable.capacity - $number_perdeployable * $macros_todeploy.count)i" />
        <do_if value="$extra">
          <set_value operation="add" name="$build_ammo.{$macros_todeploy.{1}}" exact="$extra" />
          <debug_text text="'%s, %s $deployable (buy): %s, %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $deployable.name, $build_ammo.{$deployable}]" chance="$debugchance" />
        </do_if>
        <set_value name="$resupplyhandler_override_deployablemacroamounts" exact="[]" comment="for resupply handler" />
        <do_for_each name="$deployable" valuename="$amount" in="$build_ammo">
          <do_if value="$amount lt 1">
            <append_to_list name="$resupplyhandler_override_deployablemacroamounts" exact="[$deployable, 0]" />
          </do_if>
          <do_else>
            <append_to_list name="$resupplyhandler_override_deployablemacroamounts" exact="[$deployable, $amount]" />
          </do_else>
        </do_for_each>
        <debug_text text="'%s, %s $resupplyhandler_override_deployablemacroamounts: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $resupplyhandler_override_deployablemacroamounts]" chance="$debugchance" />
      </actions>

      <actions name="GetMacrosToDeploy">
        <set_value name="$macros_todeploy" exact="[]" />
        <do_for_each name="$macro_todeploy" in="$staticdefensestrategy.$MacrosToDeploy">
          <do_if value="$macro_todeploy.isclass.ship">
            <find_dockingbay name="$dockingbay" object="this.assignedcontrolled">
              <match_dock size="$macro_todeploy.docksize" storage="false"/>
            </find_dockingbay>
            <do_if value="$dockingbay">
              <append_to_list name="$macros_todeploy" exact="$macro_todeploy" />
            </do_if>
          </do_if>
          <do_else>
            <append_to_list name="$macros_todeploy" exact="$macro_todeploy" />
          </do_else>
        </do_for_each>
      </actions>
    </library>

    <handler ref="SectorChangeHandler"/>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="AttackHandler"/>
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler"/>
    <handler ref="TideHandler"/>

    <handler comment="ReceiveStrategy">
      <conditions>
        <event_object_signalled object="this.assignedcontrolled" param="'StaticDefense_sendStrategy'" />
      </conditions>
      <actions>
        <set_value name="$staticdefensestrategy_received" exact="event.param2" />
        <debug_text text="'%s, %s ReceiveStrategy $staticdefensestrategy_received: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $staticdefensestrategy_received]" chance="$debugchance" />
        <abort_called_scripts resume="start" />
      </actions>
    </handler>

    <handler comment="PauseDeployment">
      <conditions>
        <event_object_signalled object="this.assignedcontrolled" param="'StaticDefense_stopDeployment'" />
      </conditions>
      <actions>
        <debug_text text="'%s, %s PauseDeployment param2.{2}.$Id: %s == %s?'.[this.assignedcontrolled, this.assignedcontrolled.idcode, event.param2.{2}.$Id, @$staticdefensestrategy.$Id]" chance="$debugchance" />
        <do_if value="event.param2.{2}.$Id == @$staticdefensestrategy.$Id">
          <abort_called_scripts resume="idle" />
        </do_if>
      </actions>
    </handler>

    <handler comment="Deployed">
      <conditions>
        <check_any>
          <event_object_launched_lasertower object="this.assignedcontrolled" />
          <event_object_launched_mine object="this.assignedcontrolled" />
        </check_any>
      </conditions>
      <actions>
        <debug_text text="'%s, %s Deployed'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
        <do_if value="not @event.param.islasertower">
          <set_value name="$mines_safe" exact="[macro.weapon_gen_mine_03_macro]" />
          <do_if value="not $mines_safe.indexof.{event.param.macro}">
            <debug_text text="'%s, %s set_object_active false: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, event.param.macro]" chance="$debugchance" />
            <set_object_active object="event.param" activate="false" />
          </do_if>
        </do_if>
        <debug_text text="'%s, %s signal_objects StaticDefense_deploy'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
        <signal_objects object="player.galaxy" param="'StaticDefense_deploy'" param2="[this.assignedcontrolled, $staticdefensestrategy, event.param]" />
      </actions>
    </handler>
  </interrupts>
  <init>
  </init>
  <attention min="unknown">
    <actions>

      <label name="start" />
      <!-- <do_if value="(not global.$debugMineLayer?) or global.$debugMineLayer == this.assignedcontrolled or (not @global.$debugMineLayer.exists)">
        <set_value name="global.$debugMineLayer" exact="this.assignedcontrolled" />
        <set_value name="$debugchance" exact="100" />
      </do_if> -->
      <set_value name="$state" exact="'start'" />
      <debug_text text="'%s, %s =====$state: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $state]" chance="$debugchance" />
      <debug_text text="'%s, %s $staticdefensestrategy_received: %s $staticdefensestrategy: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, @$staticdefensestrategy_received, $staticdefensestrategy]" chance="$debugchance" />
      <do_if value="$staticdefensestrategy_received?">
        <edit_order_param order="this.assignedcontrolled.order" param="'staticdefensestrategy'" value="$staticdefensestrategy_received" />
        <remove_value name="$staticdefensestrategy_received" />
        <wait min="0.1s" max="1s" sinceversion="2" comment="force restart for edit_order_param" />
      </do_if>
      <do_elseif value="$staticdefensestrategy">
        <include_interrupt_actions ref="InitStrategy" />
        <resume label="updateloadout" />
      </do_elseif>
      <do_else>
        <resume label="requeststrategy" />
      </do_else>

      <label name="randr" />
      <set_value name="$state" exact="'randr'" />
      <debug_text text="'%s, %s =====$state: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $state]" chance="$debugchance" />
      <find_station_by_true_owner name="$station" space="player.galaxy" faction="this.assignedcontrolled.trueowner" sortbydistanceto="this.assignedcontrolled">
        <match checkoperational="true"/>
        <match cansupplyclass="this.assignedcontrolled.class"/>
      </find_station_by_true_owner>
      <do_if value="$station">
        <set_value name="$count_nostrategyreceived" exact="0" />
        <include_interrupt_actions ref="DeinitStrategy" />
        <run_script name="'order.dock.wait'">
          <param name="destination" value="$station" />
          <param name="timeout" value="10min" />
        </run_script>
        <resume label="requeststrategy" />
      </do_if>
      <do_else>
        <resume label="idle" />
      </do_else>

      <label name="idle" />
      <set_value name="$state" exact="'idle'" />
      <debug_text text="'%s, %s =====$state: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $state]" chance="$debugchance" />
      <include_interrupt_actions ref="DeinitStrategy" />
      <set_order_syncpoint_reached order="this.assignedcontrolled.order"/>
      <do_if value="this.sector">
        <debug_text text="'%s, %s =====$state: %s with move.idle'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $state]" chance="$debugchance" />
        <run_script name="'move.idle'" >
          <param name="Min" value="5s" />
          <param name="Max" value="10s" />
        </run_script>
      </do_if>
      <do_else>
        <debug_text text="'%s, %s =====$state: %s with wait'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $state]" chance="$debugchance" />
        <wait min="5s" max="10s" sinceversion="1" />
      </do_else>
      <resume label="requeststrategy" />

      <label name="requeststrategy" />
      <set_value name="$state" exact="'requeststrategy'" />
      <debug_text text="'%s, %s =====$state: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $state]" chance="$debugchance" />
      <debug_text text="'%s, %s $staticdefensestrategy (pre signal): %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $staticdefensestrategy]" chance="$debugchance" />
      <do_if value="not $staticdefensestrategy">
        <debug_text text="'%s, %s signal_objects StaticDefense_requestStrategy'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
        <signal_objects object="player.galaxy" param="'StaticDefense_requestStrategy'" param2="[this.assignedcontrolled, $isminesonly]" />
        <wait min="5s" max="10s" />
        <debug_text text="'%s, %s $staticdefensestrategy (post signal): %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $staticdefensestrategy]" chance="$debugchance" />
        <debug_text text="'%s, %s shouldnt be here because faction logic should have sent the strategy.'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
        <debug_text text="'%s, %s in case it didnt, idle.'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
        <do_if value="not $staticdefensestrategy">
          <set_value operation="add" name="$count_nostrategyreceived" exact="1" />
          <debug_text text="'%s, %s $count_nostrategyreceived: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $count_nostrategyreceived]" chance="$debugchance" />
          <do_if value="$count_nostrategyreceived lt 3">
            <resume label="idle" />
          </do_if>
          <do_else>
            <resume label="randr" />
          </do_else>
        </do_if>
      </do_if>

      <label name="updateloadout" />
      <set_value name="$state" exact="'updateloadout'" />
      <debug_text text="'%s, %s =====$state: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $state]" chance="$debugchance" />
      <include_interrupt_actions ref="GetRequiredLoadout" />
      <set_value name="$stocklevel_points" exact="0" />
      <do_for_each name="$builddata" in="$resupplyhandler_override_deployablemacroamounts">
          <set_value name="$builddata_macro" exact="$builddata.{1}" />
          <set_value name="$builddata_count" exact="$builddata.{2}" />
          <debug_text text="'%s, %s $builddata_macro: %s, $builddata_count: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $builddata_macro.name, $builddata_count]" chance="$debugchance" />
          <debug_text text="'%s, %s this.assignedcontrolled.ammostorage.{$builddata_macro}.count: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, this.assignedcontrolled.ammostorage.{$builddata_macro}.count]" chance="$debugchance" />
          <do_if value="this.assignedcontrolled.ammostorage.{$builddata_macro}.count">
            <set_value operation="add" name="$stocklevel_points" exact="1" />
          </do_if>
      </do_for_each>
      <do_if value="$stocklevel_points ge $resupplyhandler_override_deployablemacroamounts.count">
        <resume label="getnextdeployableandposition" />
      </do_if>
      <set_value name="$stations" exact="[]" />
      <set_value name="$station" exact="null" />
      <do_if value="this.isplayerowned">
        <find_station name="$stations" space="player.galaxy" sortbydistanceto="this.assignedcontrolled" multiple="true">
          <match knownto="this.assignedcontrolled.owner"/>
          <match checkoperational="true"/>
          <match cansupplyclass="this.assignedcontrolled.class"/>
          <match mayattack="this.assignedcontrolled" negate="true"/>
          <match_relation_to faction="this.assignedcontrolled.owner" comparison="ge" relation="neutral" />
          <match_any_wares wares="$macros_todeploy" />
        </find_station>
      </do_if>
      <do_else>
        <find_station_by_true_owner name="$stations" space="player.galaxy" faction="this.assignedcontrolled.trueowner" sortbydistanceto="this.assignedcontrolled" multiple="true">
          <match checkoperational="true"/>
          <match cansupplyclass="this.assignedcontrolled.class"/>
          <match mayattack="this.assignedcontrolled" negate="true"/>
          <match_relation_to faction="this.assignedcontrolled.owner" comparison="ge" relation="neutral" />
          <match_any_wares wares="$macros_todeploy" />
        </find_station_by_true_owner>
      </do_else>
      <do_for_each name="$stationinlist" in="$stations">
        <do_if value="this.assignedcontrolled.gatedistance.{$stationinlist} gt -1">
          <set_value name="$station" exact="$stationinlist" />
          <break />
        </do_if>
      </do_for_each>
      <do_if value="not $station">
        <resume label="idle" />
      </do_if>
      <debug_text text="'%s, %s signal_objects resupply (pre)'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
      <signal_objects object="this.assignedcontrolled" param="'resupply'" param2="[true, $station, null, $resupplyhandler_override_deployablemacroamounts]" param3="0" />
      <wait min="5s" max="10s" />
      <debug_text text="'%s, %s signal_objects resupply (post)'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
      <debug_text text="'%s, %s shouldnt be here because resupply should have created an order.'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
      <debug_text text="'%s, %s in case it didnt, idle.'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
      <resume label="idle" />

      <label name="getnextdeployableandposition" />
      <set_value name="$state" exact="'getnextdeployableandposition'" />
      <debug_text text="'%s, %s =====$state: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $state]" chance="$debugchance" />
      <wait min="1s" max="5s" />
      <set_value name="$macro_todeploy" exact="$macros_todeploy.{1}" />
      <debug_text text="'%s, %s this.assignedcontrolled.ammostorage.{%s}.count: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $macro_todeploy.name, this.assignedcontrolled.ammostorage.{$macro_todeploy}.count]" chance="$debugchance" />
      <do_if value="this.assignedcontrolled.ammostorage.{$macro_todeploy}.count lt 1" comment="not in stock, updateloadout">
        <resume label="updateloadout" />
      </do_if>
      <do_if value="$macros_todeploy.count gt 1">
        <remove_value comment="cycle list by removing then appending"
        name="$macros_todeploy.{1}" />
        <append_to_list name="$macros_todeploy" exact="$macro_todeploy" />
      </do_if>
      <set_value name="$position" exact="$staticdefensestrategy.$PositionsField.{1}" />
      <remove_value name="$staticdefensestrategy.$PositionsField.{1}" />
      <append_to_list name="$staticdefensestrategy.$PositionsField" exact="$position" />
      <set_value operation="add" name="$staticdefensestrategy.$AttemptCount" exact="1" />
      <debug_text text="'%s, %s this.assignedcontrolled.size: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, this.assignedcontrolled.size]" chance="$debugchance" />
      <find_object name="$macro_nearby" macro="$macros_todeploy" space="$sector" sortbyvalue="loop.element.distanceto.[$sector, $position]" />
      <do_if value="$macro_nearby and $macro_nearby.distanceto.[$sector, $position] le this.assignedcontrolled.size * 0.75">
        <set_value operation="add" name="$staticdefensestrategy.$SuccessCount" exact="1" />
        <do_if value="
          $staticdefensestrategy.$AttemptCount lt $staticdefensestrategy.$PositionsField.count or
          $staticdefensestrategy.$SuccessCount lt $staticdefensestrategy.$PositionsField.count * 0.75"
          comment="try again if not enough attempts or successful deployments lt 75%. successul deployment at exact position is not important. attempt at deployment is.">
          <resume label="getnextdeployableandposition" />
        </do_if>
        <do_else>
          <debug_text text="'%s, %s signal_objects StaticDefense_complete'.[this.assignedcontrolled, this.assignedcontrolled.idcode]" chance="$debugchance" />
          <signal_objects object="player.galaxy" param="'StaticDefense_complete'" param2="[this.assignedcontrolled, $staticdefensestrategy]" />
          <resume label="idle" />
        </do_else>
      </do_if>

      <label name="deploy" />
      <set_value name="$state" exact="'deploy'" />
      <debug_text text="'%s, %s =====$state: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $state]" chance="$debugchance" />
      <run_script name="'order.deployobjectatposition'">
        <param name="destination" value="[$sector, $position]" />
        <param name="objectstodeploy" value="[$macro_todeploy]" />
        <param name="amountstodeploy" value="[1]" />
        <!-- <param name="debugchance" value="$debugchance" /> -->
      </run_script>
      <resume label="getnextdeployableandposition" />

      <label name="finish" />
      <set_value name="$state" exact="'finish'" />
      <debug_text text="'%s, %s =====$state: %s'.[this.assignedcontrolled, this.assignedcontrolled.idcode, $state]" chance="$debugchance" />
    </actions>
  </attention>
</aiscript>
