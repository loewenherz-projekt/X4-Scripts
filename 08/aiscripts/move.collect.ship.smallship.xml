<?xml version="1.0" encoding="iso-8859-1" ?>

<!--

Script for a ship to collect crates from space
Handled cases:
- small ship collecting crates of inventory wares via flying into it

-->

<aiscript name="move.collect.ship.smallship" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="2">
  <params>
    <param name="targets" comment="Group of crates to pickup" />

    <!-- debugging -->
    <param name="debugchance" default="0" comment="informational debug output"/>
  </params>
  <interrupts>
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <patch sinceversion="1">
    <do_if value="$success?">
      <set_value name="$success" exact="false"/>
    </do_if>
  </patch>
  <patch sinceversion="2">
    <do_if value="@$targets.count">
      <debug_text text="'PATCH: resetting target ownership.'" filter="savegame"/>
      <do_for_each name="$loctarget" in="$targets">
        <set_owner object="$loctarget" faction="null"/>
      </do_for_each>
    </do_if>
  </patch>
  <attention min="unknown">
    <actions>
      <set_value name="$success" exact="false"/>

      <label name="start" />

      <debug_text text="'start: num targets: %s'.[$targets.count]" chance="$debugchance"/>
      <wait min="10ms" max="50ms"/>

      <do_all exact="$targets.count" counter="$i" reverse="true">
        <do_if value="not $targets.{$i}.isclass.collectable and not $targets.{$i}.isdeployable">
          <debug_text text="'target ' + $targets.{$i} + ' ' + $targets.{$i}.macro.id + ' is not of class collectable. Removing from group.'" chance="$debugchance"/>
          <remove_from_group group="$targets" object="$targets.{$i}"/>
        </do_if>
        <do_elseif value="$targets.{$i}.isdeployable">
          <do_if value="not this.assignedcontrolled.ammostorage.deployable.free">
            <debug_text text="'no storage space remaining for deployable target ' + $targets.{$i} + ' ' + $targets.{$i}.macro.id + '. Removing from group.'" chance="$debugchance"/>
            <remove_from_group group="$targets" object="$targets.{$i}"/>
          </do_if>
        </do_elseif>
        <do_elseif value="@$targets.{$i}.ammo.count">
          <do_if value="not this.assignedcontrolled.ammostorage.{$targets.{$i}.ammo.macro.ware}.free">
            <debug_text text="'no space for ammo: %s.'.[$targets.{$i}.ammo.macro]" chance="$debugchance"/>
            <remove_from_group group="$targets" object="$targets.{$i}"/>
          </do_if>
        </do_elseif>
        <do_else>
          <set_value name="$wares" exact="$targets.{$i}.wares.list"/>
          <do_all exact="$wares.count" counter="$o">
            <do_if value="$wares.{$o}.isammo">
              <do_if value="$wares.{$o}.isdeployable and not this.ship.ammostorage.deployable.free">
                <debug_text text="'deployable case: target ' + $targets.{$i} + ' ' + $targets.{$i}.macro.id + ' cannot collect contained ware. ' + $wares + ' Removing from group.'" chance="$debugchance"/>
                <remove_from_group group="$targets" object="$targets.{$i}"/>
                <break/>
              </do_if>
              <do_elseif value="$wares.{$o}.objectmacro.isclass.countermeasure and not this.ship.ammostorage.countermeasure.free">
                <debug_text text="'countermeasure case: target ' + $targets.{$i} + ' ' + $targets.{$i}.macro.id + ' cannot collect contained ware. ' + $wares + ' Removing from group.'" chance="$debugchance"/>
                <remove_from_group group="$targets" object="$targets.{$i}"/>
                <break/>
              </do_elseif>
              <do_elseif value="not this.ship.ammostorage.{$wares.{$o}}.free">
                <debug_text text="'ammo case: target ' + $targets.{$i} + ' ' + $targets.{$i}.macro.id + ' cannot collect contained ware. ' + $wares + ' Removing from group.'" chance="$debugchance"/>
                <remove_from_group group="$targets" object="$targets.{$i}"/>
                <break/>
              </do_elseif>
            </do_if>
            <do_elseif value="not $wares.{$o}.isinventory and not this.ship.cargo.{$wares.{$o}}.free">
              <debug_text text="'cargo case: target ' + $targets.{$i} + ' ' + $targets.{$i}.macro.id + ' cannot collect contained ware. ' + $wares + ' Removing from group.'" chance="$debugchance"/>
              <remove_from_group group="$targets" object="$targets.{$i}"/>
              <break/>
            </do_elseif>
          </do_all>
          <remove_value name="$wares"/>
        </do_else>
      </do_all>
      <debug_text text="'post filter: num targets: %s'.[$targets.count]" chance="$debugchance"/>

      <do_if value="not $targets.count">
        <return value="$success"/>
      </do_if>

      <set_value name="$nearest" exact="null"/>
      <set_value name="$nearestdist" exact="null"/>
      <do_for_each name="$loctarget" in="$targets">
        <debug_text text="'%s%s(%s%s)%s'.[$loctarget.exists, $loctarget.isdeployable or not $loctarget.owner, $loctarget.isdeployable, not $loctarget.owner, $loctarget.sector == this.sector]" chance="0"/>
        <debug_text text="'owner: %s'.[$loctarget.owner]" chance="0"/>
        <do_if value="$loctarget.exists and ($loctarget.isdeployable or not $loctarget.owner) and ($loctarget.sector == this.sector)">
          <set_value name="$locdist" exact="$loctarget.distanceto.{this.assignedcontrolled}"/>
          <do_if value="not $nearest or ($locdist lt $nearestdist)">
            <set_value name="$nearest" exact="$loctarget"/>
            <set_value name="$nearestdist" exact="$locdist"/>
          </do_if>
          <remove_value name="$locdist"/>
        </do_if>
      </do_for_each>
      <debug_text text="'nearest: %s %s'.[@$nearest.knownname, $nearest]" chance="$debugchance"/>

      <do_if value="$nearest">
        <debug_text text="'designating nearest target'" chance="$debugchance"/>
        <set_value name="$target" exact="$nearest"/>
      </do_if>
      <do_elseif value="$targets.{1}.exists and $targets.{1}.sector != this.sector">
        <debug_text text="'going to target 1'.[$targets.count]" chance="$debugchance"/>
        <!--Not in the sector of any target, move to the first in the group-->
        <run_script name="'move.generic'" result="$movesuccess">
          <param name="destination" value="$targets.{1}"/>
          <param name="endintargetzone" value="true"/>
        </run_script>
        <do_if value="not $movesuccess">
          <debug_text text="'No path to destination. Clearing target and re-evaluating.'" chance="$debugchance"/>
          <remove_from_group group="$targets" object="$targets.{1}"/>
          <do_if value="not $targets.count">
            <do_if value="not $success and @this.assignedcontrolled.order.isrunning">
              <set_order_failed order="this.assignedcontrolled.order" text="{1045, 101}" comment="Unable to reach destination."/>
            </do_if>
            <return value="$success"/>
          </do_if>
        </do_if>

        <resume label="start"/>
      </do_elseif>
      <do_else>
        <!-- $targets is populated but have all been claimed -->
        <return value="$success"/>
      </do_else>

      <label name="collect"/>

      <do_if value="not $target.exists or (not $target.isdeployable and $target.owner)">
        <debug_text text="'collect: target invalid. restarting.'" chance="$debugchance"/>
        <resume label="start"/>
      </do_if>

      <!-- Now there is a target -->
      <set_command command="command.collect" param="$target" />

      <!-- leave formation (if there is any) as that would block our movement -->
      <leave_formation object="this.ship" />

      <!-- if necessary order the ship to move to the correct zone -->
      <debug_text text="'check if already in correct zone'" chance="$debugchance" />
      <do_if value="this.ship.zone != $target.zone">
        <debug_text text="'move to correct zone'" chance="$debugchance" />
        <run_script name="'move.generic'" result="$movesuccess">
          <param name="destination" value="$target"/>
          <param name="endintargetzone" value="true"/>
        </run_script>
        <do_if value="not $movesuccess">
          <debug_text text="'No path to destination. Clearing target and re-evaluating.'" chance="$debugchance"/>
          <remove_from_group group="$targets" object="$target"/>
          <do_if value="not $targets.count">
            <do_if value="not $success and @this.assignedcontrolled.order.isrunning">
              <set_order_failed order="this.assignedcontrolled.order" text="{1045, 101}" comment="Unable to reach destination."/>
            </do_if>
            <return value="$success"/>
          </do_if>
          <resume label="start"/>
        </do_if>
      </do_if>

      <label name="movetotarget" />

      <do_if value="not $target.exists or (not $target.isdeployable and $target.owner and (@$lastclaimed != $target))">
        <debug_text text="'movetotarget: target invalid. restarting. %s%s %s'.[not $target.exists, not $target.isdeployable, $target.owner]" chance="$debugchance"/>
        <resume label="start"/>
      </do_if>

      <debug_text text="'movetotarget'" chance="$debugchance"/>

      <do_if value="$target.isdeployable">
        <debug_text text="'deactivating %s %s %s prior to collection.'.[@$target.idcode, @$target.knownname, $target]" chance="$debugchance"/>
        <set_object_active object="$target" activate="false"/>
        <set_value name="$collectdeployable"/>
      </do_if>
      <do_else>
        <set_owner object="$target" faction="this.assignedcontrolled.owner"/>
        <set_value name="$lastclaimed" exact="$target"/>
      </do_else>

      <!-- global interrupt handlers can move this back to the start of the label -->
      <move_to object="this.ship" destination="$target" flightbehaviour="flightbehaviour.pickup" forcesteering="true" finishonapproach="false">
        <interrupt>
          <conditions>
            <check_any>
              <event_object_collided object="this.ship" otherobject="$target"/>
              <event_object_destroyed object="$target"/>
            </check_any>
          </conditions>
        </interrupt>
      </move_to>
      <stop_moving object="this.ship"/>

      <do_if value="$target.exists and not $target.iswreck">
        <debug_text text="'Collecting the target.'" chance="$debugchance"/>
        <do_if value="not $collectdeployable?">
          <collect_drop object="this.ship" drop="$target"/>
        </do_if>
        <do_else>
          <debug_text text="'%s %s %s collecting deployable %s %s'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, @$target.knownname, $target]" chance="$debugchance"/>
          <collect_deployable object="this.assignedcontrolled" deployable="$target"/>
        </do_else>
        <remove_from_group group="$targets" object="$target"/>
        <set_value name="$success" exact="true"/>
        <wait exact="10ms"/>
        <do_if value="$target.exists and not $target.iswreck and not $target.isdeployable">
          <debug_text text="'target still exists after collection. rescinding ownership.'" chance="$debugchance"/>
          <set_owner object="$target" faction="null"/>
        </do_if>
      </do_if>
      <do_else>
        <debug_text text="'%s%s'.[$target.exists, not $target.iswreck]" chance="$debugchance"/>
      </do_else>
      <remove_value name="$collectdeployable"/>

      <!-- Iterate -->
      <do_if value="$targets.count">
        <resume label="start" />
      </do_if>

      <set_to_default_flight_control_model object="this.assignedcontrolled"/>

      <return value="$success"/>
    </actions>
  </attention>
  <on_abort>
    <do_if value="this.assignedcontrolled.isoperational">
      <set_to_default_flight_control_model object="this.assignedcontrolled"/>
    </do_if>
    <do_if value="@$target.exists and not $target.isdeployable">
      <set_owner object="$target" faction="null"/>
    </do_if>
  </on_abort>
</aiscript>