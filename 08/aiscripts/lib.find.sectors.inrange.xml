<?xml version="1.0" encoding="utf-8"?>
<aiscript name="lib.find.sectors.inrange" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <params>
    <param name="refobject" default="this.assignedcontrolled" comment="Reference object from which gate distance is measured."/>
    <param name="mingatedistance" default="0" comment="Minimum gate distance from refobject"/>
    <param name="maxgatedistance" default="1" comment="Maximum gate distance from refobject"/>
    <param name="usesectordistance" default="false" comment="Use sector distances rather than gate distances. Min/max 0 will resolve to only one sector, even in clusters with more than one sector."/>
    <param name="applyblacklist" default="true"/>
    <param name="blacklistgroup" default="null"/>
    <param name="returndistancetable" default="false"/>
    <param name="debugchance" default="0"/>
  </params>
  <attention min="unknown">
    <actions>
      <set_value name="$thisship" exact="this.assignedcontrolled"/>
      <!-- NB: we are always allowed to operate in our commander's current sector, regardless of blacklist definition. -->
      <set_value name="$commandersector" exact="@$thisship.commander.sector"/>
      <!-- NB: if all spaces are invalid due to blacklists, we are allowed to operate in our current sector. -->
      <set_value name="$mysector" exact="if not @this.zone.issuperhighway then this.sector else this.zone.destination.sector"/>
      <set_value name="$playerowned" exact="this.isplayerowned"/>

      <do_if value="$applyblacklist and not $blacklistgroup">
        <include_interrupt_actions ref="GetBlacklistgroup"/>
      </do_if>

      <set_value name="$refsector" exact="null"/>
      <do_if value="$refobject.isclass.sector">
        <set_value name="$refsector" exact="$refobject"/>
      </do_if>
      <do_elseif value="$refobject.sector">
        <set_value name="$refsector" exact="$refobject.sector"/>
      </do_elseif>
      <do_elseif value="@$refobject.zone.issuperhighway">
        <set_value name="$refsector" exact="$refobject.zone.destination.sector"/>
      </do_elseif>
      <do_elseif value="@$refobject.issuperhighway">
        <set_value name="$refsector" exact="$refobject.destination.sector"/>
      </do_elseif>
      <do_else>
        <find_sector name="$locsectors" space="$refobject" multiple="true"/>
        <do_if value="not $locsectors.count">
          <debug_text text="'refobject: %s %s %s is not a sector, not in a sector, and has no sectors.'.[@$refobject.class, @$refobject.knownname, $refobject]" filter="error"/>
        </do_if>
        <do_all exact="$locsectors.count" counter="$i">
          <do_if value="not $evaldist?">
            <set_value name="$refsector" exact="$locsectors.{$i}"/>
            <set_value name="$evaldist" exact="$refobject.gatedistance.{$refsector}"/>
          </do_if>
          <do_elseif value="$refobject.gatedistance.{$refsector} lt $evaldist">
            <set_value name="$refsector" exact="$locsectors.{$i}"/>
            <set_value name="$evaldist" exact="$refobject.gatedistance.{$refsector}"/>
          </do_elseif>
        </do_all>
        <remove_value name="$evaldist"/>
        <remove_value name="$locsectors"/>
      </do_else>

      <do_if value="$thisship.hasblacklist.{blacklisttype.sectoractivity}.{$blacklistgroup} or $thisship.hasblacklist.{blacklisttype.sectortravel}.{$blacklistgroup}">
        <do_if value="$usesectordistance">
          <do_if value="$playerowned">
            <find_sector_in_range distances="$locsectors" multiple="true" object="$refobject" mindistance="$mingatedistance" maxdistance="$maxgatedistance" known="true"/>
          </do_if>
          <do_else>
            <find_sector_in_range distances="$locsectors" multiple="true" object="$refobject" mindistance="$mingatedistance" maxdistance="$maxgatedistance"/>
          </do_else>
        </do_if>
        <do_else>
          <find_cluster_in_range distances="$locclusters" multiple="true" object="$refobject" mindistance="$mingatedistance" maxdistance="$maxgatedistance"/>
          <set_value name="$locsectors" exact="table[]"/>
          <do_for_each name="$loccluster" valuename="$jumpdist" in="$locclusters">
            <find_sector name="$sectorlist" space="$loccluster" multiple="true"/>
            <do_for_each name="$locsector" in="$sectorlist">
              <!-- gatedistance checks done further down -->
              <debug_text text="'sector: %s, jumpdist: %s, gatedist: %s'.[$locsector.knownname, $jumpdist, $refobject.gatedistance.{$locsector}]" chance="$debugchance"/>
              <set_value name="$locsectors.{$locsector}" exact="$jumpdist"/>
            </do_for_each>
            <remove_value name="$sectorlist"/>
          </do_for_each>
          <remove_value name="$locclusters"/>
        </do_else>
        <set_value name="$sectortable" exact="table[]"/>
        <debug_text text="'found %s sectors. mingatedistance: %s, maxgatedistance: %s'.[$locsectors.keys.count, $mingatedistance, $maxgatedistance]" chance="$debugchance"/>

        <do_for_each name="$locsector" in="$locsectors">
          <do_if value="not $playerowned or $locsector.isknown">
            <!--TODO @Owen the assignedobject may not actually have a blacklist, so we could simply take $locsectors as the distance table. No way of identifying that yet.-->
            <do_if value="not $applyblacklist or ($locsector == $commandersector) or (not $locsector.isblacklisted.{blacklisttype.sectoractivity}.{$blacklistgroup}.{$thisship} and not $locsector.isblacklisted.{blacklisttype.sectortravel}.{$blacklistgroup}.{$thisship})">
              <do_if value="$applyblacklist and $locsector != $commandersector">
                <set_value name="$locgatedist" exact="$refobject.gatedistance.{$locsector}.{$blacklistgroup}.{$thisship}"/>
                <!-- locgatedist == -1 means no path -->
                <do_if value="($locgatedist ge 0) and ($locgatedist ge $mingatedistance) and ($locgatedist le $maxgatedistance)">
                  <set_value name="$locreturngatedist" exact="$locsector.gatedistance.{$refobject}.{$blacklistgroup}.{$thisship}"/>
                  <do_if value="($locreturngatedist ge 0) and ($locreturngatedist le $maxgatedistance)">
                    <debug_text text="'adding %s with gate dist %s'.[$locsector.knownname, $locgatedist]" chance="$debugchance"/>
                    <set_value name="$sectortable.{$locsector}" exact="$locgatedist"/>
                  </do_if>
                  <do_else>
                    <debug_text text="'return path from %s %s is outside defined range. removed.'.[$locsector.class, @$locsector.knownname]" chance="$debugchance"/>
                  </do_else>
                </do_if>
                <do_else>
                  <debug_text text="'%s %s is outside defined range. removed.'.[$locsector.class, @$locsector.knownname]" chance="$debugchance"/>
                </do_else>
              </do_if>
              <do_else>
                <debug_text text="'adding %s with gate dist %s'.[$locsector.knownname, $locsectors.{$locsector}]" chance="$debugchance"/>
                <set_value name="$sectortable.{$locsector}" exact="$locsectors.{$locsector}"/>
              </do_else>
            </do_if>
            <do_else>
              <debug_text text="'%s %s is blacklisted. removed.'.[$locsector.class, @$locsector.knownname]" chance="$debugchance"/>
            </do_else>
          </do_if>
        </do_for_each>
      </do_if>
      <do_else>
        <do_if value="$usesectordistance">
          <do_if value="$playerowned">
            <find_sector_in_range distances="$sectortable" multiple="true" object="$refobject" mindistance="$mingatedistance" maxdistance="$maxgatedistance" known="true"/>
          </do_if>
          <do_else>
            <find_sector_in_range distances="$sectortable" multiple="true" object="$refobject" mindistance="$mingatedistance" maxdistance="$maxgatedistance"/>
          </do_else>
        </do_if>
        <do_else>
          <find_cluster_in_range distances="$locclusters" multiple="true" object="$refobject" mindistance="$mingatedistance" maxdistance="$maxgatedistance"/>
          <debug_text text="'evaluating %s clusters. refobject: %s. mindistance: %s, maxdistance: %s'.[$locclusters.keys.count, $refobject.knownname, $mingatedistance, $maxgatedistance]" chance="$debugchance"/>
          <set_value name="$sectortable" exact="table[]"/>
          <do_for_each name="$loccluster" valuename="$jumpdist" in="$locclusters">
            <find_sector name="$sectorlist" space="$loccluster" multiple="true"/>
            <do_if value="$sectorlist.count == 1">
              <do_if value="not $playerowned or $sectorlist.{1}.isknown">
                <set_value name="$locgatedist" exact="$refobject.gatedistance.{$sectorlist.{1}}"/>
                <do_if value="($locgatedist ge 0) and ($locgatedist ge $mingatedistance) and ($locgatedist le $maxgatedistance)">
                  <debug_text text="'single-sector cluster. sector: %s, jumpdist: %s, gatedist: %s'.[$sectorlist.{1}.knownname, $jumpdist, $refobject.gatedistance.{$sectorlist.{1}}]" chance="$debugchance"/>
                  <set_value name="$sectortable.{$sectorlist.{1}}" exact="$locgatedist"/>
                </do_if>
              </do_if>
            </do_if>
            <do_else>
              <do_for_each name="$locsector" in="$sectorlist">
                <debug_text text="'evaluating %s'.[$locsector.knownname]" chance="0"/>
                <do_if value="not $playerowned or $locsector.isknown">
                  <!-- needed for multi-sector clusters with one-way superhighways -->
                  <set_value name="$locgatedist" exact="$refobject.gatedistance.{$locsector}"/>
                  <do_if value="($locgatedist ge 0) and ($locgatedist ge $mingatedistance) and ($locgatedist le $maxgatedistance)">
                    <set_value name="$locreturngatedist" exact="$locsector.gatedistance.{$refobject}"/>
                    <do_if value="($locreturngatedist ge 0) and ($locreturngatedist le $maxgatedistance)">
                      <debug_text text="'multi-sector cluster. sector: %s, jumpdist: %s, gatedist: %s'.[$locsector.knownname, $jumpdist, $locgatedist]" chance="$debugchance"/>
                      <set_value name="$sectortable.{$locsector}" exact="$locgatedist"/>
                    </do_if>
                  </do_if>
                </do_if>
              </do_for_each>
            </do_else>
            <remove_value name="$sectorlist"/>
          </do_for_each>
          <remove_value name="$locclusters"/>
        </do_else>
      </do_else>
      <remove_value name="$locsectors"/>
      <remove_value name="$locreturngatedist"/>
      <remove_value name="$locgatedist"/>
      <do_if value="$returndistancetable">
        <!-- If mingatedistance <= 0, include the refobject space -->
        <do_if value="($mingatedistance le 0) and $refsector and not $sectortable.{$refsector}?">
          <set_value name="$sectortable.{$refsector}" exact="0"/>
        </do_if>

        <do_if value="not $sectortable.keys.count">
          <debug_text text="'no valid spaces found. probably due to blacklist. adding my own sector.'" chance="$debugchance"/>
          <do_if value="$mysector">
            <set_value name="$sectortable.{$mysector}" exact="0"/>
          </do_if>
        </do_if>
        <return value="$sectortable"/>
      </do_if>
      <do_else>
        <!-- sort them while preventing sectors with the same gatedistance always appearing in the list in the same order. -->
        <set_value name="$spaces" exact="$sectortable.keys.list"/>
        <shuffle_list list="$spaces"/>
        <sort_list list="$spaces" sortbyvalue="$sectortable.{loop.element}"/>

        <!-- If mingatedistance <= 0, include the refobject space -->
        <do_if value="($mingatedistance le 0) and $refsector and not $spaces.indexof.{$refsector}">
          <set_value name="$spaces.{1}" exact="$refsector" operation="insert"/>
        </do_if>

        <do_if value="not $spaces.count">
          <debug_text text="'no valid spaces found. probably due to blacklist. adding my own sector.'" chance="$debugchance"/>
          <do_if value="$mysector">
            <set_value name="$spaces.{1}" exact="$mysector" operation="insert"/>
          </do_if>
        </do_if>

        <return value="$spaces"/>
      </do_else>
    </actions>
  </attention>
</aiscript>