<?xml version="1.0" encoding="iso-8859-1" ?>
<aiscript name="order.trade.wareexchange.ship" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="7">
  <order id="TradeExchange" name="{1041, 121}" description="{1041, 122}" category="internal" allowinloop="false">
    <params>
      <param name="tradedeal" type="trade" text="{1041, 10130}" comment="Trade">
        <input_param name="playerreadonly" value="true"/>
      </param>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
      <match class="class.spacesuit" negate="true"/>
    </requires>
    <location object="$tradedeal.exchangepartner.{this.object}" condition="$tradedeal.exists" />
  </order>
  <interrupts>
    <handler>
      <conditions>
        <check_any>
          <event_object_signalled object="this.assignedcontrolled" param="'wareexchange_abort'" param2="$tradedeal"/>
          <check_all>
            <event_object_signalled object="this.assignedcontrolled" param="'wareexchange_done'" param2="$tradedeal"/>
            <check_value value="not @$ispassive or (@this.$readyexchange != [$tradedeal, 1])"/>
          </check_all>
          <check_all>
            <check_any>
              <event_trade_cancelled seller="$targetobject"/>
              <event_trade_completed seller="$targetobject"/>
            </check_any>
            <check_value value="event.param2 == $tradedeal"/>
          </check_all>
        </check_any>
      </conditions>
      <actions>
        <debug_text text="'%s %s %s aborting ware exchange. event: %s, param: %s.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, event.name, event.param]" chance="$debugchance"/>
        <abort_called_scripts resume="finish"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_control_entity_added object="this.assignedcontrolled" check="false"/>
      </conditions>
      <actions>
        <!-- NB: without this, process can stall if the player takes over the pilot chair of the passive ship before the first signal is received by the active ship. -->
        <do_if value="$currentpilot.$readyexchange">
          <set_value name="this.$readyexchange" exact="$currentpilot.$readyexchange"/>
          <remove_value name="$currentpilot.$readyexchange"/>
        </do_if>
        <set_value name="$currentpilot" exact="this.assignedcontrolled.pilot"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_object_signalled object="this.assignedcontrolled" param="'wareexchange_restart'" param2="$tradedeal"/>
      </conditions>
      <actions>
        <do_if value="not $ispassive">
          <debug_text text="'restart signal received. moving to target object.'"/>
          <abort_called_scripts resume="move_to_targetobject"/>
        </do_if>
        <debug_text text="'restart signal received. resuming at passive_trade.'"/>
        <abort_called_scripts resume="passive_trade"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <event_game_loaded/>
      </conditions>
      <actions>
        <do_if value="not $tradedeal.exists or ($currentpilot.$readyexchange? and not $targetobject.pilot.$readyexchange?)">
          <!-- happens when the ware exchange order on the active partner is cancelled while the matching order on the passive partner is critical. should be impossible. cause unknown. -->
          <debug_text text="'event_game_loaded: invalid trade found. aborting.'" filter="error"/>
          <abort_called_scripts resume="finish"/>
        </do_if>
      </actions>
    </handler>
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <init>
    <!-- Initialize variables -->
    <set_value name="$targetobject" exact="$tradedeal.exchangepartner.{this.object}" comment="Partner" />
    <set_value name="$amount" exact="$tradedeal.amount" comment="Amount" />
    <set_value name="$ispassive" exact="$tradedeal.ispassive.{this.object}" comment="Is passive" />
    <set_value name="$currentpilot" exact="this.assignedcontrolled.pilot"/>
    <!-- info -->
    <set_command_action commandaction="commandaction.searchingtrades" />
    <set_command command="command.trade" param="$targetobject" />
    <!-- debugging -->
    <set_value name="$failreason" exact="''" />
  </init>
  <patch sinceversion="2">
    <do_if value="not $ispassive and not @this.$readyexchange and (@$targetobject.pilot.$readyexchange.{2} ge 1)">
      <debug_text text="'PATCH: %s %s %s in stuck wareexchange. signalling to restart.'.[@this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" filter="savegame"/>
      <signal_objects object="this.assignedcontrolled" param="'wareexchange_restart'" param2="$tradedeal"/>
    </do_if>
  </patch>
  <patch sinceversion="7">
    <do_if value="not $tradedeal.exists or ($currentpilot.$readyexchange? and not $targetobject.pilot.$readyexchange?)">
      <!-- happened when the ware exchange order on the active partner is cancelled while the matching order on the passive partner is critical. -->
      <debug_text text="'PATCH: invalid trade found. aborting.'"/>
      <signal_objects object="this.assignedcontrolled" param="'wareexchange_abort'" param2="$tradedeal"/>
      <signal_objects object="$targetobject" param="'wareexchange_abort'" param2="$tradedeal"/>
    </do_if>
  </patch>
  <attention min="unknown">
    <actions>

      <do_if value="not $tradedeal.exists or not $tradedeal.iswareexchange">
        <signal_objects object="this.assignedcontrolled" param="'wareexchange_abort'" param2="$tradedeal"/>
        <signal_objects object="$targetobject" param="'wareexchange_abort'" param2="$tradedeal"/>
        <wait exact="1ms" sinceversion="3"/>
      </do_if>

      <do_if value="this.assignedcontrolled.iscapitalship and not this.assignedcontrolled.units.{unitcategory.transport}.count and $targetobject.iscapitalship and not $targetobject.units.{unitcategory.transport}.count">
        <do_if value="@this.assignedcontrolled.order.isrunning">
          <set_order_failed order="this.assignedcontrolled.order" text="{1045, 123}" comment="No available cargo drones."/>
        </do_if>
        <signal_objects object="$targetobject" param="'wareexchange_abort'" param2="$tradedeal"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="$ispassive">
        <debug_text text="'\n\nSTART PASSIVE trade: %1. parked at: %2, docked at: %3\n'.[$tradedeal, @this.assignedcontrolled.parkedat, @this.assignedcontrolled.dock.container]" chance="$debugchance"/>
      </do_if>
      <do_else>
        <debug_text text="'\n\nSTART ACTIVE trade: %1. parked at: %2, docked at: %3\n'.[$tradedeal, @this.assignedcontrolled.parkedat, @this.assignedcontrolled.dock.container]" chance="$debugchance"/>
      </do_else>

      <debug_text text="'starting ware exchange between:\n%s %s %s, active: %s, seller: %s\n%s %s %s, active: %s, seller: %s'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, not $ispassive, $tradedeal.seller == this.assignedcontrolled, @$targetobject.idcode, @$targetobject.knownname, $targetobject, $ispassive, $tradedeal.seller == $targetobject]" chance="$debugchance"/>

      <!-- Ware Exchange cases -->
      <do_if value="$targetobject.isclass.ship and not $targetobject.buildanchor.exists">
        <set_value name="$localcontainer" exact="this.assignedcontrolled.container"/>
        <do_if value="@$targetobject.hascontext.{$localcontainer}">
          <debug_text text="'%s %s %s in the same context as trade partner %s %s %s. top level container: %s %s %s'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $targetobject.idcode, $targetobject.knownname, $targetobject, $localcontainer.idcode, $localcontainer.knownname, $localcontainer]" chance="$debugchance"/>
          <do_if value="$ispassive">
            <!-- add a flag to skip the movement -->
            <set_value name="$alreadythere"/>
            <resume label="passive_trade"/>
          </do_if>
          <resume label="check_trade"/>
        </do_if>

        <do_if value="this.assignedcontrolled.parkedat == $targetobject">
          <debug_text text="'already parked at targetobject.'" chance="$debugchance"/>
          <do_if value="@this.$unparkreleasesignal and (@$targetobject.order.id == 'WaitForSignal') and ($targetobject.order.$signaller == this.assignedcontrolled)">
            <debug_text text="'assuming active role. checking trade.'" chance="$debugchance"/>
            <!-- NB: in this case, we are parked, and $targetobject is waiting for our releasesignal. we assume the active role and execute the trade. -->
            <set_value name="$ispassive" exact="false"/>
            <resume label="check_trade"/>
          </do_if>
          <do_if value="$ispassive">
            <!-- add a flag to skip the movement -->
            <set_value name="$alreadythere"/>
            <resume label="passive_trade"/>
          </do_if>
          <resume label="check_trade"/>
        </do_if>

        <!-- NB: this assumes that two ships can never both dock with each other. -->
        <find_dockingbay object="$targetobject" name="$dock">
          <match_dock size="this.assignedcontrolled.docksize"/>
        </find_dockingbay>
        <do_if value="not $dock">
          <find_dockingbay object="this.assignedcontrolled" name="$dock">
            <match_dock size="$targetobject.docksize"/>
          </find_dockingbay>
        </do_if>

        <do_if value="$dock">
          <debug_text text="'%s %s %s can dock with %s %s %s. passive? %s'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $targetobject.idcode, $targetobject.knownname, $targetobject, $ispassive]" chance="$debugchance"/>
          <!-- overriding tradedeal.ispassive here. this will only apply to this script. anything else checking tradedeal.ispassive will still get the prior value. -->
          <do_if value="$dock.container != $targetobject">
            <set_value name="$ispassive"/>
            <resume label="passive_trade"/>
          </do_if>
          <set_value name="$ispassive" exact="false"/>
        </do_if>
        <!-- Case involving small ships -->
        <do_elseif value="not this.assignedcontrolled.iscapitalship or not $targetobject.iscapitalship">
          <do_if value="not $targetobject.pilot.exists">
            <do_if value="@this.assignedcontrolled.order.isrunning">
              <set_order_failed order="this.assignedcontrolled.order" text="{1045, 122}" comment="Unable to trade with trade partner."/>
            </do_if>
            <set_value name="$failreason" exact="'Unable to trade with trade partner'"/>
            <debug_text text="'Exchange partner has no pilot. Aborting.'" chance="$debugchance"/>
            <resume label="finish"/>
          </do_if>
          <!-- we need to do the drop&collect routine rather than actual trade operations -->
          <run_script name="'move.wareexchange'" result="$exchangeresult" >
            <param name="tradedeal" value="$tradedeal" />
            <param name="debugchance" value="$debugchance" />
          </run_script>

          <resume label="finish" />
        </do_elseif>
        <!-- Capital ships: if this is a ware exchange trade where we are the passive party, go be passive -->
        <do_elseif value="$ispassive">
          <resume label="passive_trade" />
        </do_elseif>
      </do_if>

      <!-- move to the object that sells/buys our stuff -->
      <label name="move_to_targetobject" />

      <!-- move to correct zone -->
      <!--<do_if value="this.zone != $targetobject.zone">
        <run_script name="'move.generic'">
          <param name="destination" value="$targetobject" />
          <param name="endintargetzone" value="true" />
        </run_script>
      </do_if>-->

      <!-- Capital ships -->
      <do_if value="this.assignedcontrolled.iscapitalship">
        <!-- Ware Exchange Case: Active Partner -->
        <do_if value="$targetobject.isclass.ship">
          <do_if value="not $targetobject.buildanchor.exists" comment="treat deployed builder ships like stations">
            <debug_text text="'Me %1 (%2), target %3 (%4)'.[this, this.assignedcontrolled.knownname, $targetobject.pilot, $targetobject.knownname]" chance="$debugchance"/>
            <!-- Wait for the passive trade to be ready  -->
            <debug_text text="'$targetobject.pilot.$readyexchange ' + @$targetobject.pilot.$readyexchange" chance="$debugchance"/>
            <do_if value="(@$targetobject.pilot.$readyexchange.{1} == $tradedeal) and ($targetobject.pilot.$readyexchange.{2} ge 1)">
              <debug_text text="'passive trader was already ready! trade: ' + $tradedeal" chance="$debugchance"/>
            </do_if>
            <do_else>
              <debug_text text="'wait for passive trader to be ready.'" chance="$debugchance"/>
              <stop_moving object="this.assignedcontrolled" />
              <set_command_action commandaction="commandaction.standingby" />
              <do_if value="not $targetobject.isoperational">
                <debug_text text="'exchange partner was destroyed.'" chance="$debugchance"/>
                <return/>
              </do_if>

              <debug_text text="'waiting for signal: wareexchange_ready. trade: ' + $tradedeal" chance="$debugchance"/>
              <wait>
                <interrupt>
                  <conditions>
                    <check_any>
                      <event_object_destroyed object="$targetobject"/>
                      <event_object_signalled object="this.assignedcontrolled" param="'wareexchange_ready'" param2="$tradedeal" />
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="event.name == 'event_object_destroyed'">
                      <debug_text text="'exchange partner was destroyed.'" chance="$debugchance"/>
                      <return/>
                    </do_if>
                    <debug_text text="'passive trader is ready! He finished the movement'" chance="$debugchance" />
                  </actions>
                </interrupt>
              </wait>
              <debug_text text="'received signal: wareexchange_ready. trade: ' + $tradedeal" chance="$debugchance"/>
            </do_else>
            <set_value name="this.$readyexchange" exact="[$tradedeal, 1]"/>
          </do_if>
        </do_if>

        <!-- move to correct zone -->
        <!-- NB: moving this here to make sure the passive partner is done moving and will not change sector contexts after this move.
                TODO: smarter would be to detect if the passive partner is going somewhere, determine where, and go there. for later. will require testing. -->
        <do_if value="this.zone != $targetobject.zone">
          <run_script name="'move.generic'" result="$movesuccess">
            <param name="destination" value="$targetobject" />
            <param name="endintargetzone" value="true" />
          </run_script>
          <do_if value="not $movesuccess">
            <do_if value="@this.assignedcontrolled.order.isrunning">
              <set_order_failed order="this.assignedcontrolled.order" text="{1045, 101}" comment="Unable to reach destination."/>
            </do_if>
            <set_value name="$failreason" exact="'Unable to reach destination'"/>
            <debug_text text="'Unable to reach destination. Aborting.'" chance="$debugchance"/>
            <resume label="finish"/>
          </do_if>
        </do_if>
        <!-- skip the movement step if we are already there -->
        <do_elseif value="this.assignedcontrolled.parkedat == $targetobject">
          <debug_text text="'already parked. going straight to trade.'" chance="$debugchance"/>
          <resume label="check_trade" />
        </do_elseif>

        <debug_text text="player.age + ' moving to park at ' + $targetobject.knownname" chance="$debugchance" />
        <run_script name="'move.park'" result="$parkresult">
          <param name="destination" value="$targetobject" />
          <param name="tradeoffer" value="$tradedeal" />
        </run_script>

        <do_if value="$parkresult">
          <debug_text text="player.age + ' now parked at ' + $targetobject.knownname" chance="$debugchance" />
        </do_if>
        <do_elseif value="this.$reevaluate_parking?">
          <remove_value name="this.$reevaluate_parking" />
          <debug_text text="player.age + ' need to re-evaluate our reason for parking at' + $targetobject.knownname" chance="$debugchance" />
          <set_value name="$failreason" exact="'ERR_RESERVATION_GONE_PARKING'" />
          <resume label="finish" />
        </do_elseif>
        <do_else>
          <set_value name="$failreason" exact="'ERR_PARKING_ERROR'" />
          <resume label="finish" />
        </do_else>

      </do_if>
      <do_else>
        <!-- skip the movement step if we are already there -->
        <do_if value="this.assignedcontrolled.dock and this.assignedcontrolled.container == $targetobject">
          <debug_text text="player.age + ' docked at ' + $targetobject.knownname" chance="$debugchance"/>

          <do_if value="(@$targetobject.pilot.$readyexchange.{1} == $tradedeal) and ($targetobject.pilot.$readyexchange.{2} ge 1)">
            <debug_text text="'passive trader was already ready! trade: ' + $tradedeal" chance="$debugchance"/>
          </do_if>
          <do_elseif value="$targetobject.isplayerowned and not $targetobject.pilot.exists">
            <!-- we are docked at the targetobject, allow the transfer even without the other party having a pilot instead of waiting for a signal that will never come -->
            <debug_text text="'passive trader has no pilot, try to do the transfer unilaterally: ' + $tradedeal" chance="$debugchance"/>
          </do_elseif>
          <do_else>
            <!-- NB: signal handling necessary in this case to make sure that $targetobject is running the matching ware exchange order. -->
            <debug_text text="'waiting for signal: wareexchange_ready. trade: ' + $tradedeal" chance="$debugchance"/>
            <wait sinceversion="4">
              <interrupt>
                <conditions>
                  <check_any>
                    <event_object_destroyed object="$targetobject"/>
                    <event_object_signalled object="this.assignedcontrolled" param="'wareexchange_ready'" param2="$tradedeal" />
                  </check_any>
                </conditions>
                <actions>
                  <do_if value="event.name == 'event_object_destroyed'">
                    <debug_text text="'exchange partner was destroyed.'" chance="$debugchance"/>
                    <return/>
                  </do_if>
                  <debug_text text="'passive trader is ready!'" chance="$debugchance" />
                </actions>
              </interrupt>
            </wait>
            <debug_text text="'received signal: wareexchange_ready. trade: ' + $tradedeal" chance="$debugchance"/>
          </do_else>
          <set_value name="this.$readyexchange" exact="[$tradedeal, 1]"/>

          <resume label="check_trade" />
        </do_if>
        <do_else>
          <do_if value="@this.assignedcontrolled.order.istradecomputer">
            <!-- immediate orders are not enqueued before trade computer orders and we need an immediate order to continue. -->
            <set_value name="$failreason" exact="'Cannot enqueue orders before this one.'"/>
            <debug_text text="'Cannot enqueue orders before this one. Aborting.'" chance="$debugchance"/>
            <resume label="finish"/>
          </do_if>
          <debug_text text="player.age + ' moving to dock at ' + $targetobject.knownname" chance="$debugchance"/>
          <create_order object="this.assignedcontrolled" id="'DockAt'" immediate="true">
            <param name="destination" value="$targetobject"/>
            <param name="debugchance" value="$debugchance"/>
          </create_order>
          <wait min="2ms" max="5ms" comment="short wait to allow DockAt order to begin" sinceversion="1"/>
        </do_else>
      </do_else>

      <!-- we have arrived, check amount limits -->
      <label name="check_trade" />

      <set_value name="$tradepartner" exact="this.assignedcontrolled"/>
      <do_if value="$tradedeal.ispassive.{this.assignedcontrolled}">
        <set_value name="$tradepartner" exact="$targetobject"/>
      </do_if>

      <do_if value="$tradedeal.seller.exists" comment="we want to buy something, look for sell offers">
        <debug_text text="'%1 wants to buy/transfer %2 %3 from %4 for %5Cr'.[$tradepartner.knownname, $tradedeal.amount, $tradedeal.ware, $tradedeal.seller.knownname, ($tradedeal.price / 1Cr)]" chance="$debugchance" />

        <clamp_trade_amount trade="$tradedeal" amount="$tradedeal.amount" buyer="$tradepartner" seller="$tradedeal.seller" result="$transferamount" updatedeal="true"/>
        <do_if value="$transferamount != $tradedeal.amount">
          <update_trade trade="$tradedeal" amount="$transferamount" desiredamount="$transferamount" />
        </do_if>

      </do_if>
      <do_else comment="we want to sell something">
        <debug_text text="'%1 wants to sell/transfer %2 %3 to %4 for %5Cr'.[$tradepartner.knownname, $tradedeal.amount, $tradedeal.ware, $tradedeal.buyer.knownname, ($tradedeal.price / 1Cr)]" chance="$debugchance" />

        <clamp_trade_amount trade="$tradedeal" amount="$tradedeal.amount" buyer="$tradedeal.buyer" seller="$tradepartner" result="$transferamount" updatedeal="true"/>
        <do_if value="$transferamount != $tradedeal.amount">
          <update_trade trade="$tradedeal" amount="$transferamount" desiredamount="$transferamount" />
        </do_if>

      </do_else>

      <!-- transfer cargo -->
      <label name="perform_trade"/>

      <set_value name="$timeout" exact="player.age + 2h" />
      <debug_text text="'trade info: %1x %2 for %3Cr total'.[$tradedeal.amount, $tradedeal.ware.name, ($tradedeal.price / 1Cr)]" chance="$debugchance" />

      <do_if value="$targetobject.isoperational">
        <!-- BUY/SELL -->
        <set_value name="$seller" exact="$tradedeal.seller" />
        <set_value name="$buyer" exact="$tradedeal.buyer" />
        <do_if value="this.shouldinformplayer and notification.npc_start_ware_transfer.active">
          <run_script name="'player.interaction'">
            <param name="Line" value="6004" comment="Starting ware transfer now."/>
            <param name="MaxQueueDelay" value="10s"/>
            <param name="caption" value="{1016,6}.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]"/>
            <param name="interactive" value="false"/>
            <param name="debugchance" value="$debugchance"/>
          </run_script>
        </do_if>

        <debug_text text="'ACTIVE: executing trade. setting order to critical.'" chance="$debugchance"/>
        <do_if value="(@$targetobject.order.id == 'TradeExchangePassive' or ($ispassive and @$targetobject.order.id == 'TradeExchange')) and @$targetobject.order.$tradedeal == $tradedeal">
          <!-- both orders must be set to critical at the same time because cancelling one cancels the other AS LONG AS they are both not critical.
                if $targetobject is not currently running the order, but we got in a position where we could now execute the trade, we can still proceed.
                  in that case, the trade will already have gotten cleaned up when the passive partner restarts the order, handled on start, will fail $tradedeal.exists. -->
          <set_order_state order="this.assignedcontrolled.order" state="orderstate.critical"/>
          <do_if value="$targetobject.order.isrunning">
            <set_order_state order="$targetobject.order" state="orderstate.critical"/>
          </do_if>
        </do_if>
        <!-- check this here. at this point, this order can no longer change and we should be in position to trade. the next order can still change, but undock/unpark is then handled in orders.base -->
        <set_value name="$unpark" exact="not ((@this.object.nextorder.id == 'TradeExchange' and @this.object.nextorder.$tradedeal.exchangepartner.{this.object} == $targetobject) or @this.object.nextorder.id == 'TradeExchangePassive')"/>
        <!-- Perform the trade -->
        <execute_trade tradeoffer="$tradedeal" tradepartner="$tradepartner" amount="$tradedeal.amount" result="$traderesult" custom="true">
          <interrupt_after_time time="121min / 5" />
        </execute_trade>
      </do_if>
      <do_else>
        <set_value name="$failreason" exact="'ERR_TRADEPARTNER_DESTROYED'" />
        <resume label="finish" />
      </do_else>

      <!-- Result (notify the player) -->
      <do_if value="$traderesult">
        <debug_text text="'ACTIVE: trade was successful'" chance="$debugchance"/>
        <!-- Helper script for feddback -->
        <run_script name="'player.interaction.traderesult'" >
          <param name="ware" value="$tradedeal.ware" />
          <param name="transferredamount" value="$tradedeal.transferredamount" />
          <param name="destroyedamount" value="$tradedeal.destroyedamount" />
          <param name="seller" value="$seller" />
          <param name="buyer" value="$buyer" />
          <param name="price" value="0Cr" />
        </run_script>
      </do_if>
      <do_else>
        <!-- TODO: player feedback -->
        <set_value name="$failreason" exact="'ERR_EXECUTE_TRADE'" />
        <resume label="finish" />
      </do_else>

      <do_if value="not $targetobject.isplayerowned and not $targetobject.hastradesubscription">
        <!-- if a playership trades with an NPC station that doesn't have a trade subscription anyway, store one offer snapshot -->
        <store_trade_offer_snapshot object="$targetobject" />
      </do_if>
      <!-- Remove reservation -->
      <do_if value="($targetobject == $tradedeal.buyer and $tradedeal.unbundle) or ($targetobject == $tradedeal.seller and $tradedeal.bundle)">
        <remove_ware_reservation object="$targetobject" reserver="this.assignedcontrolled" ware="$tradedeal.ware" amount="$tradedeal.amount" virtual="true" mission="$tradedeal.ismission" />
      </do_if>
      <do_else>
        <remove_ware_reservation object="$targetobject" reserver="this.assignedcontrolled" ware="$tradedeal.ware" amount="$tradedeal.amount" mission="$tradedeal.ismission" />
      </do_else>

      <debug_text text="'ACTIVE: detaching from masstraffic.'" chance="$debugchance"/>
      <!-- Recall the masstraffic drones (does not break the park connection) -->
      <!-- clean up after execute_trade cancels the passive order, and that causes the active order to be cancelled. so ANY blocking action at this point will cause the entire finish section to be skipped. -->
      <detach_from_masstraffic object="this.assignedcontrolled" wait="true">
        <interrupt_after_time time="5min" />
      </detach_from_masstraffic>

      <resume label="finish" />

      <!-- Ware Exchange Case: Passive Partner -->
      <label name="passive_trade" />

      <!-- Fly to a safe position -->
      <do_if value="not $alreadythere? and (this.assignedcontrolled.parkedat != $targetobject)">
        <debug_text text="'PASSIVE: moving to parking position.'" chance="$debugchance"/>
        <get_safe_pos result="$passivepos" object="this.assignedcontrolled" zone="this.zone" radius="this.size/2.0" ignored="this.assignedcontrolled" />
        <move_to object="this.assignedcontrolled" destination="this.zone" >
          <position value="$passivepos" />
          <rotation value="this.assignedcontrolled.rotation" />
        </move_to>
        <remove_value name="$passivepos" />
      </do_if>
      <do_else>
        <debug_text text="'PASSIVE: already there. going straight to trade.'" chance="$debugchance"/>
      </do_else>

      <wait min="10ms" max="100ms" comment="avoid timing issues reading/writing the blackboard" />

      <debug_text text="'Me %1 (%2), waiting for %3 (%4)'.[this, this.assignedcontrolled.knownname, $targetobject.pilot, $targetobject.knownname]" chance="$debugchance" />
      <debug_text text="'sending signal: wareexchange_ready. trade: ' + $tradedeal" chance="$debugchance"/>
      <signal_objects object="$targetobject" param="'wareexchange_ready'" param2="$tradedeal"/>
      <set_value name="this.$readyexchange" exact="[$tradedeal, 1]"/>

      <set_command_action commandaction="commandaction.waitingdrones" />
      <do_if value="not $targetobject.isoperational">
        <debug_text text="'exchange partner was destroyed.'" chance="$debugchance"/>
        <return/>
      </do_if>

      <do_if value="(@$targetobject.pilot.$readyexchange.{1} == $tradedeal) and ($targetobject.pilot.$readyexchange.{2} ge 2)">
        <debug_text text="'active trader was already done! trade: ' + $tradedeal" chance="$debugchance"/>
      </do_if>
      <do_else>
        <debug_text text="'waiting for signal: wareexchange_done. trade: ' + $tradedeal" chance="$debugchance"/>
        <wait comment="Wait until is done">
          <interrupt>
            <conditions>
              <check_any>
                <event_object_destroyed object="$targetobject"/>
                <event_object_signalled object="this.object" param="'wareexchange_done'" param2="$tradedeal"/>
              </check_any>
            </conditions>
            <actions>
              <do_if value="event.name == 'event_object_destroyed'">
                <debug_text text="'exchange partner was destroyed.'" chance="$debugchance"/>
                <return/>
              </do_if>
            </actions>
          </interrupt>
        </wait>
        <debug_text text="'received signal: wareexchange_done. trade: ' + $tradedeal" chance="$debugchance"/>
      </do_else>
      <debug_text text="'PASSIVE: I %1 (%2) am done exchanging with %3 (%4)'.[this, this.assignedcontrolled.knownname, $targetobject.pilot, $targetobject.knownname]" chance="$debugchance" />

      <wait min="1s" max="5s" />

      <label name="finish" />

      <!-- Finish the passive waiting -->
      <do_if value="not $ispassive">
        <debug_text text="'ACTIVE: I %1 (%2) am done exchanging with %3 (%4)'.[this, this.assignedcontrolled.knownname, $targetobject.pilot, $targetobject.knownname]" chance="$debugchance" />
        <!-- Send the done signal to the trade partner -->
        <debug_text text="'sending signal: wareexchange_done. trade: ' + $tradedeal" chance="$debugchance"/>
        <signal_objects object="$targetobject" param="'wareexchange_done'" param2="$tradedeal"/>
        <set_value name="this.$readyexchange" exact="[$tradedeal, 2]"/>
      </do_if>
      <do_else>
        <set_value name="this.$readyexchange" exact="[$tradedeal, 2]"/>
        <debug_text text="'PASSIVE: signal was bypassed. ispassive? %1'.[$ispassive]" chance="$debugchance"/>
      </do_else>

      <!-- Handle the success and fail cases -->
      <do_if value="$failreason != ''">
        <debug_text text="player.age + ' \'%1\' QUEUED TRADE RUN FAILED! Error: %2'.[this.assignedcontrolled.knownname, $failreason]" filter="error" />

        <do_if value="not $ispassive">
          <!-- Remove reservation -->
          <!-- TODO REMOVE -->
          <do_if value="@$targetobject.exists">
            <remove_ware_reservation object="$targetobject" reserver="this.assignedcontrolled" ware="$tradedeal.ware" mission="@$tradedeal.ismission" />
          </do_if>

          <do_if value="this.isplayerowned">
            <!-- Note: this can take time, so the trade id could dissapear -->
            <!-- INTERACTION: trade failed (logbook entry added in player.interaction.tradefailed) -->
            <run_script name="'player.interaction.tradefailed'">
              <param name="tradeoffer" value="$tradedeal" />
              <param name="ware" value="$tradedeal.ware" />
              <param name="seller" value="if @$tradedeal.seller.exists then $tradedeal.seller else this.assignedcontrolled" />
              <param name="buyer" value="if @$tradedeal.buyer.exists then $tradedeal.buyer else this.assignedcontrolled" />
              <param name="amount" value="$amount" />
              <param name="price" value="$tradedeal.unitprice * $amount" />
              <param name="debugchance" value="$debugchance" />
            </run_script>
            <!-- TODO: ask player for help -->
            <do_if value="this.shouldwarnplayer and notification.npc_order_not_complete.active">
              <run_script name="'player.interaction'">
                <param name="Line" value="10303" comment="Last order could not be completed."/>
                <param name="MaxQueueDelay" value="10s"/>
                <param name="caption" value="{1016,6}.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]"/>
                <param name="interactive" value="false"/>
                <param name="debugchance" value="$debugchance"/>
              </run_script>
            </do_if>
          </do_if>
        </do_if>

      </do_if>
      <do_else>
        <debug_text text="player.age + ' CONGRATULATIONS, TRADE RUN COMPLETE! parked at: ' + this.assignedcontrolled.parkedat" chance="$debugchance" />

        <!-- All trades done: If there is only this trade in the queue (only for active partner) -->
        <do_if value="not $ispassive and this.isplayerowned and not this.isclass.computer and not this.assignedcontrolled.tradeorders.count and not this.assignedcontrolled.nextorder and (not this.assignedcontrolled.commander or (this.assignedcontrolled.commander == player.occupiedship)) and notification.npc_await_orders.active">
          <!--<show_notification text="[{1015,31}, '', this.name, '', this.assignedcontrolled.name, '', {1015,32}]" sound="notification_achievement" comment="All trade operations completed." />-->
          <set_value name="$speakline" exact="10304" comment="Awaiting orders."/>
          <run_script name="'player.interaction'">
            <param name="Line" value="$speakline"/>
            <param name="MaxQueueDelay" value="10s"/>
            <param name="caption" value="{1016,6}.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]"/>
            <param name="interactive" value="false"/>
            <param name="debugchance" value="$debugchance"/>
          </run_script>
        </do_if>
      </do_else>

      <remove_value name="this.$readyexchange"/>

    </actions>
  </attention>
  <on_abort>
    <debug_text text="'aborting. parked at: ' + this.assignedcontrolled.parkedat" chance="$debugchance"/>
    <!-- clean-up -->
    <!--<signal_objects object="$targetobject" param="'wareexchange_abort'"  param2="$tradedeal"/>-->
    <do_if value="@$unpark">
      <debug_text text="'disconnecting from trade location. next order: %1. next exchange partner: %2. present exchange partner: %3. passive? %4'.[@this.object.nextorder.id, @this.object.nextorder.$tradedeal.exchangepartner.{this.object}, $targetobject, $ispassive]" chance="$debugchance"/>
      <disconnect_from_trade_location ship="this.assignedcontrolled" />
    </do_if>
    <remove_value name="this.$readyexchange" />
  </on_abort>
</aiscript>
