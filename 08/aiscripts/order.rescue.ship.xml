<?xml version="1.0" encoding="utf-8"?>
<aiscript name="order.rescue.ship" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <order id="RescueShip" name="{1041, 891}" description="{1041, 892}" category="navigation" allowinloop="false">
    <params>
      <param name="target" required="true" type="object" text="{1041,10126}" comment="Target. Spacesuit to pick up.">
        <input_param name="class" value="[class.spacesuit]"/>
        <input_param name="owner" value="this.ship.trueowner"/>
      </param>
      <param name="internalorder" type="internal" default="not this.ship.isplayerowned" comment="Will be passed on to move.generic for blacklist enforcement."/>
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041,10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires>
      <match shiptype="shiptype.lasertower" negate="true"/>
      <match class="class.spacesuit" negate="true"/>
    </requires>
    <location object="$target" condition="$target.exists"/>
  </order>
  <interrupts>
    <handler ref="SectorChangeHandler"/>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="AttackHandler"/>
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler"/>
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="ResupplyHandler"/>
    <handler ref="TideHandler"/>
  </interrupts>
  <init>
    <set_value name="$targetentity" exact="null"/>
    <do_if value="$target.pilot">
      <set_value name="$targetentity" exact="$target.pilot"/>
    </do_if>
  </init>
  <attention min="unknown">
    <actions>

      <do_if value="not $target.exists">
        <debug_text text="'Target %s %s %s has no valid context (disconnected?). Aborting.'.[@$target.idcode, @$target.knownname, $target]" filter="error"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="not $target.pilot">
        <debug_text text="'Target %s %s %s does not have a pilot. Aborting.'.[@$target.idcode, @$target.knownname, $target]" filter="error"/>
        <resume label="finish"/>
      </do_if>

      <!-- implicitly also checks if docking is possible. -->
      <do_if value="not this.assignedcontrolled.dockingallowed.{$target}">
        <debug_text text="'Target %s %s %s cannot dock at %s %s %s. Aborting.'.[@$target.idcode, @$target.knownname, $target, @this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled]" filter="error"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="$target.dock">
        <debug_text text="'Target %s %s %s %s is already docked at %s %s %s. Aborting.'.[@$target.class, @$target.idcode, @$target.knownname, $target, @$target.container.idcode, @$target.container.knownname, $target.container]" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="$target.zone.isclass.highway">
        <debug_text text="'Target is in a highway and cannot be picked up. Aborting.'" filter="error"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="($target.assigneddock and $target.assigneddock.controllable != this.assignedcontrolled) or (@$target.order.id == 'DockAt' and $target.order.$destination != this.assignedcontrolled)">
        <debug_text text="'%s %s %s already docking elsewhere. Aborting.'.[@$target.idcode, @$target.knownname, $target]" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="not this.assignedcontrolled.people.free and $targetentity != player.entity">
        <do_if value="@this.assignedcontrolled.order.isrunning">
          <set_order_failed order="this.assignedcontrolled.order" text="{1045, 145}" comment="No space available for additional crew."/>
        </do_if>
        <debug_text text="'no space left for crew. aborting.'" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <label name="start"/>

      <!-- TODO: add command.rescue, param pilot -->
      <set_command command="command.collect" param="$targetentity"/>

      <debug_text text="'Rescuing %s %s in %s %s %s %s.'.[@$targetentity.knownname, $targetentity, @$target.class, @$target.idcode, @$target.knownname, $target]" chance="$debugchance"/>

      <do_if value="not this.assignedcontrolled.hascontext.{$target.zone}">
        <run_script name="'move.generic'" result="$movesuccess">
          <param name="destination" value="$target"/>
          <param name="stopondetect" value="$target"/>
          <param name="strictblacklist" value="$internalorder"/>
          <param name="debugchance" value="$debugchance"/>
        </run_script>
        <do_if value="not $movesuccess">
          <do_if value="@this.assignedcontrolled.order.isrunning">
            <set_order_failed order="this.assignedcontrolled.order" text="{1045,101}" comment="Unable to reach destination." recurring="$internalorder"/>
          </do_if>
          <debug_text text="'Unable to reach destination. Aborting.'" chance="$debugchance"/>
          <resume label="finish"/>
        </do_if>
      </do_if>

      <do_if value="not $target.exists">
        <debug_text text="'target no longer exists. aborting.'" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="($target.assigneddock and $target.assigneddock.controllable != this.assignedcontrolled) or (@$target.order.id == 'DockAt' and $target.order.$destination != this.assignedcontrolled)">
        <debug_text text="'%s %s %s already docking elsewhere. Aborting.'.[@$target.idcode, @$target.knownname, $target]" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="not this.assignedcontrolled.people.free and $targetentity != player.entity">
        <do_if value="@this.assignedcontrolled.order.isrunning">
          <set_order_failed order="this.assignedcontrolled.order" text="{1045, 145}" comment="No space available for additional crew."/>
        </do_if>
        <debug_text text="'no space left for crew. aborting.'" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <!-- figure out where our applicable dock is and align that with target. adjust safepos radius. -->
      <find_dockingbay name="$dock" object="this.assignedcontrolled">
        <match_dock size="$target.docksize"/>
      </find_dockingbay>
      <do_if value="not $dock.isoperational">
        <debug_text text="'%s %s %s has no operational dock of size %s. Aborting.'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, $target.docksize]" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>
      <create_position name="$dockpos" space="this.assignedcontrolled" object="$dock"/>
      <create_position name="$todockpos" space="this.assignedcontrolled" value="$dock.todockpos" object="$dock"/>
      <debug_text text="'dockpos: %s\ntodockpos: %s'.[$dockpos, $todockpos]" chance="$debugchance"/>

      <set_value name="$dockquadrant" exact="quadrant.up"/>
      <set_value name="$safeposquadrant" exact="quadrant.down"/>
      <do_if value="($todockpos.y - $dockpos.y) lt 1m">
        <do_if value="($dockpos.y - $todockpos.y) gt 1m">
          <set_value name="$dockquadrant" exact="quadrant.down"/>
          <set_value name="$safeposquadrant" exact="quadrant.up"/>
        </do_if>
        <do_elseif value="($todockpos.z - $dockpos.z) gt 1m">
          <set_value name="$dockquadrant" exact="quadrant.front"/>
          <set_value name="$safeposquadrant" exact="quadrant.back"/>
        </do_elseif>
        <do_elseif value="($todockpos.x - $dockpos.x) gt 1m">
          <set_value name="$dockquadrant" exact="quadrant.right"/>
          <set_value name="$safeposquadrant" exact="quadrant.left"/>
        </do_elseif>
        <do_elseif value="($dockpos.x - $todockpos.x) gt 1m">
          <set_value name="$dockquadrant" exact="quadrant.left"/>
          <set_value name="$safeposquadrant" exact="quadrant.right"/>
        </do_elseif>
      </do_if>
      <debug_text text="'dockquadrant: %s'.[$dockquadrant]" chance="$debugchance"/>

      <set_value name="$safeposradius" exact="this.assignedcontrolled.height/2m"/>
      <do_if value="$dockquadrant != quadrant.up and $dockquadrant != quadrant.down">
        <do_if value="$dockquadrant == quadrant.front">
          <set_value name="$safeposradius" exact="this.assignedcontrolled.length/2m"/>
        </do_if>
        <do_elseif value="$dockquadrant == quadrant.right or $dockquadrant == quadrant.left">
          <set_value name="$safeposradius" exact="this.assignedcontrolled.width/2m"/>
        </do_elseif>
      </do_if>
      <debug_text text="'safeposradius: %sm'.[$safeposradius]" chance="$debugchance"/>

      <label name="move"/>

      <do_if value="this.assignedcontrolled.iscapitalship and this.assignedcontrolled.cansee.{$target} and $target.bboxdistanceto.{this.assignedcontrolled} le (1km + this.assignedcontrolled.size)">
        <debug_text text="'In a big ship and close enough that it would be faster to call them in than to move closer. Skipping movement.'" chance="$debugchance"/>
        <resume label="calltodock"/>
      </do_if>

      <!-- get safepos twice, first to make sure we'll fit in the space, and second to get a close offset to $target. at best, $interpos should be the position of $target with respect to $target.zone. if it isn't, there are obstructions about. -->
      <get_safe_pos result="$interpos" object="$target" space="$target.zone" zone="$target.zone" radius="[this.assignedcontrolled.length, this.assignedcontrolled.width, this.assignedcontrolled.height].max/2m" ignored="$target" allowyaxis="true" direction="$safeposquadrant" directionobject="$target.zone"/>
      <get_safe_pos result="$readypos" value="$interpos" zone="$target.zone" radius="$safeposradius" allowyaxis="true" direction="$safeposquadrant" directionobject="$target.zone"/>
      <!-- bboxdistance after movement should be less than this -->
      <set_value name="$expecteddistance" exact="$target.distanceto.[$target.zone, $readypos]"/>
      <debug_text text="'readypos: %s\nexpected distance to target: %sm'.[$readypos, $expecteddistance]" chance="$debugchance"/>
      <remove_value name="$interpos"/>

      <!-- all orientations other than look_at do not affect pitch, so we start from look_at -->
      <create_orientation name="$readyrot" orientation="look_at" refobject="$target">
        <position value="$readypos" space="$target.zone"/>
      </create_orientation>
      <do_if value="$dockquadrant != quadrant.front">
        <do_if value="$dockquadrant == quadrant.up">
          <set_value name="$readyrot" exact="rotation.[$readyrot.yaw, $readyrot.pitch - 90deg, $readyrot.roll]"/>
        </do_if>
        <do_elseif value="$dockquadrant == quadrant.down">
          <set_value name="$readyrot" exact="rotation.[$readyrot.yaw, $readyrot.pitch + 90deg, $readyrot.roll]"/>
        </do_elseif>
        <do_elseif value="$dockquadrant == quadrant.right">
          <set_value name="$readyrot" exact="rotation.[$readyrot.yaw - 90deg, $readyrot.pitch, $readyrot.roll]"/>
        </do_elseif>
        <do_elseif value="$dockquadrant == quadrant.left">
          <set_value name="$readyrot" exact="rotation.[$readyrot.yaw + 90deg, $readyrot.pitch, $readyrot.roll]"/>
        </do_elseif>
      </do_if>
      <debug_text text="'readyrot: %s'.[$readyrot]" chance="$debugchance"/>

      <debug_text text="'moving to ready position.'" chance="$debugchance"/>
      <move_to object="this.assignedcontrolled" destination="$target.zone" uselocalhighways="false" forcerotation="true" forceposition="true" finishonapproach="false" commandaction="true" travel="true">
        <position value="$readypos"/>
        <rotation value="$readyrot"/>
        <interrupt_after_time time="((this.assignedcontrolled.distanceto.[$target.zone, $readypos] * 2m) / [this.assignedcontrolled.maxspeed, 1m].max)s" comment="conservative estimate in case movement does not finish"/>
      </move_to>
      <debug_text text="'approach done.\ndistance to target: %sm\nexpected: %sm'.[$target.bboxdistanceto.{this.assignedcontrolled}, $expecteddistance]" chance="$debugchance"/>
      <do_if value="($target.bboxdistanceto.{this.assignedcontrolled} - $expecteddistance) gt 500m">
        <debug_text text="'target is too far away: %sm\nmight be moving?'.[$target.bboxdistanceto.{this.assignedcontrolled} - $expecteddistance]" chance="$debugchance"/>
        <do_if value="not $retried?">
          <debug_text text="'trying again.'" chance="$debugchance"/>
          <set_value name="$retried"/>
          <resume label="move"/>
        </do_if>
        <debug_text text="'aborting.'" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <label name="calltodock"/>

      <set_value name="$waitduration" exact="1s"/>
      <do_if value="$longwait?">
        <remove_value name="$longwait"/>
        <set_value name="$waitduration" exact="30s"/>
      </do_if>
      <wait exact="$waitduration"/>

      <do_if value="not $target.exists">
        <debug_text text="'target no longer exists. aborting.'" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="($target.assigneddock and $target.assigneddock.controllable != this.assignedcontrolled) or (@$target.order.id == 'DockAt' and $target.order.$destination != this.assignedcontrolled)">
        <debug_text text="'%s %s %s already docking elsewhere. Aborting.'.[@$target.idcode, @$target.knownname, $target]" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="not this.assignedcontrolled.people.free and $targetentity != player.entity">
        <do_if value="@this.assignedcontrolled.order.isrunning">
          <set_order_failed order="this.assignedcontrolled.order" text="{1045, 145}" comment="No space available for additional crew."/>
        </do_if>
        <debug_text text="'no space left for crew. aborting.'" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <debug_text text="'calling them in\ndistance to target: %sm'.[$target.bboxdistanceto.{this.assignedcontrolled}]" chance="$debugchance"/>
      <do_if value="$targetentity != player.entity">
        <signal_objects object="player.entity" 
                        param="'npc_usecase'" 
                        param2="table[ $name = '$Rescue_Come_Aboard', $actors = table[ $Rescuer = this, $Stranded = $targetentity] ]" 
                        chance="if @global.$SuppressCommChatter then 0 else 100" 
                        comment="Please follow directions to designated docking position."/>
        <do_if value="$target.order.id != 'DockAt'">
          <create_order name="$dockorder" id="'DockAt'" object="$target" immediate="true">
            <param name="destination" value="this.assignedcontrolled"/>
          </create_order>
        </do_if>
      </do_if>
      <do_else>
        <!-- signal player -->
        <request_docking grantedresult="$dockgranted" queuedresult="$dockqueued" ship="$target" container="this.assignedcontrolled" allowplayeronly="true"/>
        <do_if value="$dockgranted">
          <set_player_persistent_docking_request persistent="true"/>
          <signal_objects object="player.entity" 
                          param="'npc_usecase'" 
                          param2="table[ $name = '$Rescue_Come_Aboard', $actors = table[ $Rescuer = this, $Stranded = $targetentity] ]" 
                          comment="Please follow directions to designated docking position."/>
        </do_if>
        <do_else>
          <debug_text text="'docking request not granted'" chance="$debugchance"/>
          <remove_docking_request container="this.assignedcontrolled" ship="$target"/>
          <set_value name="$longwait"/>
          <resume label="calltodock"/>
        </do_else>
      </do_else>

      <set_value name="$waitduration" exact="[[($target.bboxdistanceto.{this.assignedcontrolled} / [$target.maxspeed, 1m].max)s, 1min].min, 10s].max"/>
      <do_if value="$targetentity == player.entity">
        <set_value name="$waitduration" exact="[$waitduration, 1h].max"/>
      </do_if>
      <do_if value="@$target.oxygentimeremaining">
        <set_value name="$waitduration" exact="[$waitduration, $target.oxygentimeremaining].min"/>
      </do_if>
      <debug_text text="'waitduration: %ss'.[$waitduration]" chance="$debugchance"/>
      <wait exact="$waitduration">
        <interrupt>
          <conditions>
            <check_any>
              <event_object_docked object="$target" comment="doesn't matter where $target docks"/>
              <event_object_destroyed object="$target"/>
              <check_all>
                <event_object_changed_zone object="$target"/>
                <check_value value="not this.assignedcontrolled.cansee.{$target}"/>
              </check_all>
              <event_object_docking_aborted object="$target"/>
            </check_any>
          </conditions>
          <actions>
            <do_if value="$targetentity == player.entity">
              <set_value name="this.$canplayerredirect"/>
              <remove_value name="player.entity.$rescuer"/>
            </do_if>
            <debug_text text="'event: %s, hascontext: %s, exists: %s'.[event.name, $target.hascontext.{this.assignedcontrolled}, $target.exists]" chance="$debugchance"/>
          </actions>
        </interrupt>
      </wait>

      <do_if value="$target.exists and not $target.hascontext.{this.assignedcontrolled} and $targetentity != player.entity">
        <!-- HACK. there's at least one case where spacesuits are unable to dock. -->
        <debug_text text="'Target %s %s %s not successfully docked and still exists. Attempting recovery.'.[@$target.idcode, @$target.knownname, $target]" chance="$debugchance"/>
        <do_if value="this.trueowner == $target.trueowner">
          <debug_text text="'%s %s transferring from %s %s %s to %s %s %s'.[$targetentity.knownname, $targetentity, @$target.idcode, @$target.knownname, $target, @this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
          <create_npc_template entity="$targetentity" object="this.assignedcontrolled" role="entityrole.unassigned" force="true"/>
        </do_if>
        <destroy_object object="$target" explosion="false"/>
        <resume label="finish"/>
      </do_if>
      <debug_text text="'Successfully rescued %s %s.'.[$targetentity.knownname, $targetentity]" chance="$debugchance"/>

      <apply_experience entity="this" experience="'ship_rescued_person'" factor="1.0"/>
      <apply_experience object="this.assignedcontrolled" role="entityrole.service" experience="'ship_rescued_person'" factor="1.0"/>
      <apply_experience object="this.assignedcontrolled" role="entityrole.marine" experience="'ship_rescued_person'" factor="1.0"/>

      <do_if value="$internalorder">
        <clear_recurring_order_failure object="this.assignedcontrolled" id="this.assignedcontrolled.order.id"/>
      </do_if>

      <label name="finish"/>

      <do_if value="$target.isoperational">
        <do_if value="$dockorder? and @$target.orders.indexof.{$dockorder}">
          <cancel_order order="$dockorder"/>
        </do_if>
        <do_if value="player.entity.hascontext.{$target} and @player.entity.$rescuer == this.assignedcontrolled">
          <remove_value name="player.entity.$rescuer"/>
        </do_if>
      </do_if>

    </actions>
  </attention>
  <on_abort>
    <do_if value="this.assignedcontrolled.isoperational">
      <stop_moving object="this.assignedcontrolled"/>
    </do_if>
    <do_if value="$target.isoperational">
      <do_if value="$dockorder? and @$target.orders.indexof.{$dockorder}">
        <cancel_order order="$dockorder"/>
      </do_if>
      <do_if value="player.entity.hascontext.{$target} and @player.entity.$rescuer == this.assignedcontrolled">
        <remove_value name="player.entity.$rescuer"/>
      </do_if>
    </do_if>
  </on_abort>
</aiscript>