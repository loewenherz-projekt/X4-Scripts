<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="order.build.deploy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="4">
  <!--

  Deploy CV to a Build Module of a station's Build Storage
  by Owen
  
  Send a Construction Vessel to a station, for it to deploy to the build module of the build storage

  -->
  <order id="DeployToStation" name="{1041, 511}" description="{1041, 512}" category="internal" allowinloop="false">
    <params>
      <param name="station" type="object" default="null" text="{1041, 10119}" comment="Station">
        <input_param name="class" value="[class.station]"/>
        <input_param name="owner" value="this.object.owner"/>
        <input_param name="hasbuildingmodule" value="true"/>
      </param>
      <!--TODO @Owen - Allow the player to unassign a CV so they can select a new one-->
      <!--TODO @Owen - Are we ok with these default times for the player hired CVs?-->
      <param name="waitduration" default="5min" type="internal" text="{1041, 10143}" comment="Wait duration. Time to wait for a new build after last working on one. After exceeding this time, it will disengage. (-1 == indefinite)" />
      <param name="abandonbuildtime" default="1h" type="internal" text="{1041, 10156}" comment="Abandon build time. Time after working on a build to abandon it due to it being stuck for another reason e.g. resources. (-1 == indefinite)" />
      <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
        <input_param name="truevalue" value="100"/>
      </param>
    </params>
    <requires primarypurpose="purpose.build"/>
    <location object="$station" condition="$station.exists" />
  </order>
  <interrupts>
    <handler>
      <conditions>
        <event_object_destroyed object="$station" check="false"/>
        <check_value value="this.assignedcontrolled.order.state != orderstate.finish"/>
      </conditions>
      <actions>
        <debug_text text="'station destroyed. disengaging.'" chance="$debugchance"/>
        <abort_called_scripts resume="disengage"/>
      </actions>
    </handler>
    <handler>
      <conditions>
        <check_any>
          <event_object_build_storage_moved object="$station" check="false"/>
          <event_object_signalled object="this" param="'patch_build_storage_moved'"/>
        </check_any>
        <check_value value="this.assignedcontrolled.order.state != orderstate.finish"/>
      </conditions>
      <actions>
        <do_if value="this.assignedcontrolled.isdeployedconstructionvessel">
          <do_if value="event.name == 'event_object_build_storage_moved'">
            <debug_text text="'Build storage was moved. Deployed construction vessel ' + this.assignedcontrolled + ' ' + this.assignedcontrolled.knownname + ' will be moved too'" chance="$debugchance"/>
          </do_if>
          <do_else>
            <debug_text text="'Build storage was moved. Deployed construction vessel ' + this.assignedcontrolled + ' ' + this.assignedcontrolled.knownname + ' will be moved too'" filter="savegame"/>
          </do_else>
          <abort_called_scripts resume="movetodestination"/>
        </do_if>
        <do_else>
          <do_if value="event.name == 'event_object_build_storage_moved'">
            <debug_text text="'Build storage was moved. Arriving construction vessel ' + this.assignedcontrolled + ' ' + this.assignedcontrolled.knownname + ' will adjust path'" chance="$debugchance"/>
          </do_if>
          <do_else>
            <debug_text text="'Build storage was moved. Arriving construction vessel ' + this.assignedcontrolled + ' ' + this.assignedcontrolled.knownname + ' will adjust path'" filter="savegame"/>
          </do_else>
          <abort_called_scripts resume="movetozone"/>
        </do_else>
      </actions>
    </handler>
    <handler ref="AttackHandler" />
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler" />
    <handler ref="InspectedHandler"/>
    <handler ref="FoundAbandonedHandler"/>
    <handler ref="FoundLockboxHandler"/>
    <handler ref="TargetInvalidHandler" />
    <handler ref="LostReservationHandler"/>
  </interrupts>
  <init>
    <set_value name="$starttime" exact="player.age"/>
  </init>
  <patch sinceversion="1">
    <do_if value="@this.assignedcontrolled.order.id == 'DeployToStation' and this.assignedcontrolled.order.state == orderstate.critical">
      <set_command command="command.buildstation"/>
      <set_command_action commandaction="commandaction.buildingto" param="$station"/>
    </do_if>
  </patch>
  <patch sinceversion="2">
    <do_if value="$buildstorage.exists">
      <get_building_position name="$patch_buildposition" object="this.assignedcontrolled" construction="$buildstorage" />
      <do_if value="$buildstorage.sector != this.sector or this.assignedcontrolled.distanceto.[$buildstorage.zone, $patch_buildposition] gt 5km">
        <signal_objects object="this" param="'patch_build_storage_moved'"/>
      </do_if>
      <remove_value name="$patch_buildposition"/>
    </do_if>
  </patch>
  <patch sinceversion="3">
    <do_if value="this.assignedcontrolled.order.state == orderstate.finish and this.assignedcontrolled.nextorder">
      <debug_text text="'Cancelling unparking of finished deploy order as another order is queued'" filter="savegame"/>
      <cancel_order order="this.assignedcontrolled.order"/>
    </do_if>
  </patch>
  <attention min="unknown">
    <actions>
      <label name="start" />

      <do_if value="not $station.exists">
        <debug_text text="'station does not exist'" chance="$debugchance"/>
        <disengage_construction_vessel object="this.ship"/>
        <set_value name="$returnvalue" exact="false"/>
        <resume label="finish"/>
      </do_if>

      <set_value name="$buildstorage" exact="$station.buildstorage"/>
      <do_if value="not $buildstorage">
        <debug_text text="'build storage does not exist'" chance="$debugchance"/>
        <disengage_construction_vessel object="this.ship"/>
        <set_value name="$returnvalue" exact="false"/>
        <resume label="finish"/>
      </do_if>

      <set_value name="$buildmodule" exact="$buildstorage.buildmodule"/>
      <do_if value="not $buildmodule">
        <debug_text text="'build module does not exist'" chance="$debugchance"/>
        <disengage_construction_vessel object="this.ship"/>
        <set_value name="$returnvalue" exact="false"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="$buildmodule.constructionvessel.exists">
        <do_if value="$buildmodule.constructionvessel == this.ship">
          <do_if value="$buildmodule.constructionvesseldeployed">
            <resume label="build"/>
          </do_if>
        </do_if>
        <do_else>
          <debug_text text="'buildmodule already has an assigned construction vessel ' + $buildmodule.constructionvessel.knownname + ' ' + $buildmodule.constructionvessel" chance="$debugchance"/>
          <disengage_construction_vessel object="this.ship"/>
          <set_value name="$returnvalue" exact="false"/>
          <resume label="finish"/>
        </do_else>
      </do_if>

      <label name="movetozone"/>

      <assign_construction_vessel object="this.ship" buildmodule="$buildmodule"/>

      <set_command command="command.movetozone" param="$station.zone" />

      <leave_formation object="this.ship"/>

      <debug_text text="'check if already in correct zone'" chance="$debugchance" />
      <do_if value="this.ship.zone != $station.zone">
        <debug_text text="'move to correct zone'" chance="$debugchance" />
        <run_script name="'move.generic'" result="$movesuccess">
          <param name="destination" value="$station.zone"/>
          <param name="endintargetzone" value="true" />
        </run_script>
        <do_if value="not $movesuccess">
          <debug_text text="'No path to destination. Aborting.'" chance="$debugchance"/>
          <do_if value="@this.assignedcontrolled.order.isrunning">
            <set_order_failed order="this.assignedcontrolled.order" text="{1045, 101}" comment="Unable to reach destination."/>
          </do_if>
          <set_value name="$returnvalue" exact="false"/>
          <resume label="finish"/>
        </do_if>
      </do_if>

      <label name="movetodestination" />

      <do_if value="not $station.exists">
        <debug_text text="'station no longer exists: ' + $station +  ' - aborting'" chance="$debugchance"/>
        <disengage_construction_vessel object="this.ship"/>
        <set_value name="$returnvalue" exact="false"/>
        <resume label="finish"/>
      </do_if>
      <get_building_position name="$buildposition" object="this.ship" construction="$buildstorage" />
      <set_value name="$buildstoragepos" exact="$buildstorage.position"/>
      <set_value name="$lookatpos" exact="position.[$buildstoragepos.x, $buildposition.y, $buildstoragepos.z]"/>

      <get_safe_pos result="$safepos" value="$buildposition" radius="this.ship.safesize" zone="$buildstorage.zone" ignored="this.ship"/>

      <create_orientation name="$buildrotation" orientation="look_at" refposition="$lookatpos" maxpitch="0deg">
        <position value="$safepos" />
      </create_orientation>
      <set_value name="$buildrotation" exact="rotation.[$buildrotation.yaw, 0, 0]"/>
      <do_if value="@$reservedspace.$zone">
        <cancel_space_reservation component="this.assignedcontrolled" index="$reservedspace.$index" zone="$reservedspace.$zone"/>
      </do_if>
      <do_else>
        <set_value name="$reservedspace" exact="table[ $duration = param.spacereservation.maxduration ]"/>
      </do_else>
      <reserve_space space="$buildstorage.zone" component="this.assignedcontrolled" duration="$reservedspace.$duration" index="$reservedspace.$index" safezone="$reservedspace.$zone">
        <position value="$safepos"/>
        <rotation value="$buildrotation"/>
      </reserve_space>
      <do_if value="this.ship.isdeployedconstructionvessel">
        <warp object="this.ship" zone="$buildstorage.zone">
          <position value="$safepos" />
          <rotation value="$buildrotation"/>
        </warp>
        <wait exact="1ms" sinceversion="2"/>
      </do_if>
      <do_else>
        <move_to object="this.ship" destination="$buildstorage.zone" forcerotation="true" abortpath="true" travel="true">
          <position value="$safepos" />
          <rotation value="$buildrotation"/>
        </move_to>
      </do_else>

      <do_if value="this.ship.distanceto.[$buildstorage.zone, $safepos]" min="1km" chance="$debugchance">
        <debug_text text="this.ship + ' ' + this.ship.knownname + ' is ' + this.ship.distanceto.[$buildstorage.zone, $safepos] + ' away from its destination. Should be closer [Owen]'" />
      </do_if>

      <!-- TODO: @Owen fix: setting this to critical if it is a default order is problematic since default orders are supposed to be potentially infinite. (Suggestion: move label "build" to a separate order and set that to critical?) -->
      <set_order_state order="this.object.order" state="orderstate.critical"/>

      <debug_text text="'Successfully reached station'" chance="$debugchance" />
      <do_if value="@$reservedspace.$zone">
        <cancel_space_reservation component="this.assignedcontrolled" index="$reservedspace.$index" zone="$reservedspace.$zone"/>
      </do_if>
      <deploy_construction_vessel object="this.ship" buildmodule="$buildmodule"/>
      <set_command command="command.buildstation"/>
      <set_command_action commandaction="commandaction.buildingto" param="$station"/>
      <!--<set_object_commander object="this.ship" commander="$station" assignment="assignment.build"/>-->

      <label name="build"/>

      <do_while value="true">
        <do_if value="not $lastworktime?">
          <set_value name="$lastworktime" exact="player.age"/>
        </do_if>

        <do_if value="not $buildmodule.requiresconstructionvessel">
          <do_if value="$waitduration ge 0 and player.age ge $waitduration + $lastworktime and not $buildmodule.mayrequireconstructionvessel">
            <!--Current or upcoming build does not require the construction vessel (including player owned ones) and the CV has waited long enough to disengage-->
            <debug_text text="'disengage due to $waitduration: ' + $waitduration" chance="$debugchance"/>
            <resume label="disengage"/>
          </do_if>
          <do_elseif value="this.hasrelation.enemy.{$station}">
            <debug_text text="'disengage due to relation'" chance="$debugchance"/>
            <resume label="disengage"/>
          </do_elseif>
          <do_else>
            <!--Wait for a build to start.-->
            <wait min="3min" max="4min">
              <interrupt>
                <conditions>
                  <check_any>
                    <event_build_started object="$buildmodule"/>
                    <check_all>
                      <event_faction_relation_changed faction="this.trueowner" otherfaction="$station.owner" />
                      <check_value value="this.hasrelation.enemy.{$station}"/>
                    </check_all>
                  </check_any>
                </conditions>
                <actions>
                  <do_if value="event.name == 'event_faction_relation_changed'">
                    <debug_text text="'disengage due to relation'" chance="$debugchance"/>
                    <resume label="disengage"/>
                  </do_if>
                </actions>
              </interrupt>
            </wait>

            <resume label="build"/>
          </do_else>
        </do_if>
        <do_else>
          <do_if value="$buildmodule.iswaitingforresources or $buildmodule.iswaitingforstorage">
            <!--Build is not currently progressing. The CV can leave after a certain amount of time of inactivity-->
            <do_if value="$abandonbuildtime ge 0 and player.age ge $abandonbuildtime + $lastworktime and not $buildmodule.isplayerowned">
              <!--Abandon the build-->
              <debug_text text="'disengage due to $abandonbuildtime: ' + $abandonbuildtime" chance="$debugchance"/>
              <resume label="disengage"/>
            </do_if>
            <do_elseif value="this.hasrelation.enemy.{$station}">
              <debug_text text="'disengage due to relation'" chance="$debugchance"/>
              <resume label="disengage"/>
            </do_elseif>
            <do_else>
              <!--Short interval checks. There shouldn't be too many CVs in this state in the universe and we don't really want to miss a build step-->
              <wait min="50s" max="55s">
                <interrupt>
                  <conditions>
                    <event_faction_relation_changed faction="this.trueowner" otherfaction="$station.owner" />
                    <check_value value="this.hasrelation.enemy.{$station}"/>
                  </conditions>
                  <actions>
                    <debug_text text="'disengage due to relation'" chance="$debugchance"/>
                    <resume label="disengage"/>
                  </actions>
                </interrupt>
              </wait>
            </do_else>
          </do_if>
          <do_else>
            <!--CV is working-->
            <set_value name="$optimalbuildduration" exact="$buildstorage.buildprocessor.totaltime"/>
            <set_value name="$lastworktime" exact="player.age"/>
            <wait exact="1min">
              <interrupt>
                <conditions>
                  <check_any>
                    <event_build_finished object="$buildmodule"/>
                    <event_build_cancelled object="$buildstorage"/>
                  </check_any>
                </conditions>
                <actions>
                  <!--TODO @Owen @Nick experience. It currently would base it on the time the script started to the end of the build which is very inacurrate.
                  Perhaps it should not scale on efficiency at all, just how long a build is expected to take. A less efficient CV would just get the same experience but slower.-->
                  <do_if value="event.name == 'event_build_finished'">
                    <set_value name="$buildduration" exact="player.age - $starttime"/>
                    <set_value name="$starttime" exact="player.age"/>
                    <set_value name="$buildefficiency" exact="[$optimalbuildduration / [$buildduration, 1s].max, 1.0].min"/>
                    <debug_text text="'build at %s %s %s finished. efficiency: %s, build duration: %s, optimal duration: %s'.[$station.idcode, $station.knownname, $station, $buildefficiency, $buildduration, $optimalbuildduration]" chance="$debugchance"/>

                    <apply_experience entity="this" experience="'ship_construct_station'" factor="$buildefficiency"/>
                    <apply_experience object="this.assignedcontrolled" role="entityrole.service" experience="'ship_construct_station'" factor="$buildefficiency"/>
                  </do_if>
                </actions>
              </interrupt>
            </wait>
          </do_else>
        </do_else>
      </do_while>

      <label name="disengage"/>

      <disengage_construction_vessel object="this.ship"/>
      <detach_from_masstraffic object="this.ship" wait="true" sinceversion="4">
        <interrupt_after_time time="5min" />
      </detach_from_masstraffic>

      <!--If another order is queued don't bother unparking-->
      <do_if value="not this.assignedcontrolled.nextorder">
        <set_order_state order="this.assignedcontrolled.order" state="orderstate.finish"/>

        <run_script name="'move.idle'" >
          <param name="Min" value="1min" />
          <param name="Max" value="3min" />
        </run_script>
      </do_if>

      <label name="finish"/>

      <do_if value="@$reservedspace.$zone">
        <cancel_space_reservation component="this.assignedcontrolled" index="$reservedspace.$index" zone="$reservedspace.$zone"/>
      </do_if>

      <do_if value="$returnvalue?">
        <return value="$returnvalue"/>
      </do_if>

    </actions>
  </attention>
  <on_abort>
    <debug_text text="'ON ABORT ' + this.ship + ' ' + this.ship.knownname + ' is aborting the deploy order. Disengaging from buildstorage.'" chance="$debugchance" />
    <do_if value="this.ship.isoperational">
      <do_if value="@$reservedspace.$zone">
        <cancel_space_reservation component="this.ship" index="$reservedspace.$index" zone="$reservedspace.$zone"/>
      </do_if>
    </do_if>
    <disengage_construction_vessel object="this.ship"/>
  </on_abort>
</aiscript>
