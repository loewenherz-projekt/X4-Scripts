<?xml version="1.0" encoding="utf-8" ?>
<aiscript name="fight.attack.object.bigtarget" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="21">
  <!--
  Fighter vs Capital/Station 
  Attack of a small ship (xs, s, m) against big object (l, xl, station).  
  The target can be a component or big object.
  Attack run:	
	1 - Select component (shields, turrets, ...)
	1 - Weapons in large shoot controller (shoot the entire object)
	2 - Fly with the big fight behaviour
	3 - Gain distance (after time)
		3.1 - Evade under attack (NPC skill)
	4 - Go to 1
	Will break the attack when:
	- target destroyed/docked/not enemy
	- far away from escort (if escort)
	- far away from this (if not pursuetargets)	
  -->
  <params>
    <param name="target" comment="Big target to attack. Must be station (or component) or capital ship (ship_l, ship_xl or component)" />
    <param name="escort" comment="Objects to escort - stay at 'pursuedistance' and shoot enemies attacking this" />
    <param name="pursuedistance" comment="Distance to pursue/escort (if pursuetargets true or 'escort' provided). Default: max radar range" />
    <param name="pursuetargets" comment="Pursue the target no matter what. Default: false" />
    <param name="allowothertargets" comment="Whether the script shall keep running when all primary targets have been destroyed. Default: true" />
    <param name="checkrelation" />
    <param name="disable" default="false" comment="Instructs this ship to only try to disable the target or targets without destroying it."/>
    <param name="disablehullpercentagethreshold" default="20" comment="If disable is set, this ship will stop firing if the hull of the target is at or below this percentage."/>
    <param name="maintaindistance" comment="If a carrier, use radar range instead of weapon range to determine range thresholds. Only used in capital ship combat movement script. Default: false"/>
    <param name="boardingbehavior" comment="If not null, the behavior assigned to this ship while boarding $target."/>
    <param name="behaviortargetclasses" comment="Target classes associated with boardingbehavior. disablehullpercentagethreshold will be ignored if current target is a behavior target. (Otherwise, we could have a situation where the hull threshold is reached but the boarding phase threshold has not been reached thus stalling the boarding operation.)"/>
    <param name="allowboost" default="true" comment="Allow use of boost while in combat."/>

    <param name="radius" default="null" comment="disengage if target goes beyond this distance relative to radiusanchorpos in radiusanchorspace"/>
    <param name="radiusanchorpos" default="null"/>
    <param name="radiusanchorspace" default="null"/>

    <param name="forceprimarytarget" default="false"/>
    <param name="enforceradius" default="this.isplayerowned" comment="Disengages hostile targets outside radius if a radius is defined."/>
    <param name="debugchance" default="0"/>
  </params>
  <interrupts>
    <handler ref="TargetInvalidHandler"/>
    <handler>
      <!-- MAINTENANCE: keep in sync with DisengageHandler in interrupt.disengage -->
      <conditions>
        <check_any>
          <event_object_changed_owner object="$bigtarget" check="false"/>
          <check_all>
            <check_any>
              <event_object_relation_range_changed object="$bigtarget" faction="this.owner" check="false"/>
              <event_object_relation_range_changed object="this.assignedcontrolled" faction="@$bigtarget.owner" check="false"/>
            </check_any>
            <check_value value="$bigtarget.exists and not this.assignedcontrolled.mayattack.{$bigtarget}"/>
          </check_all>
          <check_all>
            <event_object_changed_sector object="$bigtarget" check="false"/>
            <check_value value="event.param.exists"/>
            <check_value value="@$bigtarget.sector != this.sector"/>
            <check_value value="not $pursuetargets"/>
            <set_value name="$disengage_pursue"/>
          </check_all>
          <check_all>
            <event_object_changed_zone object="$bigtarget" check="false"/>
            <check_any>
              <check_all>
                <check_value value="@$bigtarget.zone.isclass.highway"/>
                <set_value name="$disengage_pursue"/>
              </check_all>
              <check_all>
                <check_value value="this.isplayerowned"/>
                <check_value value="@$radius and @$radiusanchorpos and @$radiusanchorspace"/>
                <check_value value="not $pursuetargets"/>
                <check_value value="$bigtarget.distanceto.[$radiusanchorspace, $radiusanchorpos] gt $radius"/>
                <debug_text text="'disengaging target outside of radius.\n target distance from anchor: %sm\n radius: %sm'.[$bigtarget.distanceto.[$radiusanchorspace, $radiusanchorpos], $radius]" debugchance="$debugchance"/>
              </check_all>
            </check_any>
          </check_all>
          <check_all>
            <!-- live view is the gravidar of all player-owned things, so this can only apply to player-owned ships and stations. -->
            <event_object_left_live_view object="$bigtarget" check="false"/>

            <check_value value="this.object.isplayerowned"/>
            <check_value value="not $pursuedistance or @this.object.distanceto.{$bigtarget} gt $pursuedistance"/>
          </check_all>
          <check_all>
            <event_object_attacked_object object="this.assignedcontrolled" attacked="$bigtarget"/>
            <check_value value="$bigtarget.isindestructible"/>
            <check_value value="not this.isplayerowned or @this.object.order.$internalorder" comment="do not disengage if explicitly ordered to attack this target"/>
            <debug_text text="'%s %s %s is indestructible. breaking off.'.[@$bigtarget.idcode, @$bigtarget.knownname, $bigtarget]" debugchance="$debugchance"/>
          </check_all>
          <event_object_docked object="$bigtarget" check="false"/>
        </check_any>
      </conditions>
      <actions>
        <do_if value="event.name == 'event_object_changed_owner' and @$bigtarget.exists">
          <reset_relation_boost object="this.assignedcontrolled" otherobject="$bigtarget"/>
          <do_if value="this.assignedcontrolled.mayattack.{$bigtarget}">
            <debug_text text="'target is still hostile after ownership change. continuing attack.'" chance="$debugchance"/>
            <return/>
          </do_if>
        </do_if>

        <do_if value="event.name == 'event_object_attacked_object' and @$bigtarget.isindestructible">
          <do_if value="this.isplayerowned">
            <set_value name="$rep" exact="player.entity"/>
          </do_if>
          <do_elseif value="this.trueowner.representative">
            <set_value name="$rep" exact="this.trueowner.representative"/>
          </do_elseif>
          <do_else>
            <set_value name="$rep" exact="this"/>
          </do_else>

          <do_if value="$rep.$indestructibleobjects?">
            <do_if value="not $rep.$indestructibleobjects.indexof.{$bigtarget}">
              <append_to_list name="$rep.$indestructibleobjects" exact="$bigtarget"/>
            </do_if>
          </do_if>
          <do_else>
            <set_value name="$rep.$indestructibleobjects" exact="[$bigtarget]"/>
          </do_else>
        </do_if>

        <debug_text text="'%7 disengaging.\nwhy? %6\ntarget: %1 (%2)\npursuetargets: %3\npursuedistance: %4\ndistance to target: %5\ntarget is in highway: %8'.[$bigtarget.knownname, $bigtarget, $pursuetargets, $pursuedistance, this.object.distanceto.{$bigtarget}, event.name, this.object.knownname, $bigtarget.zone.isclass.highway]" chance="$debugchance"/>

        <do_if value="$disengage_pursue?">
          <remove_value name="$disengage_pursue"/>
          <abort_called_scripts resume="fight"/>
        </do_if>
        <do_else>
          <!-- Remove the target to stop shooting at it when owner changes -->
          <set_value name="$bigtarget" exact="null"/>

          <abort_called_scripts resume="finish"/>
        </do_else>
      </actions>
    </handler>
    <handler>
      <conditions>
        <check_any>
          <event_object_activated_weapon object="this.assignedcontrolled"/>
          <event_object_deactivated_weapon object="this.assignedcontrolled"/>
        </check_any>
        <check_value value="not $disable and not this.ship.defencenpc"/>
      </conditions>
      <actions>
        <debug_text text="'weapon activated. updating shoot controller.'"/>
        <set_value name="$MaxGainDistance" exact="[this.assignedcontrolled.maxcombatrange.all * 1.5m, this.assignedcontrolled.maxradarrange].min"/>
        <set_value name="$MinGainDistance" exact="[this.assignedcontrolled.maxcombatrange.all, $MaxGainDistance / 2m].min"/>
        <abort_called_scripts resume="fight"/>
      </actions>
    </handler>
  </interrupts>
  <init>
    <!-- check for components in station/capital ship  -->
    <do_if value="$target.container.exists">
      <set_value name="$bigtarget" exact="$target.container"/>
      <set_value name="$iscapship" exact="@$bigtarget.iscapitalship"/>
    </do_if>
    <do_else>
      <!-- For stations, capital ships -->
      <set_value name="$bigtarget" exact="$target"/>
      <set_value name="$iscapship" exact="@$target.iscapitalship"/>
      <set_value name="$attackingbigtarget"/>
    </do_else>

    <do_if value="not $bigtarget.isclass.object">
      <debug_text text="'bigtarget %s %s %s %s is not an object. DisengageHandler will not work.'.[@$bigtarget.class, @$bigtarget.idcode, @$bigtarget.knownname, $bigtarget]" filter="error"/>
    </do_if>

    <set_value name="$missileweapons" exact="[]"/>
    <create_group groupname="$slowfiringweapongroup"/>
    <do_for_each name="$locweapon" in="this.assignedcontrolled.weapons.operational.list">
      <do_for_each name="$locammo" in="this.assignedcontrolled.ammostorage.missile.list">
        <do_if value="$locweapon.ammo.iscompatible.{$locammo} and not $missileweapons.indexof.{$locweapon}">
          <append_to_list name="$missileweapons" exact="$locweapon"/>
          <break/>
        </do_if>
      </do_for_each>
      <do_if value="not $locweapon.isclass.turret and not $locweapon.isbeam and not $locweapon.ammo.macro.isclass.missile">
        <do_if value="$locweapon.reloadtime gt 1s">
          <add_to_group groupname="$slowfiringweapongroup" object="$locweapon"/>
          <debug_text text="'slowfiringweapongroup: registering %s %s with reloadtime %s on %s %s %s'.[$locweapon.knownname, $locweapon, $locweapon.reloadtime, this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
        </do_if>
      </do_if>
    </do_for_each>

    <do_if value="not this.assignedcontrolled.dps.lasers.all and this.assignedcontrolled.dps.missiles.all">
      <set_value name="$needsammo"/>
    </do_if>
    <set_value name="$MaxGainDistance" exact="[this.assignedcontrolled.maxcombatrange.all * 1.5m, this.assignedcontrolled.maxradarrange].min"/>
    <set_value name="$MinGainDistance" exact="[this.assignedcontrolled.maxcombatrange.all, $MaxGainDistance / 2m].min"/>
  </init>
  <patch sinceversion="1">
    <do_if value="$target == $bigtarget">
      <set_value name="$attackingbigtarget"/>
    </do_if>
  </patch>
  <patch sinceversion="2">
    <do_if value="this.assignedcontrolled.attention ge attention.visible">
      <set_value name="$duration_movement" exact="[((this.assignedcontrolled.bboxdistanceto.{$target} + this.assignedcontrolled.size) / [this.assignedcontrolled.maxspeed, 1m].max)s, 40s].max"/>
      <debug_text text="'PATCH: duration of attack movement: %ss'.[$duration_movement]" filter="savegame"/>
    </do_if>
  </patch>
  <patch sinceversion="3">
    <do_if value="not @$radius">
      <set_value name="$radius" exact="null"/>
      <set_value name="$radiusanchorpos" exact="null"/>
      <set_value name="$radiusanchorspace" exact="null"/>
    </do_if>
  </patch>
  <patch sinceversion="5" early="true">
    <set_value name="$boost" exact="false"/>
  </patch>
  <patch sinceversion="6">
    <do_if value="not $allowboost?">
      <set_value name="$allowboost" exact="true"/>
    </do_if>
  </patch>
  <patch sinceversion="7">
    <do_if value="$result? and $bigtarget.canbeattacked and (this.attention lt attention.visible)">
      <get_attackstrength object="this.assignedcontrolled" target="$bigtarget" usedrones="false">
        <result hullshield="$result_hullshield" hullonly="$result_hullonly" shieldonly="$result_shieldonly" hullnoshield="$result_hullnoshield"/>
      </get_attackstrength>
      <remove_value name="$result"/>
    </do_if>
  </patch>
  <patch sinceversion="8">
    <!--removed for version 12-->
  </patch>
  <patch sinceversion="10">
    <set_value name="$MaxGainDistance" exact="this.ship.maxcombatrange.all"/>
    <set_value name="$MinGainDistance" exact="$MaxGainDistance * 0.5"/>
  </patch>
  <patch sinceversion="11">
    <set_value name="$MaxGainDistance" exact="[this.assignedcontrolled.maxcombatrange.all * 1.5m, this.assignedcontrolled.maxradarrange].min"/>
    <set_value name="$MinGainDistance" exact="[this.assignedcontrolled.maxcombatrange.all, $MaxGainDistance / 2m].min"/>
    <set_value name="$boost" exact="false"/>
  </patch>
  <patch sinceversion="13" early="true">
    <do_if value="$locpos? and (this.attention lt attention.visible)">
      <set_value name="$gain_dist_time" min="7s" max="10s"/>
    </do_if>
  </patch>
  <patch sinceversion="13">
    <do_if value="this.attention lt attention.visible">
      <set_value name="$guidedmissilelaunched" exact="false"/>
      <!--Set these two counters to different values so they don't match in the existing loops-->
      <set_value name="$attackcounter" exact="1"/>
      <set_value name="$attack_i" exact="2"/>
      <set_value name="$impactingammotable" exact="table[]"/>
    </do_if>
    <remove_value name="$table_ammousage"/>
  </patch>
  <patch sinceversion="14">
    <set_value name="$missileweapons" exact="[]"/>
    <do_for_each name="$locammo" in="this.assignedcontrolled.ammostorage.missile.list">
      <do_for_each name="$locweapon" in="this.assignedcontrolled.weapons.operational.list">
        <do_if value="$locweapon.ammo.iscompatible.{$locammo} and not $missileweapons.indexof.{$locweapon}">
          <append_to_list name="$missileweapons" exact="$locweapon"/>
        </do_if>
      </do_for_each>
    </do_for_each>
  </patch>
  <patch sinceversion="15">
    <do_if value="$bigtarget.canbeattacked and this.attention lt attention.visible">
      <set_value name="$duration_movement" exact="[((this.assignedcontrolled.bboxdistanceto.{$bigtarget} + this.assignedcontrolled.size) / [this.assignedcontrolled.maxspeed, 1m].max)s, 40s].max"/>
    </do_if>
  </patch>
  <patch sinceversion="16">
    <do_if value="$bigtarget.canbeattacked and this.attention ge attention.visible">
      <set_value name="$flightbehaviour" exact="flightbehaviour.bigfight"/>
      <do_if value="@$missiletarget">
        <!-- use chase if we have a missile target since we'll want to orient on $bigtarget -->
        <set_value name="$flightbehaviour" exact="flightbehaviour.chase"/>
      </do_if>
    </do_if>
  </patch>
  <patch sinceversion="17">
    <set_value name="$enforceradius" exact="this.isplayerowned"/>
  </patch>
  <patch sinceversion="18">
    <remove_value name="$ToleranceWeapon1"/>
  </patch>
  <patch sinceversion="19">
    <do_if value="this.assignedcontrolled.attention lt attention.visible">
      <set_value name="$shoottarget" exact="$bigtarget"/>
      <do_if value="$target.isoperational and $target.issurfaceelement">
        <set_value name="$surfaceelement" exact="$target"/>
        <set_value name="$shoottarget" exact="$target"/>
      </do_if>
    </do_if>
  </patch>
  <patch sinceversion="20" early="true">
    <set_value name="$missileweapons" exact="[]"/>
    <create_group groupname="$slowfiringweapongroup"/>
    <do_for_each name="$locweapon" in="this.assignedcontrolled.weapons.operational.list">
      <do_if value="not $locweapon.isclass.turret and not $locweapon.isbeam and not $locweapon.ammo.macro.isclass.missile">
        <do_if value="$locweapon.reloadtime gt 1s">
          <add_to_group groupname="$slowfiringweapongroup" object="$locweapon"/>
          <debug_text text="'PATCH: slowfiringweapongroup: registering %s %s with reloadtime %s on %s %s %s'.[$locweapon.knownname, $locweapon, $locweapon.reloadtime, this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" filter="savegame"/>
        </do_if>
      </do_if>
    </do_for_each>
  </patch>
  <patch sinceversion="21">
    <do_if value="$duration_movement? and $duration_movement gt 40s and this.attention lt attention.visible">
      <set_value name="$duration_movement" exact="40s"/>
    </do_if>
  </patch>
  <attention min="visible">
    <actions>
      <do_if value="not $target.canbeattacked">
        <debug_text text="'target cannot be attacked'" chance="$debugchance" />
        <resume label="finish" />
      </do_if>

      <label name="fight"/>

      <do_if value="@$bigtarget.zone.isclass.highway">
        <!-- DisengageHandler will land us here. -->
        <debug_text text="'target now in a highway. disengaging.'" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <do_if value="$missileweapons.count">
        <do_for_each name="$locweapon" in="$missileweapons">
          <do_if value="$locweapon.isclass.turret">
            <continue/>
          </do_if>
          <do_if value="not $locweapon.ammo.macro.isguided">
            <set_value name="$firesdumbfiremissiles"/>
            <break/>
          </do_if>
        </do_for_each>
      </do_if>

      <!-- Set the shoot target, depending on a component of a station or a entire capship -->
      <set_value name="$ToleranceWeapon2" exact="60deg"/>
      <do_if value="$iscapship">
        <!-- Tolerances depending on: l,xl ships, stations, station components-->
        <do_if value="$firesdumbfiremissiles?">
          <set_value name="$ToleranceWeapon2" exact="4deg"/>
        </do_if>
        <set_value name="$MinGainDistance" exact="this.ship.maxcombatrange.all * 0.75" />
      </do_if>
      <do_else>
        <!-- Tolerances depending on: l,xl ships, stations, station components-->
        <do_if value="$firesdumbfiremissiles?">
          <set_value name="$ToleranceWeapon2" exact="8deg"/>
        </do_if>
        <set_value name="$MinGainDistance" exact="this.ship.maxcombatrange.all" />
      </do_else>
      <remove_value name="$firesdumbfiremissiles"/>

      <!-- if we want to disable the target we will need tighter control of whether we shoot or not so that will have to be set within the do_while below. -->
      <do_if value="not $disable and not this.ship.defencenpc">
        <!-- Fire -->
        <shoot_at object="this.ship" target="$bigtarget" largetarget="true" fixedtarget="true"/>
      </do_if>

      <!-- BEGIN FIGHT MOVEMENT -->
      <!-- 
            1. fly towards the target
            2. this script is meant for fighters, so don't do any drastic speed changes
            3. if we get too close, veer off, preferably in the direction we're going to minimize turns
            4. repeat
        -->

      <debug_text text="'start fight (select shooting): ' + $target.knownname" chance="$debugchance"/>

      <set_value name="$doevade" exact="false" />

      <do_while value="$target.canbeattacked">

        <do_if value="($checkrelation and not this.mayattack.{$bigtarget}) or @$bigtarget.dock">
          <debug_text text="this.ship.name + ' is not killable enemy to ' + $bigtarget.knownname" chance="$debugchance"/>
          <resume label="finish"/>
        </do_if>

        <do_if value="$disable and not this.ship.defencenpc">
          <do_if value="(@$behaviortargetclasses.count and $target.isclass.{$behaviortargetclasses}) or ( $bigtarget.hull gt this.ship.dps.lasers.all and ($bigtarget.hullpercentage + $bigtarget.shieldpercentage) gt $disablehullpercentagethreshold )">
            <!-- Fire. If shooting to disable, only shoot at the target. should be some subcomponent. -->
            <shoot_at object="this.ship" target="$target" fixedtarget="true"/>
            <debug_text text="'disabletarget hull level above threshold. continuing attack.\n target hull percentage: %s\n threshold: %s\n behavior target? %s'.[$bigtarget.hullpercentage, $disablehullpercentagethreshold, not @$behaviortargetclasses.count or $target.isclass.{$behaviortargetclasses}]" chance="$debugchance"/>
          </do_if>
          <do_else>
            <stop_shooting object="this.ship"/>
            <debug_text text="'disabletarget hull level below threshold. holding fire.'" chance="$debugchance"/>
          </do_else>
        </do_if>

        <do_if value="$needsammo?">
          <do_if value="this.assignedcontrolled.ammostorage.missile.count">
            <do_for_each name="$locammo" in="this.assignedcontrolled.ammostorage.missile.list">
              <do_for_each name="$locweapon" in="this.assignedcontrolled.weapons.operational.list">
                <do_if value="$locweapon.ammo.iscompatible.{$locammo}">
                  <set_value name="$hasammo"/>
                  <break/>
                </do_if>
              </do_for_each>
              <do_if value="$hasammo?">
                <break/>
              </do_if>
              <do_for_each name="$locturret" in="this.assignedcontrolled.turrets.operational.list">
                <do_if value="$locturret.ammo.iscompatible.{$locammo}">
                  <set_value name="$hasammo"/>
                  <break/>
                </do_if>
              </do_for_each>
              <do_if value="$hasammo?">
                <break/>
              </do_if>
            </do_for_each>
          </do_if>

          <do_if value="not $hasammo? and @this.trueowner.doesresupply">
            <do_if value="not @this.$resupplier.isoperational and not @$localresupplier.isoperational and this.sector">
              <find_ship name="$localresupplier" cansupplyclass="this.assignedcontrolled.class" owner="this.owner" space="this.sector"/>
            </do_if>
            <do_if value="not this.isplayerowned or @this.$resupplier.isoperational or @$localresupplier.isoperational">
              <debug_text text="'%s %s %s out of ammo. moving to drydock for supplies.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
              <set_value name="$resupplier" exact="null"/>
              <do_if value="@this.$resupplier.isoperational">
                <set_value name="$resupplier" exact="this.$resupplier"/>
              </do_if>
              <do_elseif value="@$localresupplier.isoperational">
                <set_value name="$resupplier" exact="$localresupplier"/>
              </do_elseif>
              <create_order id="'Resupply'" object="this.assignedcontrolled" immediate="true">
                <param name="param_station" value="$resupplier"/>
                <param name="internalorder" value="true"/>
                <param name="debugchance" value="$debugchance"/>
              </create_order>
              <!-- cancel the attack order so we don't keep trying to attack in case resupply fails -->
              <do_if value="this.assignedcontrolled.nextorder and (this.assignedcontrolled.nextorder.id != 'Board')">
                <!-- if we are out of ammo, cannot attack, and are boarding, do not cancel the board order. situation is handled when that script initializes. -->
                <cancel_order order="this.assignedcontrolled.nextorder"/>
              </do_if>
            </do_if>
            <do_else>
              <debug_text text="'player-owned ship %s %s %s out of ammo. sending notification and stopping attack.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
              <do_if value="notification.npc_out_of_ammo.active">
                <!-- INTERACTION: out of ammo. cannot attack. -->
                <run_script name="'player.interaction'" result="$locresponse">
                  <param name="Line" value="5028" comment="Requesting instructions."/>
                  <param name="UIText" value="{1015, 35}.[this.ship.idcode, this.ship.name]" comment="Requesting Orders"/>
                  <param name="ConversationParam" value="'g_playerownedship_attacking_outofammo'"/>
                  <param name="MaxQueueDelay" value="10s"/>
                  <param name="caption" value="{1015, 43} + ' - ' + {1016,6}.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]" comment="Out of ammo"/>
                  <param name="debugchance" value="$debugchance"/>
                </run_script>
              </do_if>
              <do_if value="@$locresponse != 'getammo' and this.assignedcontrolled.order">
                <write_to_logbook category="general" title="{1015, 43}" text="{1016, 95}.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]" interaction="showonmap" object="this.assignedcontrolled"/>
                <do_if value="this.assignedcontrolled.order.id != 'Board'">
                  <!-- if we are out of ammo, cannot attack, and are boarding, do not cancel the board order. situation is handled when that script initializes. -->
                  <cancel_order order="this.assignedcontrolled.order"/>
                </do_if>
              </do_if>
            </do_else>
            <do_if value="@$locresponse != 'getammo'">
              <create_order id="'Flee'" object="this.assignedcontrolled" immediate="true">
                <param name="method" value="'boost'"/>
                <param name="attacker" value="$bigtarget"/>
                <param name="donotdrop" value="true"/>
                <param name="deploydistraction" value="true"/>
                <param name="log" value="false"/>
                <param name="debugchance" value="$debugchance"/>
              </create_order>
            </do_if>
            <remove_value name="$locresponse"/>
          </do_if>
          <remove_value name="$hasammo"/>
        </do_if>

        <do_if value="$escort.exists">
          <set_value name="$refobject" exact="$escort"/>
        </do_if>
        <do_else>
          <set_value name="$refobject" exact="this.ship"/>
        </do_else>

        <!-- If the target is in a different sector, or is farther than pursuedistance (should normally be radar range), -->
        <do_if value="this.sector != $bigtarget.sector or (not $pursuetargets and ((not $escort and $radius) or $refobject.bboxdistanceto.{$bigtarget} gt $pursuedistance) and (not $radius or not $radiusanchorspace.exists or $bigtarget.distanceto.[$radiusanchorspace, $radiusanchorpos] gt $radius))">
          <!-- break off attack. implementation of pursuetargets moved to order.fight.attack.object. -->
          <debug_text text="'target is either not in the same sector or not within 10 minutes travel time and i am not authorized to pursue. breaking off attack.\n  my sector: %s\n target sector: %s\n distance to target: %s\n max distance in 10 minutes: %s\n pursue distance: %s'.[$refobject.sector, $bigtarget.sector, $refobject.distanceto.{$bigtarget}, this.ship.maxspeed*600, $pursuedistance]" chance="$debugchance"/>
          <resume label="finish"/>
        </do_if>

        <!-- this assumes that if a ship has stances that prohibit firing, its default stance always allows firing. -->
        <do_if value="this.assignedcontrolled.stances.list.count and (this.assignedcontrolled.stances.active != this.assignedcontrolled.stances.default)">
          <do_if value="this.assignedcontrolled.stances.canswitch">
            <activate_default_ship_stance ship="this.assignedcontrolled"/>
          </do_if>
          <do_else>
            <set_value name="$skipattackrun"/>
          </do_else>
        </do_if>

        <do_if value="not $skipattackrun?">
          <!-- check if the component in in view -->
          <do_if value="$missileweapons.count">
            <set_value name="$missiletarget" exact="$bigtarget"/>
            <do_if value="$target.isclass.module and $target.hascontext.{$bigtarget}">
              <set_value name="$missiletarget" exact="$target"/>
            </do_if>
            <do_elseif value="$target.parent.isclass.{class.destructible} and $target.parent.hascontext.{$bigtarget}">
              <set_value name="$missiletarget" exact="$target.parent"/>
            </do_elseif>

            <do_if value="not this.assignedcontrolled.defencenpc">
              <do_if value="not $disable or ($bigtarget.hull gt this.ship.dps.missiles.all and $bigtarget.hullpercentage gt $disablehullpercentagethreshold)">
                <stop_shooting object="this.assignedcontrolled" missiles="true"/>
                <do_if value="$disable">
                  <shoot_at object="this.assignedcontrolled" target="$missiletarget" missiles="true" tolerance="$ToleranceWeapon2" fixedtarget="true"/>
                </do_if>
                <do_else>
                  <debug_text text="'firing missiles at %s %s %s'.[$missiletarget.class, $missiletarget.knownname, $missiletarget.macro]" chance="$debugchance"/>
                  <shoot_at object="this.assignedcontrolled" target="$missiletarget" largetarget="true" missiles="true" tolerance="$ToleranceWeapon2" fixedtarget="true"/>
                </do_else>
              </do_if>
            </do_if>
          </do_if>

          <set_value name="$time_startedattackrun" exact="player.age" chance="$debugchance"/>

          <!-- this is simply to prevent prematurely stopping the attack run if we start while we are very far from the target. -->
          <set_value name="$duration_movement" exact="[((this.assignedcontrolled.bboxdistanceto.{$bigtarget} + this.assignedcontrolled.size) / [this.assignedcontrolled.maxspeed, 1m].max)s, 40s].max"/>
          <debug_text text="'starting attack run. ETA: %ss. distance to target: %sm, maximum normal speed: %s'.[$duration_movement, this.assignedcontrolled.bboxdistanceto.{$bigtarget}, this.assignedcontrolled.maxspeed]" chance="$debugchance"/>

          <!-- do a Big Target attack run -->
          <set_value name="$flightbehaviour" exact="flightbehaviour.bigfight"/>
          <do_if value="@$missiletarget or $slowfiringweapongroup.count or $duration_movement gt 40s">
            <!-- use chase if we have a missile target since we'll want to orient on $bigtarget -->
            <set_value name="$flightbehaviour" exact="flightbehaviour.chase"/>
          </do_if>
          <debug_text text="'start Big Target attack run to: ' + $bigtarget.knownname + ' component: ' + $target.knownname + ' - Distance=' + this.ship.distanceto.{$bigtarget} + ' .Behaviour: ' + $flightbehaviour" chance="$debugchance" />
          <include_interrupt_actions ref="NPCUseCase_AttackRun_Small" />
          <!-- Note: the 'bigfight' behaviour takes the component (surface element) if there is one, and finds the best angle to attack it
            for regular containers (ship/station) keeps attacking normally. So $target could be: shield, turret, engine, ship, station -->
          <!-- flightbehavior stops the movement before we get too close. -->
          <move_to object="this.ship" destination="$target" flightbehaviour="$flightbehaviour" forcesteering="true" travel="($duration_movement gt 40s) or @$bigtarget.travel.active">
            <!-- interrupt_after_time is only to allow the script to recover in case the move_to action does not terminate. added allowance for manoeuvering since ship first goes to a position that'll give it a good firing angle on the target before approaching. -->
            <interrupt_after_time time="$duration_movement * 2s"/>
            <interrupt>
              <conditions>
                <check_any>
                  <event_object_destroyed object="$target" />
                  <event_object_launched_missile object="this.ship" />
                  <event_weapon_fired group="$slowfiringweapongroup"/>
                  <check_all>
                    <event_object_attacked object="$target"/>
                    <check_value value="$disable"/>
                    <check_value value="$target == $bigtarget"/>
                    <check_value value="($target.shieldpercentage + $target.hullpercentage) lt $disablehullpercentagethreshold"/>
                    <debug_text text="'disable target: %s %s %s under hull threshold.\ncurrent hull percentage: %s\nthreshold: %s.\nbreaking off.'.[@$target.idcode, @$target.knownname, $target, $target.hullpercentage, $disablehullpercentagethreshold]" debugchance="$debugchance"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <debug_text text="'attack run interrupted by %s.\ndistance to target: %sm\ncurrent speed: %sm/s'.[event.name, $bigtarget.bboxdistanceto.{this.assignedcontrolled}, this.assignedcontrolled.speed]" chance="$debugchance"/>
              </actions>
            </interrupt>
          </move_to>
          <remove_value name="$flightbehaviour"/>
          <remove_value name="$duration_movement"/>
        </do_if>
        <remove_value name="$skipattackrun"/>

        <!-- try to gain distance for a new attack run -->
        <set_value name="$gaindistancetimeout" exact="player.age + 30s" />

        <debug_text text="'attack run done after %s seconds. moving away for another attack run.'.[player.age - $time_startedattackrun]" chance="$debugchance"/>

        <do_while value="$target.exists and ($gaindistancetimeout gt player.age) and ((this.assignedcontrolled.bboxdistanceto.{$bigtarget} lt $MaxGainDistance) or (not $readytofire? and ($missileweapons.count or $slowfiringweapongroup.count or this.assignedcontrolled.stances.list.count)))">

          <set_value name="$time_gaindistance" min="[10s * this.assignedcontrolled.combinedskill / 100, 1s].max" max="[30s * this.assignedcontrolled.combinedskill / 100, 3s].max"/>
          <set_value name="$boost" exact="false"/>
          <do_if value="$allowboost and not $boosted? and (this.assignedcontrolled.combinedskill ge 30 or this.race == race.terran) and (this.assignedcontrolled.boost.remainingfraction gt 0.5)" chance="if (this.race == race.terran) then 100 else this.assignedcontrolled.combinedskill">
            <set_value name="$boost"/>
            <set_value name="$boosted"/>
            <set_value name="$time_gaindistance" exact="[this.assignedcontrolled.boost.remainingduration / 2s, ($MaxGainDistance / [this.assignedcontrolled.boost.maxspeed, 1].max)s].min"/>
            <debug_text text="'using boost. combinedskill: %s\nboost duration: %ss\n 1: %ss\n 2: %ss\nduration before empty: %ss\nmax boost duration: %ss'.[this.assignedcontrolled.combinedskill, $time_gaindistance, this.assignedcontrolled.boost.remainingduration / 2s, ($MaxGainDistance / [this.assignedcontrolled.boost.maxspeed, 1].max)s, this.assignedcontrolled.boost.remainingduration, this.assignedcontrolled.boost.maxduration]" chance="$debugchance"/>
            <debug_text text="'old boost duration: %ss'.[(this.assignedcontrolled.boost.maxduration * (this.assignedcontrolled.shieldpercentage / 100.0) * 0.5)s]" chance="0"/>
          </do_if>

          <do_if value="not $readytofire? and ($missileweapons.count or $slowfiringweapongroup.count)">
            <do_for_each name="$locweapon" in="$missileweapons">
              <do_if value="$locweapon.isreadytofire">
                <debug_text text="'ready to fire'" chance="$debugchance"/>
                <set_value name="$readytofire"/>
                <break/>
              </do_if>
              <do_elseif value="not $locweapon.ammo.macro">
                <do_if value="$needsammo?">
                  <debug_text text="'out of ammo'" chance="$debugchance"/>
                  <!-- do not break. we might have a different weapon that is able to fire. -->
                  <set_value name="$outofammo"/>
                </do_if>
                <do_else>
                  <remove_from_list name="$missileweapons" exact="$locweapon"/>
                </do_else>
              </do_elseif>
            </do_for_each>
            <do_if value="not $readytofire?">
              <do_for_each name="$locweapon" in="$slowfiringweapongroup">
                <do_if value="$locweapon.isreadytofire">
                  <debug_text text="'ready to fire'" chance="$debugchance"/>
                  <set_value name="$readytofire"/>
                  <break/>
                </do_if>
              </do_for_each>
            </do_if>
            <do_if value="$readytofire? and this.assignedcontrolled.stances.list.count and not this.assignedcontrolled.stances.canswitch">
              <remove_value name="$readytofire"/>
            </do_if>
            <do_if value="$readytofire? and $missileweapons.count and not this.assignedcontrolled.defencenpc">
              <!-- Stop shooting missiles to avoid self-hits -->
              <!-- moved here from just before the while so we can first check if we're ready to fire. isreadytofire will always return false if stop_shooting is called. -->
              <debug_text text="'ceasing missile fire'" chance="$debugchance"/>
              <stop_shooting object="this.assignedcontrolled" missiles="true"/>
            </do_if>
          </do_if>

          <move_to object="this.assignedcontrolled" destination="$target" flightbehaviour="flightbehaviour.gaindistance" forcesteering="true" boost="$boost">
            <interrupt_after_time time="$time_gaindistance" />
            <interrupt>
              <conditions>
                <event_object_attacked object="this.assignedcontrolled" />
                <check_value value="event.param" exact="this.assignedcontrolled" negate="true" />
                <check_value value="this.assignedcontrolled.type != shiptype.frigate"/>
                <!-- we absolutely have to get away from the target. set doevade if necessary, but do not interrupt the movement. -->
                <set_value name="$doevade" exact="true"/>
                <check_value value="false"/>
              </conditions>
            </interrupt>
          </move_to>
          <debug_text text="'gaindist movement done.\nremaining boost percentage: %s\ndist: %sm\nmax: %sm'.[this.assignedcontrolled.boost.remainingfraction, this.assignedcontrolled.distanceto.{$target}, $MaxGainDistance]" chance="$boost * $debugchance"/>

          <do_if value="$target.canbeattacked">
            <do_if value="$doevade">
              <break />
            </do_if>
            <do_if value="$bigtarget.bboxdistanceto.{this.assignedcontrolled} gt $MinGainDistance and ($readytofire? or $slowfiringweapongroup.count or not $missileweapons.count or $outofammo?)">
              <debug_text text="'component distance=' + this.ship.distanceto.{$target}" chance="$debugchance" />
              <break />
            </do_if>
          </do_if>
          <do_else>
            <break />
          </do_else>

        </do_while>
        <do_if value="$boosted?">
          <debug_text text="'%s %s %s shield percentage after boost: %s'.[@this.assignedcontrolled.idcode, @this.assignedcontrolled.knownname, this.assignedcontrolled, this.assignedcontrolled.shieldpercentage]" chance="0"/>
        </do_if>
        <remove_value name="$outofammo"/>
        <remove_value name="$readytofire"/>
        <remove_value name="$boosted"/>

        <!-- evasive maneuver -->
        <do_if value="$doevade">
          <!-- this assumes that the first stance is good for evasion. may not be a safe assumption moving forward. -->
          <do_if value="this.assignedcontrolled.stances.canswitch">
            <set_value name="$stances" exact="this.assignedcontrolled.stances.list"/>
            <do_if value="$stances.count and (this.assignedcontrolled.stances.active != $stances.{1})">
              <activate_ship_stance ship="this.assignedcontrolled" stance="$stances.{1}"/>
            </do_if>
            <remove_value name="$stances"/>
          </do_if>
          <set_value name="$doevade" exact="false"/>
          <run_script name="'move.evade'">
            <param name="allowboost" value="$allowboost"/>
            <param name="debugchance" value="$debugchance"/>
          </run_script>
        </do_if>

        <wait min="100ms" max="300ms" />

      </do_while>

      <do_if value="$attackingbigtarget? and $bigtarget.canbeattacked and (not $disable or $bigtarget.hullpercentage lt $disablehullpercentage)">
        <!-- bigtarget is still operational. acquire a new subsystem and keep attacking -->
        <!-- NB: query every time we get to this point because stuff being wrecked is temporary. -->
        <do_if value="not @$behaviortargetclasses.count">
          <find_object_component name="$target" object="$bigtarget" checkoperational="true" integrated="false" indestructible="false" invulnerable="false">
            <match_any>
              <match surfaceelement="true"/>
              <match module="$bigtarget.ismodular or @$bigtarget.canhaveattackablemodules"/>
            </match_any>
          </find_object_component>
        </do_if>
        <do_else>
          <find_object_component name="$target" object="$bigtarget" checkoperational="true" class="$behaviortargetclasses" integrated="false" indestructible="false" invulnerable="false">
            <match_any>
              <match surfaceelement="true"/>
              <match module="$bigtarget.ismodular or @$bigtarget.canhaveattackablemodules"/>
            </match_any>
          </find_object_component>
        </do_else>
        <do_if value="$target.canbeattacked">
          <debug_text text="'%s %s %s attacking %s %s %s . acquired new subtarget: %s %s. valid? %s. continuing fight.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $bigtarget.idcode, $bigtarget.knownname, $bigtarget, $target.knownname, $target, not @$behaviortargetclasses.count or $target.isclass.{$behaviortargetclasses}]" chance="$debugchance"/>
          <resume label="fight"/>
        </do_if>
        <do_else>
          <debug_text text="'%s %s %s attacking %s %s %s. no more valid subtargets. back to order.fight.attack.object.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $bigtarget.idcode, $bigtarget.knownname, $bigtarget]" chance="$debugchance"/>
        </do_else>
      </do_if>

      <!-- END FIGHT MOVEMENT -->

      <label name="finish" />

      <reset_flight_behaviour object="this.ship"/>
      <stop_moving object="this.ship" />
      <do_if value="not this.ship.defencenpc">
        <cease_fire object="this.object" />
        <set_alert_level object="this.ship" level="green" />
      </do_if>
      <wait exact="100ms" />

    </actions>
  </attention>
  <attention min="unknown">
    <actions>
      <!-- OOZ -->
      <label name="fight"/>

      <do_if value="@$bigtarget.zone.isclass.highway">
        <!-- DisengageHandler will land us here. -->
        <debug_text text="'target now in a highway. disengaging.'" chance="$debugchance"/>
        <resume label="finish"/>
      </do_if>

      <!-- Simulate the attack -->
      <set_command_action commandaction="commandaction.attacking" />

      <debug_text text="player.age + ' block 1. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>

      <set_value name="$isdead" exact="false" />
      <set_value name="$attacktime" exact="player.age + 10min" />
      <set_value name="$MaxGainDistance" exact="[this.assignedcontrolled.maxcombatrange.all * 1.5m, this.assignedcontrolled.maxradarrange].min"/>
      <set_value name="$MinGainDistance" exact="[this.assignedcontrolled.maxcombatrange.all, $MaxGainDistance / 2m].min"/>

      <!-- repeat until target is dead (or we are) -->
      <do_while value="$bigtarget.canbeattacked and not $isdead" >

        <do_if value="($checkrelation and not this.mayattack.{$bigtarget}) or @$bigtarget.dock">
          <debug_text text="this.ship.name + ' is not killable enemy to ' + $bigtarget.knownname" chance="$debugchance"/>
          <resume label="finish"/>
        </do_if>

        <do_if value="$needsammo?">
          <do_if value="this.assignedcontrolled.ammostorage.missile.count">
            <do_for_each name="$locammo" in="this.assignedcontrolled.ammostorage.missile.list">
              <do_for_each name="$locweapon" in="this.assignedcontrolled.weapons.operational.list">
                <do_if value="$locweapon.ammo.iscompatible.{$locammo}">
                  <set_value name="$hasammo"/>
                  <break/>
                </do_if>
              </do_for_each>
              <do_if value="$hasammo?">
                <break/>
              </do_if>
              <do_for_each name="$locturret" in="this.assignedcontrolled.turrets.operational.list">
                <do_if value="$locturret.ammo.iscompatible.{$locammo}">
                  <set_value name="$hasammo"/>
                  <break/>
                </do_if>
              </do_for_each>
              <do_if value="$hasammo?">
                <break/>
              </do_if>
            </do_for_each>
          </do_if>

          <do_if value="not $hasammo? and @this.trueowner.doesresupply">
            <do_if value="not @this.$resupplier.isoperational and not @$localresupplier.isoperational and this.sector">
              <find_ship name="$localresupplier" cansupplyclass="this.assignedcontrolled.class" owner="this.owner" space="this.sector"/>
            </do_if>
            <do_if value="not this.isplayerowned or @this.$resupplier.isoperational or @$localresupplier.isoperational">
              <debug_text text="'%s %s %s out of ammo. moving to drydock for supplies.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
              <set_value name="$resupplier" exact="null"/>
              <do_if value="@this.$resupplier.isoperational">
                <set_value name="$resupplier" exact="this.$resupplier"/>
              </do_if>
              <do_elseif value="@$localresupplier.isoperational">
                <set_value name="$resupplier" exact="$localresupplier"/>
              </do_elseif>
              <create_order id="'Resupply'" object="this.assignedcontrolled" immediate="true">
                <param name="param_station" value="$resupplier"/>
                <param name="internalorder" value="true"/>
                <param name="debugchance" value="$debugchance"/>
              </create_order>
              <!-- cancel the attack order so we don't keep trying to attack in case resupply fails -->
              <do_if value="this.assignedcontrolled.nextorder and (this.assignedcontrolled.nextorder.id != 'Board')">
                <!-- if we are out of ammo, cannot attack, and are boarding, do not cancel the board order. situation is handled when that script initializes. -->
                <cancel_order order="this.assignedcontrolled.nextorder"/>
              </do_if>
            </do_if>
            <do_else>
              <debug_text text="'player-owned ship %s %s %s out of ammo. sending notification and stopping attack.'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled]" chance="$debugchance"/>
              <do_if value="notification.npc_out_of_ammo.active">
                <!-- INTERACTION: out of ammo. cannot attack. -->
                <run_script name="'player.interaction'" result="$locresponse">
                  <param name="Line" value="5028" comment="Requesting instructions."/>
                  <param name="UIText" value="{1015, 35}.[this.ship.idcode, this.ship.name]" comment="Requesting Orders"/>
                  <param name="ConversationParam" value="'g_playerownedship_attacking_outofammo'"/>
                  <param name="MaxQueueDelay" value="10s"/>
                  <param name="caption" value="{1015, 43} + ' - ' + {1016,6}.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]" comment="Out of ammo"/>
                  <param name="debugchance" value="$debugchance"/>
                </run_script>
              </do_if>
              <do_if value="@$locresponse != 'getammo' and this.assignedcontrolled.order">
                <write_to_logbook category="general" title="{1015, 43}" text="{1016, 95}.[this.assignedcontrolled.knownname, this.assignedcontrolled.idcode]" interaction="showonmap" object="this.assignedcontrolled"/>
                <do_if value="this.assignedcontrolled.order.id != 'Board'">
                  <!-- if we are out of ammo, cannot attack, and are boarding, do not cancel the board order. situation is handled when that script initializes. -->
                  <cancel_order order="this.assignedcontrolled.order"/>
                </do_if>
              </do_if>
            </do_else>
            <do_if value="@$locresponse != 'getammo'">
              <create_order id="'Flee'" object="this.assignedcontrolled" immediate="true">
                <param name="method" value="'boost'"/>
                <param name="attacker" value="$bigtarget"/>
                <param name="donotdrop" value="true"/>
                <param name="deploydistraction" value="true"/>
                <param name="log" value="false"/>
                <param name="debugchance" value="$debugchance"/>
              </create_order>
            </do_if>
            <remove_value name="$locresponse"/>
          </do_if>
          <remove_value name="$hasammo"/>
        </do_if>

        <do_if value="$escort.exists">
          <set_value name="$refobject" exact="$escort"/>
        </do_if>
        <do_else>
          <set_value name="$refobject" exact="this.ship"/>
        </do_else>

        <!-- If the target is in a different sector, or is farther than pursuedistance (should normally be radar range), -->
        <do_if value="this.sector != $bigtarget.sector or (not $pursuetargets and ((not $escort and $radius) or $refobject.bboxdistanceto.{$bigtarget} gt $pursuedistance) and (not $radius or not $radiusanchorspace.exists or $bigtarget.distanceto.[$radiusanchorspace, $radiusanchorpos] gt $radius))">
          <!-- break off attack. implementation of pursuetargets moved to order.fight.attack.object. -->
          <debug_text text="'target is either not in the same sector or not within 10 minutes travel time and i am not authorized to pursue. breaking off attack.\n  my sector: %s\n target sector: %s\n distance to target: %s\n max distance in 10 minutes: %s\n pursue distance: %s'.[$refobject.sector, $bigtarget.sector, $refobject.distanceto.{$bigtarget}, this.ship.maxspeed*600, $pursuedistance]" chance="$debugchance"/>
          <resume label="finish"/>
        </do_if>

        <!-- this assumes that if a ship has stances that prohibit firing, its default stance always allows firing. -->
        <do_if value="this.assignedcontrolled.stances.list.count and (this.assignedcontrolled.stances.active != this.assignedcontrolled.stances.default)">
          <do_if value="this.assignedcontrolled.stances.canswitch">
            <activate_default_ship_stance ship="this.assignedcontrolled"/>
          </do_if>
        </do_if>

        <!-- New simulated run attack. -->
        <do_if value="$bigtarget.canbeattacked and (not $duration_movement? or ((player.age - @$time_movestart) ge $duration_movement))">
          <debug_text text="player.age + ' block 2.1. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>
          <set_value name="$movetarget" exact="$bigtarget"/>
          <do_if value="@$module.isoperational and ($module.defensible == $bigtarget)">
            <set_value name="$movetarget" exact="$module"/>
          </do_if>
          <do_else>
            <set_value name="$defencetarget" exact="@this.assignedcontrolled.defencenpc.$targetmodule"/>
            <do_if value="@$defencetarget.isoperational and ($defencetarget.defensible == $bigtarget)">
              <set_value name="$movetarget" exact="$defencetarget"/>
            </do_if>
            <remove_value name="$defencetarget"/>
          </do_else>
          <debug_text text="'movetarget ' + $movetarget.knownname" chance="$debugchance"/>
          <set_value name="$duration_movement" exact="[((this.assignedcontrolled.bboxdistanceto.{$bigtarget} + this.assignedcontrolled.size) / [this.assignedcontrolled.maxspeed, 1m].max)s, 40s].max"/>
          <set_value name="$time_movestart" exact="player.age"/>
          <move_to object="this.assignedcontrolled" destination="$movetarget" finishonapproach="true" travel="$duration_movement gt 40s">
            <interrupt_after_time time="1s" />
          </move_to>
          <do_if value="$duration_movement gt 40s">
            <!-- if $duration_movement gt 40s, movement will likely finish before $duration_movement has elapsed. -->
            <!-- ideally, calculate new duration accounting for travel mode usage, but that will still never be more than an estimate so likely not worth the extra computation. -->
            <set_value name="$duration_movement" exact="40s"/>
          </do_if>
          <remove_value name="$movetarget"/>
          <debug_text text="player.age + ' block 2.2. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>
        </do_if>
        <wait min="5ms" max="15ms" profile="flat" comment="we fire while approaching the target. wait is just to ensure we don't have infinite loops if moving returns immediately"/>

        <do_if value="$bigtarget.canbeattacked and not this.assignedcontrolled.defencenpc">
          <set_value name="$shoottarget" exact="$bigtarget"/>
          <do_if value="$target.isoperational and $target.issurfaceelement">
            <set_value name="$surfaceelement" exact="$target"/>
            <!--<set_value name="$shoottarget" exact="$target"/>-->
          </do_if>
          <debug_text text="'shoottarget: %s %s %s %s %s'.[@$shoottarget.class, @$shoottarget.macro, @$shoottarget.idcode, @$shoottarget.knownname, $shoottarget]" chance="$debugchance"/>
          <!-- Attacking 1-7 seconds -->
          <!-- get strength of the next attack -->
          <is_in_quadrant result="$useforwardweapons" object="this.assignedcontrolled" target="$bigtarget" front="true"/>
          <get_attackstrength object="this.assignedcontrolled" target="$shoottarget" usedrones="false" useforwardweapons="$useforwardweapons">
            <result hullshield="$result_hullshield" hullonly="$result_hullonly" shieldonly="$result_shieldonly" hullnoshield="$result_hullnoshield"/>
            <missileresult ammo="$spentammotable" impacting="$impactingammotable" hullshield="$result_missilehullshield" hullonly="$result_missilehullonly" shieldonly="$result_missileshieldonly" hullnoshield="$result_missilehullnoshield"/>
          </get_attackstrength>
          <set_value name="$guidedmissilelaunched" exact="false"/>
          <do_for_each name="$missilemacro" valuename="$missileamount" in="$spentammotable">
            <do_if value="not $guidedmissilelaunched and $missilemacro.isguided">
              <set_value name="$guidedmissilelaunched" exact="true"/>
            </do_if>
            <remove_ammo object="this.assignedcontrolled" macro="$missilemacro" amount="$missileamount"/>
          </do_for_each>
          <do_if value="this.assignedcontrolled.isformationleader">
            <!-- ships flying in formation with this ship fire on target as the opportunity presents itself -->
            <do_for_each name="$locship" in="this.assignedcontrolled.currentformationwingmen">
              <do_if value="@$locship.formationleader == this.assignedcontrolled and not $locship.defencenpc" chance="15">
                <is_in_quadrant result="$loc_useforwardweapons" object="$locship" target="$bigtarget" front="true"/>
                <get_attackstrength object="$locship" target="$shoottarget" usedrones="false" useforwardweapons="$loc_useforwardweapons">
                  <result hullshield="$locresult_hullshield" hullonly="$locresult_hullonly" shieldonly="$locresult_shieldonly" hullnoshield="$locresult_hullnoshield"/>
                  <missileresult ammo="$locresult_spentammotable" impacting="$locresult_impactingammotable" hullshield="$locresult_missilehullshield" hullonly="$locresult_missilehullonly" shieldonly="$locresult_missileshieldonly" hullnoshield="$locresult_missilehullnoshield"/>
                </get_attackstrength>
                <set_value name="$result_hullshield"          exact="$locresult_hullshield" operation="add"/>
                <set_value name="$result_hullonly"            exact="$locresult_hullonly" operation="add"/>
                <set_value name="$result_shieldonly"          exact="$locresult_shieldonly" operation="add"/>
                <set_value name="$result_hullnoshield"        exact="$locresult_hullnoshield" operation="add"/>
                <set_value name="$result_missilehullshield"   exact="$locresult_missilehullshield" operation="add"/>
                <set_value name="$result_missilehullonly"     exact="$locresult_missilehullonly" operation="add"/>
                <set_value name="$result_missileshieldonly"   exact="$locresult_missileshieldonly" operation="add"/>
                <set_value name="$result_missilehullnoshield" exact="$locresult_missilehullnoshield" operation="add"/>
                <!--Remove the missile ammo launched from this follower and check if one was a guided missile which may trigger a countermeasure-->
                <do_for_each name="$missilemacro" valuename="$missileamount" in="$locresult_spentammotable">
                  <do_if value="not $guidedmissilelaunched and $missilemacro.isguided">
                    <set_value name="$guidedmissilelaunched" exact="true"/>
                  </do_if>
                  <remove_ammo object="$locship" macro="$missilemacro" amount="$missileamount"/>
                </do_for_each>
                <!--Merge the impacting ammo tables of this follower and the leader as we may need to reference them if a countermeasure is launched later-->
                <do_for_each name="$missilemacro" valuename="$missileamount" in="$locresult_impactingammotable">
                  <set_value name="$impactingammotable.{$missilemacro}" operation="add" exact="$missileamount"/>
                </do_for_each>
              </do_if>
            </do_for_each>
            <remove_value name="$loc_useforwardweapons"/>
            <remove_value name="$locresult_hullshield"/>
            <remove_value name="$locresult_hullonly"/>
            <remove_value name="$locresult_shieldonly"/>
            <remove_value name="$locresult_hullnoshield"/>
            <remove_value name="$locresult_missilehullshield"/>
            <remove_value name="$locresult_missilehullonly"/>
            <remove_value name="$locresult_missileshieldonly"/>
            <remove_value name="$locresult_missilehullnoshield"/>
            <remove_value name="$locresult_spentammotable"/>
            <remove_value name="$locresult_impactingammotable"/>
          </do_if>

          <!--Check if a guided missile was fired. If so, attempt to launch a countermeasure from the target-->
          <remove_value name="$targetcountermeasure_startcount"/>
          <remove_value name="$targetcountermeasuremacro"/>
          <do_if value="$guidedmissilelaunched and $bigtarget.isclass.defensible">
            <!--Gather data on remaining countermeasures for later-->
            <set_value name="$targetcountermeasure_startcount" exact="$bigtarget.ammostorage.countermeasure.count"/>
            <do_if value="$targetcountermeasure_startcount">
              <set_value name="$targetcountermeasuremacro" exact="$bigtarget.ammostorage.countermeasure.list.random"/>
              <!--Now launch the countermeasure for our missiles-->
              <launch_countermeasures object="$bigtarget" virtual="true"/>
              <set_value name="$targetcountermeasure_startcount" operation="subtract"/>
              <debug_text text="'depleted countermeasures, current storage: %s'.[$targetcountermeasure_startcount]" chance="0"/>
            </do_if>
            <!--Now that we've dealt with the spent missiles, reset $guidedmissilelaunched based on the impacting missiles and remaining countermeasures to see if they could be distracted later-->
            <set_value name="$guidedmissilelaunched" exact="false"/>
            <do_if value="$targetcountermeasure_startcount">
              <do_for_each name="$missilemacro" in="$impactingammotable">
                <do_if value="$missilemacro.isguided">
                  <set_value name="$guidedmissilelaunched" exact="true"/>
                  <break/>
                </do_if>
              </do_for_each>
            </do_if>
          </do_if>

          <do_if value="$bigtarget.ismodular">
            <find_module groupname="$modules" checkoperational="false" multiple="true" object="$bigtarget">
              <match state="componentstate.wreck" negate="true"/>
            </find_module>
          </do_if>
          <!--If ship was not facing the target when calculating dps, make the attack run shorter so they can sooner try again-->
          <do_if value="$useforwardweapons">
            <set_value name="$attackcounter" min="1" max="7" profile="increasing"/>
          </do_if>
          <do_else>
            <set_value name="$attackcounter" min="1" max="5" profile="decreasing"/>
          </do_else>
          <remove_value name="$useforwardweapons"/>
          <!--missile damage is applied on the final iteration of damage-->
          <do_all exact="$attackcounter" counter="$attack_i" comment="chance of fail and attack" >
            <do_if value="$attackcounter gt $attack_i and this.assignedcontrolled.relspeed le 0">
              <is_in_quadrant result="$locfront" object="this.assignedcontrolled" target="$bigtarget" front="true"/>
              <do_if value="not $locfront">
                <debug_text text="'target no longer in front. restarting movement.'" chance="$debugchance"/>
                <remove_value name="$locfront"/>
                <break/>
              </do_if>
              <remove_value name="$locfront"/>
            </do_if>
            <debug_text text="player.age + ' block 2.3. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>
            <wait exact="1s" comment="dps-> every second makes damage" />
            <do_if value="$bigtarget.canbeattacked and not $isdead">
              <!-- do not attack objects that are too far away, gravidar range can be 20km+ !! -->
              <do_if value="this.ship.bboxdistanceto.{$bigtarget} lt this.ship.maxcombatrange.all" >
                <do_if value="not @$module.canbeattacked and @$modules.count gt 0">
                  <set_value name="$module" exact="$modules.random"/>
                </do_if>
                <!--if final iteration, check missiles-->
                <do_if value="$attack_i == $attackcounter and $impactingammotable.keys.count">
                  <!--if a guided missile was launched, check target countermeasure counts-->
                  <do_if value="$guidedmissilelaunched and $bigtarget.isclass.defensible">
                    <set_value name="$targetcountermeasure_endcount" exact="$bigtarget.ammostorage.countermeasure.count"/>
                    <do_if value="$targetcountermeasure_startcount and $targetcountermeasure_endcount lt $targetcountermeasure_startcount">
                      <!--Countermeasures have been launched between the start of this attack and firing the missiles. Check countermeasure resistances and potentially reduce damage.-->
                      <do_for_each name="$missilemacro" valuename="$missileamount" in="$impactingammotable">
                        <do_if value="$missilemacro.isguided">
                          <!--Multiply by a reduced factor as large targets may still be hit even if a missile is distracted by a countermeasure-->
                          <set_value name="$countermeasuresuccesschance" exact="(100.0f - $missilemacro.countermeasureresistance.{$targetcountermeasuremacro}) * 0.7f"/>
                          <do_all exact="$targetcountermeasure_startcount - $targetcountermeasure_endcount">
                            <!--do_if = true here so we can contain these actions and have the break escape the above loop-->
                            <do_if value="true" chance="$countermeasuresuccesschance">
                              <!--note: the .explosive damage property result may be higher than the damage calculated by get_attackstrength due to other factors. Protect against negative.-->
                              <debug_text text="'missile %s distracted by countermeasure that launched since the attack started'.[$missilemacro.id]" chance="$debugchance"/>
                              <set_value name="$result_missilehullshield"    exact="[$result_missilehullshield - $missilemacro.explosiondamage.hullshield, 0].max"/>
                              <set_value name="$result_missilehullonly"      exact="[$result_missilehullonly - $missilemacro.explosiondamage.hullonly, 0].max"/>
                              <set_value name="$result_missileshieldonly"    exact="[$result_missileshieldonly - $missilemacro.explosiondamage.shieldonly, 0].max"/>
                              <set_value name="$result_missilehullnoshield"  exact="[$result_missilehullnoshield - $missilemacro.explosiondamage.hullnoshield, 0].max"/>
                              <break/>
                            </do_if>
                          </do_all>
                        </do_if>
                      </do_for_each>
                    </do_if>
                    <remove_value name="$targetcountermeasure_endcount"/>
                  </do_if>
                  <!-- Apply the missile explosive damage -->
                  <apply_attackstrength object="$shoottarget" attacker="this.assignedcontrolled" explosion="true" hullshield="$result_missilehullshield" hullonly="$result_missilehullonly" shieldonly="$result_missileshieldonly" hullnoshield="$result_missilehullnoshield" module="@$module" surfaceelement="@$surfaceelement">
                    <result killed="$isdead" module="$module" surfaceelement="$surfaceelement"/>
                  </apply_attackstrength>
                  <debug_text text="'%1 OOS. Apply explosive damage of %2 against %3 is: %4(%5|%6). Is killed: %7'.[player.age,this.ship.knownname,$bigtarget.knownname,$result_missilehullshield+$result_missilehullonly+$result_missileshieldonly+$result_missilehullnoshield,$bigtarget.hull,$bigtarget.shield,$isdead]" chance="$debugchance" />
                </do_if>
                <do_if value="not $isdead">
                  <!-- Apply the regular dps attack strength -->
                  <apply_attackstrength object="$shoottarget" attacker="this.assignedcontrolled" hullshield="$result_hullshield" hullonly="$result_hullonly" shieldonly="$result_shieldonly" hullnoshield="$result_hullnoshield" module="@$module" surfaceelement="@$surfaceelement">
                    <result killed="$isdead" module="$module" surfaceelement="$surfaceelement"/>
                  </apply_attackstrength>
                </do_if>
                <debug_text text="'small. %s %s %s attacking %s %s %s.\ndamage: %s\ndps: %s\ntarget: %s %s %s: %s\norder target: %s %s %s\nmodule: %s %s %s\nsurface element: %s %s %s'.[this.assignedcontrolled.idcode, this.assignedcontrolled.knownname, this.assignedcontrolled, $bigtarget.idcode, $bigtarget.knownname, $bigtarget, $result_hullshield + $result_hullonly + $result_shieldonly + $result_hullnoshield, this.assignedcontrolled.dps.all, @$target.macro, @$target.knownname, $target, $target.hull, @this.ship.order.$primarytarget.macro, @this.ship.order.$primarytarget.knownname, @this.ship.order.$primarytarget, @$module.macro, @$module.knownname, $module, @$surfaceelement.macro, @$surfaceelement.knownname, $surfaceelement]" chance="0"/>
                <debug_text text="'%1 OOS. Apply strength of %2 against %3 is:\n%4(%5|%6).\nIs killed: %7'.[player.age,this.ship.knownname,$bigtarget.knownname,$result_hullshield+$result_hullonly+$result_shieldonly+$result_hullnoshield,$bigtarget.hull,$bigtarget.shield,$isdead]" chance="$debugchance" />
              </do_if>
            </do_if>
            <do_else>
              <break/>
            </do_else>
          </do_all>
          <remove_value name="$shoottarget"/>
          <remove_value name="$attackcounter"/>
        </do_if>

        <!-- Search/Attacking wait time -->
        <do_if value="$bigtarget.exists and this.assignedcontrolled.bboxdistanceto.{$bigtarget} lt $MaxGainDistance">
          <!-- this assumes that the first stance is good for evasion. may not be a safe assumption moving forward. -->
          <do_if value="this.assignedcontrolled.stances.canswitch">
            <set_value name="$stances" exact="this.assignedcontrolled.stances.list"/>
            <do_if value="$stances.count and (this.assignedcontrolled.stances.active != $stances.{1})">
              <activate_ship_stance ship="this.assignedcontrolled" stance="$stances.{1}"/>
            </do_if>
            <remove_value name="$stances"/>
          </do_if>
          <set_value name="$boost" exact="false"/>
          <do_if value="$allowboost and (this.assignedcontrolled.combinedskill ge 30 or this.race == race.terran) and (this.assignedcontrolled.boost.remainingfraction gt 0.5)" chance="if (this.race == race.terran) then 100 else this.assignedcontrolled.combinedskill">
            <set_value name="$boost"/>
          </do_if>
          <debug_text text="player.age + ' block 2.4. dist to target: ' + this.ship.distanceto.{$bigtarget}" chance="0"/>
          <set_value name="$movetarget" exact="$bigtarget"/>
          <do_if value="@$module.isoperational and ($module.defensible == $bigtarget)">
            <set_value name="$movetarget" exact="$module"/>
          </do_if>
          <do_else>
            <set_value name="$defencetarget" exact="@this.assignedcontrolled.defencenpc.$targetmodule"/>
            <do_if value="@$defencetarget.isoperational and ($defencetarget.defensible == $bigtarget)">
              <set_value name="$movetarget" exact="$defencetarget"/>
            </do_if>
            <remove_value name="$defencetarget"/>
          </do_else>
          <create_position name="$locpos" space="$bigtarget.zone" min="$MinGainDistance" max="$MaxGainDistance" object="$movetarget"/>
          <create_orientation name="$locrot" refobject="$movetarget" orientation="look_at">
            <position value="$locpos" space="$bigtarget.zone"/>
          </create_orientation>
          <debug_text text="'pos %sm away from target'.[$movetarget.distanceto.{$locpos}]" chance="0"/>
          <set_value name="$gain_dist_time" min="7s" max="10s"/>
          <move_to object="this.ship" destination="$bigtarget.zone" finishonapproach="true" boost="$boost">
            <position value="$locpos"/>
            <rotation value="$locrot"/>
            <interrupt_after_time time="$gain_dist_time" />
          </move_to>
          <debug_text text="'LOW: gaindist movement done.\nremaining boost percentage: %s\ndist: %sm\nmax: %sm'.[this.assignedcontrolled.boost.remainingfraction, this.assignedcontrolled.distanceto.{$bigtarget}, $MaxGainDistance]" chance="$boost * 0"/>
          <remove_value name="$gain_dist_time"/>
          <remove_value name="$locpos"/>
          <remove_value name="$locrot"/>
          <debug_text text="player.age + ' block 2.5. dist to target: ' + this.ship.distanceto.{$movetarget}" chance="0"/>
          <remove_value name="$movetarget"/>
          <wait min="1s" max="2s" profile="flat" />
        </do_if>
        <remove_value name="$surfaceelement" chance="10"/>
        <remove_value name="$module" chance="5"/>

        <!-- Avoid an infite loop-->
        <do_if value="player.age" min="$attacktime">
          <resume label="finish"/>
        </do_if>
      </do_while>

      <label name="finish" />

      <do_if value="not this.ship.defencenpc">
        <cease_fire object="this.object" />
      </do_if>
      <reset_flight_behaviour object="this.assignedcontrolled"/>
      <set_to_default_flight_control_model object="this.assignedcontrolled"/>
      <stop_moving object="this.assignedcontrolled"/>
      <debug_text text="'No more targets to be found'" chance="$debugchance" />
      <wait exact="100ms" />

    </actions>
  </attention>
  <on_abort>
    <reset_flight_behaviour object="this.ship"/>
    <set_to_default_flight_control_model object="this.ship"/>
    <stop_moving object="this.ship" />
    <do_if value="not this.ship.defencenpc">
      <cease_fire object="this.object" />
      <set_alert_level object="this.ship" level="green" />
    </do_if>
  </on_abort>
</aiscript>
