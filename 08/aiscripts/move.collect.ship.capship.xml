<?xml version="1.0" encoding="iso-8859-1" ?>
<!--
Script used by capships to collect crates/objects in space using drones
-->
<aiscript name="move.collect.ship.capship" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <params>
    <param name="targets" comment="group of targets to collect"/>
    <param name="debugchance" default="0"/>
  </params>
  <interrupts>
    <handler ref="TargetInvalidHandler"/>
  </interrupts>
  <attention min="unknown">
    <actions>
      <label name="start"/>

      <do_if value="not this.defensible.isclass.ship_xl and not this.defensible.isclass.ship_l">
        <debug_text text="this.controllable.knownname + ' is not a capital ship'"/>
        <return value="false"/>
      </do_if>

      <!-- Nothing to pick up -->
      <do_if value="not $targets.count">
        <debug_text text="'%1 has no nothing to pick up %3'.[this.ship.knownname]" chance="$debugchance" />
        <return/>
      </do_if>
      <do_else>
        <add_to_group groupname="$collecttargets" group="$targets"/>
      </do_else>

      <!-- Stop moving -->
      <stop_moving object="this.ship" />

      <label name="collect"/>

      <!-- Safety check -->
      <do_if value="not this.ship.units.{unitcategory.transport}.count">
        <debug_text text="'%1 has no transport drones. aborting.'.[this.ship.knownname]" chance="$debugchance" />
        <return/>
      </do_if>

      <!-- Collect all targets -->
      <do_all exact="@$collecttargets.count" counter="$i" reverse="true">
        <!-- Check if the target exists -->
        <do_if value="@$collecttargets.{$i}.exists and ($collecttargets.{$i}.isdeployable or not $collecttargets.{$i}.owner)">
          <!-- If I have a available transport drone -->
          <do_if value="this.ship.availableunits.{unitcategory.transport}.count">
            <set_value name="$pickuptarget" exact="$collecttargets.{$i}"/>
            <!-- Launch transport drones to pick up the crates -->
            <launch_masstraffic_drone name="$drone" object="this.ship" category="unitcategory.transport" pickup="true" target="$pickuptarget" />
            <!-- If drone was launched-->
            <do_if value="$drone.isoperational">
              <do_if value="not $pickuptarget.isdeployable">
                <set_owner object="$pickuptarget" faction="this.assignedcontrolled.owner"/>
              </do_if>
              <!-- Start collect routine -->
              <start_script name="'move.collect.drone'" object="$drone.pilot">
                <param name="homebase" value="this.ship" />
                <param name="target" value="$pickuptarget"/>
                <param name="masstraffic" value="true"/>
                <param name="stayactive" value="false" comment="deactivate animation after picked up" />
                <param name="debugchance" value="$debugchance"/>
              </start_script>
              <do_if value="$pickuptarget.exists and not $pickuptarget.iswreck and not $pickuptarget.isdeployable">
                <debug_text text="'target still exists after collection. rescinding ownership.'" chance="$debugchance"/>
                <set_owner object="$pickuptarget" faction="null"/>
              </do_if>
              <!-- Remove from the group -->
              <remove_from_group group="$collecttargets" object="$pickuptarget" />
              <!-- Give time to the next transport drones -->
              <wait min="3s" max="5s" />
            </do_if>
          </do_if>
          <!-- No available units -->
          <do_else>
            <break/>
          </do_else>
        </do_if>
      </do_all>

      <set_value name="$hascargoliftersubordinates" exact="false"/>
      <do_for_each name="$locship" in="this.assignedcontrolled.subordinates">
        <do_if value="$locship.isunit and $locship.unitcategory == unitcategory.transport">
          <set_value name="$hascargoliftersubordinates" exact="true"/>
          <break/>
        </do_if>
      </do_for_each>
      <do_if value="$hascargoliftersubordinates == (this.ship.units.{unitcategory.transport}.count == this.ship.availableunits.{unitcategory.transport}.count)">
        <debug_text text="'Mismatch between available unit count and subordinates.\nunit count: %s\navailable unit count: %s\nhas transport subordinates: %s'.[this.assignedcontrolled.units.{unitcategory.transport}.count, this.assignedcontrolled.availableunits.{unitcategory.transport}.count, $hascargoliftersubordinates]" filter="error"/>
      </do_if>

      <!-- still targets or drones unavailable (if units == available all returned) -->
      <do_if value="@$collecttargets.count or ($hascargoliftersubordinates and this.ship.units.{unitcategory.transport}.count != this.ship.availableunits.{unitcategory.transport}.count)">
        <!-- command action -->
        <set_command_action commandaction="commandaction.waitingdrones" />
        <wait min="10s" max="30s"/>
        <resume label="collect"/>
      </do_if>
      <!-- No remaining targets to collect, but still the initial group has some-->
      <do_elseif value="$targets.count">
        <!-- Retry again? -->
        <do_if value="@$attempt lt 3">
          <set_value name="$attempt" exact="@$attempt + 1" />
          <resume label="start" />
        </do_if>
        <do_else>
          <debug_text text="'Too many collect attempts (%1). Original targets: %2, Collect targets %3'.[$attempt, $targets, $collecttargets]" chance="$debugchance" />
        </do_else>
      </do_elseif>

    </actions>
  </attention>
</aiscript>
