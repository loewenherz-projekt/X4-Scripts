<?xml version="1.0" encoding="iso-8859-1"?>
<aiscript name="mining.collect.ship.medium" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="4">
  <!--
  
  Asteroid gathering logic
  Only visible attention level, low level handled on mining.collect.ship
  
  Only supports small and medium ships

  Note: this script assumes that there are mining lasers mounted on the primary weapon slots of the mining ship.
    if a small or medium mining ship with different primary weapons but with mining lasers mounted on turrets is desired, adjust the distance checks accordingly.
    (look for this.ship.maxcombatrange.lasers.primary and figure out a different way to determine firing range.)
  
  -->
  <params>
    <param name="destination" comment="[space, position]"/>
    <param name="ware"/>
    <param name="secwares"/>
    <param name="dronelaunchdelay"/>
    <param name="debugchance"/>

    <!-- debug_eco -->
    <param name="time_started"/>
    <param name="debug_eco" default="0"/>
  </params>
  <interrupts>
    <handler ref="TargetInvalidHandler"/>
    <handler ref="LostReservationHandler"/>
  </interrupts>
  <init>
    <!-- Destination no longer exists -->
    <do_if value="not $destination.{1}.exists">
      <debug_text text="'input destination, %s %s %s, does not exist.'.[$destination.{1}.class, $destination.{1}.knownname, $destination.{1}]" filter="error"/>
      <set_value name="$returnvalue" exact="'aborted'"/>
      <set_value name="$abort"/>
    </do_if>

    <do_if value="$destination.{1}.isclass.sector">
      <set_value name="$sector" exact="$destination.{1}"/>
      <set_value name="$pos" exact="$destination.{2}"/>
    </do_if>
    <do_elseif value="$destination.{1}.sector">
      <set_value name="$sector" exact="$destination.{1}.sector"/>
      <create_position name="$pos" space="$sector" value="$destination.{2}" object="$destination.{1}"/>
    </do_elseif>
    <do_else>
      <debug_text text="'ERROR: destination %s %s %s is neither a sector nor in a sector.'.[$destination.{1}.class, $destination.{1}.knownname, $destination.{1}]" filter="error"/>
      <set_value name="$returnvalue" exact="'nosector'"/>
      <set_value name="$abort"/>
    </do_else>
  </init>
  <patch sinceversion="2">
    <do_if value="@$target.exists and @$attackposition">
      <!-- fix in code requires targets to be passed back in. -->
      <do_if value="@$asteroids.count">
        <set_turret_targets object="this.assignedcontrolled" target="$asteroids" weaponmode="weaponmode.mining" clearpreferred="false" preferredtarget="$target" />
      </do_if>
      <do_else>
        <set_turret_targets object="this.assignedcontrolled" target="[$target]" weaponmode="weaponmode.mining" clearpreferred="false" preferredtarget="$target" />
      </do_else>
      <shoot_at object="this.assignedcontrolled" target="$target" tolerance="30.0deg" weaponmode="weaponmode.mining" />
    </do_if>
  </patch>
  <patch sinceversion="4">
    <do_if value="$pickuptarget? and not $pickuptarget">
      <set_value name="$pickuptarget" exact="null"/>
    </do_if>
  </patch>
  <attention min="visible">
    <actions>

      <do_if value="$abort?">
        <resume label="finish"/>
      </do_if>

      <!-- check that this is not a capital ship -->
      <assert value="not this.ship.isclass.[class.ship_l, class.ship_xl]" text="'Error: mining.collect.medium logic running on a capital ship'" />

      <!-- mineral mining (medium ships) -->
      <set_value name="$attackposition" exact="false"/>

      <!-- debug_eco - at area -->
      <debug_to_file name="'eco_report.csv'" directory="'mining'" text="'%1;travel_to_location;%2;%3;%4;%5'.[player.age, this.ship.knownname, this.ship, this.ship.owner, player.age - $time_started]" output="$debugchance" chance="$debug_eco"/>

      <do_while value="this.ship.cargo.{$ware}.free">

        <!-- Command action -->
        <set_command_action commandaction="commandaction.searchingresources" />

        <do_if value="not $time_started_local?">
          <set_value name="$time_started_local" exact="player.age" chance="$debug_eco"/>
        </do_if>
        <set_value name="$start_cargofree" exact="this.ship.cargo.{$ware}.free" chance="$debug_eco"/>

        <set_value name="$checkware" exact="$ware" />
        <!-- 10% chance to gather secondary wares that can be mined -->
        <do_if value="$secwares.count" chance="10">
          <set_value name="$tryware" exact="$secwares.random"/>
          <!-- evaluate if should use a secondary ware -->
          <do_if value="this.ship.cargo.{$tryware}.free">
            <debug_text text="'IS mining: try other ware (%1)'.[$tryware]" chance="$debugchance" />
            <set_value name="$checkware" exact="$tryware"/>
          </do_if>
          <remove_value name="$tryware" />
        </do_if>

        <do_if value="$shotatasteroid? or @$pickup.count">
          <!-- we just shot an asteroid or have chunks to pick up. no need to scan for a new one. -->
          <remove_value name="$shotatasteroid"/>
        </do_if>
        <do_else>
          <set_value name="$efficiency" exact="1.0f"/>
          <set_value name="$effectivescantime" exact="$dronelaunchdelay"/>
          <do_if value="this.isplayerowned">
            <set_value name="$evalware" exact="$checkware"/>
            <set_value name="$basescantime" exact="$effectivescantime"/>
            <include_interrupt_actions ref="CalculateMiningEfficiency"/>
            <set_value name="$efficiency" exact="$_result_efficiency"/>
            <set_value name="$effectivescantime" exact="$_result_scantime"/>
            <remove_value name="$_result_scantime"/>
            <remove_value name="$_result_efficiency"/>
            <remove_value name="$basescantime"/>
            <remove_value name="$evalware"/>
          </do_if>

          <run_script name="'move.idle'" sinceversion="1">
            <param name="TimeOut" value="$effectivescantime"/>
            <param name="untilattentionchangeto" value="attention.adjacentzone"/>
          </run_script>
        </do_else>

        <!-- find pickup (filtered by ownership) and target -->
        <set_value name="$pickuptarget" exact="null"/>

        <!-- Small asteroids to pick up -->
        <find_asteroid_in_cluster name="$pickup" cluster="this.cluster" refobject="this.ship" canpickup="true" multiple="true" maxdistance="2km" ware="$checkware"/>
        <do_all exact="$pickup.count" counter="$i" reverse="true">
          <do_if value="$pickup.{$i}.owner">
            <remove_value name="$pickup.{$i}" />
          </do_if>
          <do_elseif value="not $pickup.{$i}.canbepickedup">
            <debug_text text="'%1 in %2 cannot be picked up!'.[$pickup.{$i}, $pickup.{$i}.sector.knownname]" chance="$debugchance"/>
            <remove_value name="$pickup.{$i}" />
          </do_elseif>
          <do_elseif value="$pickup.{$i}.wares.{$checkware}.count le 0">
            <remove_value name="$pickup.{$i}" />
          </do_elseif>
        </do_all>

        <!-- evaluate movement -->
        <do_if value="not $pickup.count">
          <!-- No target -->
          <do_if value="not @$target.exists">
            <!-- find asteroids and the best target -->
            <set_value name="$scanrange" exact="3km"/>
            <do_if value="$increasescanrange?">
              <remove_value name="$increasescanrange"/>
              <set_value name="$scanrange" exact="55km"/>
            </do_if>
            <find_asteroid_in_cluster name="$asteroids" cluster="this.cluster" refobject="this.ship" canpickup="false" multiple="true" maxdistance="$scanrange" ware="$checkware" viewangle="180deg"/>

            <do_if value="$asteroids.count" min="1">
              <set_value name="$target" exact="null"/>
              <set_value name="$bestasteroidhull" exact="0"/>
              <do_all exact="$asteroids.count" counter="$i">
                <do_if value="(not $target.exists or $asteroids.{$i}.hull lt $bestasteroidhull) and $asteroids.{$i}.wares.count">
                  <set_value name="$target" exact="$asteroids.{$i}"/>
                  <set_value name="$bestasteroidhull" exact="$asteroids.{$i}.hull"/>
                </do_if>
              </do_all>
              <do_if value="$target.exists">
                <debug_text text="'%1 new target [pickup count: %2, asteroid count: %3 (%4)]'.[player.age, $pickup.count, $asteroids.count, $bestasteroidhull]" chance="$debugchance"/>
              </do_if>
              <do_else>
                <set_value name="$increasescanrange"/>
                <debug_text text="'no viable asteroids found. increasing scan range.'" chance="$debugchance"/>
              </do_else>
              <remove_value name="$bestasteroidhull"/>
            </do_if>
            <do_else>
              <!-- Find again with bigger range -->
              <find_asteroid_in_cluster name="$target" cluster="this.cluster" refobject="this.ship" canpickup="false" multiple="false" maxdistance="55km" ware="$checkware"/>
            </do_else>
            <remove_value name="$scanrange"/>
          </do_if>

          <!-- Target exists -->
          <do_if value="$target.exists">
            <!-- Set asteroid persistence -->
            <set_region_object_persistence object="$target" />
            <set_value name="$attackposition" exact="true"/>
            <!-- Attack asteroids with mining lasers -->
            <do_all exact="@$asteroids.count" counter="$i" reverse="true">
              <do_if value="not $asteroids.{$i}.exists or not $asteroids.{$i}.isclass.destructible">
                <remove_value name="$asteroids.{$i}"/>
              </do_if>
            </do_all>
            <do_if value="@$asteroids.count">
              <set_turret_targets object="this.ship" target="$asteroids" weaponmode="weaponmode.mining" clearpreferred="false" preferredtarget="$target" />
            </do_if>
            <do_else>
              <set_turret_targets object="this.ship" target="[$target]" weaponmode="weaponmode.mining" clearpreferred="false" preferredtarget="$target" />
            </do_else>
            <!-- shoot at the asteroid. -->
            <shoot_at object="this.ship" target="$target" weaponmode="weaponmode.mining" />
            <!-- stop and rotate -->
            <debug_text text="player.age+' target is now in range ('+ (this.ship.distanceto.{$target} - ($target.size/2.f)) +'m)'" chance="$debugchance"/>

            <!-- NOTE(Paul): if the target asteroid is further than $no_spline_movement_range away, we will move towards it using spline. This will lead to better non-target asteroid evasion, than with the generic steering behaviour.-->
            <set_value name="$no_spline_movement_range" exact="6km"/>
            <do_if value="$target.exists and this.ship.distanceto.{$target} gt $no_spline_movement_range">
              <set_flight_control_model object="this.ship" flightcontrolmodel="flightcontrolmodel.spline" />
              <move_to object="this.ship" destination="$target" uselocalhighways="false" radius="$no_spline_movement_range" sinceversion="3">
                <interrupt>
                  <conditions>
                    <check_any>
                      <event_object_approaching_waypoint object="this.ship"/>
                      <event_object_arrived_at_waypoint object="this.ship"/>
                      <event_object_destroyed object="$target" />
                    </check_any>
                  </conditions>
                </interrupt>
              </move_to>
            </do_if>

            <do_if value="$target.exists">
              <!-- the mining behaviour needs the asteroid as target, to get the size and keep a relative distance to it (including mining lasers range) -->
              <!-- as soon as we're close enough (< $no_spline_movement_range), we will enable the mining behaviour -->
              <move_to object="this.ship" destination="$target" forcesteering="true" flightbehaviour="flightbehaviour.mining">
                <interrupt>
                  <conditions>
                    <event_object_destroyed object="$target" />
                  </conditions>
                </interrupt>
              </move_to>
            </do_if>
            <set_value name="$shotatasteroid"/>
            <!-- debug_eco - asteroid destroyed -->
            <debug_to_file name="'eco_report.csv'" directory="'mining'" text="'%1;asteroid_destroyed;%2;%3;%4;%5'.[player.age, this.ship.knownname, this.ship, this.ship.owner, player.age - $time_started_local]" output="$debugchance" chance="$debug_eco"/>
            <set_value name="$time_started_local" exact="player.age" chance="$debug_eco"/>
          </do_if>

          <!-- No Target - Attack position -->
          <do_elseif value="not @$target.exists and $attackposition">
            <!-- We were shooting the asteroid -->
            <set_value name="$attackposition" exact="false"/>
          </do_elseif>

          <!-- No Target - No Attack position -->
          <do_elseif value="not @$target.exists and not $attackposition">
            <!-- Reset state -->
            <remove_value name="$target"/>
            <stop_shooting object="this.ship" weaponmode="weaponmode.mining"/>
            <set_flight_control_model object="this.ship" flightcontrolmodel="flightcontrolmodel.spline" />
            <!-- No more asteroids -->
            <do_if value="not @$asteroids.count">
              <!-- when no asteroid found and nothing to pickup-->
              <do_if value="not $pickup.count">
                <debug_text text="'no resources found, flying to random position'" chance="$debugchance" />

                <do_if value="@$reservedspace.$zone">
                  <cancel_space_reservation component="this.assignedcontrolled" zone="$reservedspace.$zone" index="$reservedspace.$index"/>
                </do_if>
                <do_else>
                  <set_value name="$reservedspace" exact="table[ $duration = param.spacereservation.maxduration ]"/>
                </do_else>
                <get_safe_pos result="$targetpos" object="this.assignedcontrolled" space="this.zone" zone="this.zone" radius="this.assignedcontrolled.safesize" min="1km" max="50km" ignored="this.assignedcontrolled">
                  <spacereservation component="this.assignedcontrolled" duration="$reservedspace.$duration" index="$reservedspace.$index" safezone="$reservedspace.$zone">
                    <orientation refobject="this.assignedcontrolled" orientation="look_away"/>
                  </spacereservation>
                </get_safe_pos>
                <!-- Fly to a random pos in zone -->
                <move_to object="this.ship" destination="this.zone">
                  <position value="$targetpos"/>
                  <interrupt_after_time time="2min" />
                </move_to>
              </do_if>
            </do_if>
          </do_elseif>
        </do_if>

        <!-- pick up the target -->
        <do_if value="$pickup.count">
          <set_value name="$pickuptarget" exact="$pickup.random"/>
          <set_value name="$locstartcapacity" exact="this.assignedcontrolled.cargo.{$ware}.free"/>

          <do_if value="$pickuptarget.exists">
            <debug_text text="'pickup target %1'.[$pickuptarget]" chance="$debugchance" />
            <!-- make it persistent-->
            <set_region_object_persistence object="$pickuptarget" persistent="true" />
            <!-- no collision -->
            <disable_collisions_between object="this.ship" target="$pickuptarget" />
            <!-- mark it as my property -->
            <set_owner object="$pickuptarget" faction="this.ship.owner" />
            <!-- Fly and pick up the asteroid -->
            <move_to object="this.ship" destination="$pickuptarget" finishonapproach="false" forcesteering="true" flightbehaviour="flightbehaviour.pickup">
              <interrupt>
                <conditions>
                  <event_object_destroyed object="$pickuptarget"/>
                </conditions>
                <actions>
                  <!-- we don't have to do anything. just interrupt the movement. -->
                  <debug_text text="'pickup target stopped existing while we were moving to it.'" chance="$debugchance"/>
                </actions>
              </interrupt>
            </move_to>
          </do_if>
          <!-- now it on the pick up position -->
          <do_if value="$pickuptarget.exists">
            <!-- animation -->
            <pickup_target ship="this.ship" target="$pickuptarget" prepare="true" />
            <!-- start pickup animation on drone -->
            <set_object_active object="this.ship" activate="true"/>
            <!-- wait for activate animation to finish -->
            <wait exact="4s" />
          </do_if>
          <!-- final pick up -->
          <do_if value="$pickuptarget.exists">
            <!-- pick up object -->
            <pickup_target ship="this.ship" target="$pickuptarget" prepare="false" />
            <!-- collect it -->
            <set_object_active object="this.ship" activate="false"/>
            <!-- wait for the animation and then collect it -->
            <wait exact="3s" />
          </do_if>
          <!-- collect the asteroid, adding the ware to the cargo -->
          <do_if value="$pickuptarget.exists">
            <collect_asteroid object="this.ship" asteroid="$pickuptarget" />

            <set_value name="$amountjustpickedup" exact="$locstartcapacity - this.assignedcontrolled.cargo.{$ware}.free"/>
            <debug_text text="'$amountjustpickedup: %s, good haul threshold: %s'.[$amountjustpickedup, this.assignedcontrolled.cargo.{$ware}.max * 0.2]" chance="$debugchance"/>
            <do_if value="$amountjustpickedup and $amountjustpickedup ge (this.assignedcontrolled.cargo.{$ware}.max * 0.2)">
              <!-- what a crew considers a good haul is relative to maximum amount that can be carried in cargo hold. -->
              <set_value name="$XP_factor" exact="[($amountjustpickedup * 2.0)f / [(this.assignedcontrolled.cargo.{$ware}.max)f, 1.0].max, 1.0].min"/>
              <debug_text text="'good haul. collected %s %s. factor: %s, max capacity: %s'.[$amountjustpickedup, $ware, $XP_factor, this.assignedcontrolled.cargo.{$ware}.max]" chance="$debugchance"/>

              <apply_experience entity="this" experience="'ship_mine_good'" factor="$XP_factor"/>
              <apply_experience object="this.assignedcontrolled" role="entityrole.service" experience="'ship_mine_good'" factor="$XP_factor"/>
              <remove_value name="$XP_factor"/>
            </do_if>
            <remove_value name="$locstartcapacity"/>

            <!-- debug_eco - picked up -->
            <debug_to_file name="'eco_report.csv'" directory="'mining'" text="'%1;asteroid_collected;%2;%3;%4;%5;%6;%7'.[player.age, this.ship.knownname, this.ship, this.ship.owner, player.age - $time_started_local, $start_cargofree - this.ship.cargo.{$ware}.free, $ware]" output="$debugchance" chance="$debug_eco"/>
            <set_value name="$time_started_local" exact="player.age" chance="$debug_eco"/>
          </do_if>
        </do_if>

        <wait exact="100ms"/>

      </do_while>

      <!-- Stop mining lasers -->
      <stop_shooting object="this.ship" weaponmode="weaponmode.mining"/>
      <cease_fire object="this.ship" weaponmode="weaponmode.mining" comment="for turrets" />
      <set_to_default_flight_control_model object="this.assignedcontrolled"/>

      <set_value name="this.$time_donemining" exact="player.age" chance="$debug_eco"/>
      <set_value name="$returnvalue" exact="'cargofull'"/>

      <label name="finish"/>

      <do_if value="@$reservedspace.$zone">
        <cancel_space_reservation component="this.assignedcontrolled" zone="$reservedspace.$zone" index="$reservedspace.$index"/>
      </do_if>
      <do_if value="not $returnvalue?">
        <debug_text text="'finishing with no returnvalue'" filter="error"/>
        <set_value name="$returnvalue" exact="null"/>
      </do_if>
      <return value="$returnvalue"/>

    </actions>
  </attention>
  <attention min="unknown">
    <actions>
      <label name="finish"/>
      <do_if value="@$reservedspace.$zone">
        <cancel_space_reservation component="this.assignedcontrolled" zone="$reservedspace.$zone" index="$reservedspace.$index"/>
      </do_if>
      <do_if value="not $returnvalue?">
        <do_if value="@$attackposition">
          <set_value name="$returnvalue" exact="'in_position'"/>
        </do_if>
        <do_else>
          <!-- Go back to unknown attention level of mining.collect.ship -->
          <set_value name="$returnvalue" exact="'attention_change'"/>
        </do_else>
      </do_if>
      <return value="$returnvalue"/>
    </actions>
  </attention>
  <on_abort>
    <do_if value="this.ship.isoperational">
      <do_if value="@$reservedspace.$zone">
        <cancel_space_reservation component="this.ship" zone="$reservedspace.$zone" index="$reservedspace.$index"/>
      </do_if>
      <set_object_active object="this.ship" activate="false" />
      <!-- Stop mining lasers -->
      <cease_fire object="this.ship" weaponmode="weaponmode.mining" comment="for turrets" />
      <set_to_default_flight_control_model object="this.ship"/>
    </do_if>
    <do_if value="$locstartcapacity? and $pickuptarget.exists">
      <find_object_component name="$connectedasteroid" object="this.ship" class="class.asteroid" includeobjects="true"/>
      <do_if value="$connectedasteroid">
        <debug_text text="'aborted, but picked up asteroid has not been collected yet. collecting asteroid now.'" chance="$debugchance"/>
        <collect_asteroid object="this.ship" asteroid="$pickuptarget" />

        <set_value name="$amountjustpickedup" exact="$locstartcapacity - this.assignedcontrolled.cargo.{$ware}.free"/>
        <debug_text text="'$amountjustpickedup: %s, good haul threshold: %s'.[$amountjustpickedup, this.assignedcontrolled.cargo.{$ware}.max * 0.2]" chance="$debugchance"/>
        <do_if value="$amountjustpickedup and $amountjustpickedup ge (this.assignedcontrolled.cargo.{$ware}.max * 0.2)">
          <!-- what a crew considers a good haul is relative to maximum amount that can be carried in cargo hold. -->
          <set_value name="$XP_factor" exact="[($amountjustpickedup * 2.0)f / [(this.assignedcontrolled.cargo.{$ware}.max)f, 1.0].max, 1.0].min"/>
          <debug_text text="'good haul. collected %s %s. factor: %s, max capacity: %s'.[$amountjustpickedup, $ware, $XP_factor, this.assignedcontrolled.cargo.{$ware}.max]" chance="$debugchance"/>

          <apply_experience entity="this" experience="'ship_mine_good'" factor="$XP_factor"/>
          <apply_experience object="this.assignedcontrolled" role="entityrole.service" experience="'ship_mine_good'" factor="$XP_factor"/>
          <remove_value name="$XP_factor"/>
        </do_if>
        <!-- debug_eco - picked up -->
        <debug_to_file name="'eco_report.csv'" directory="'mining'" text="'%1;asteroid_collected;%2;%3;%4;%5;%6;%7'.[player.age, this.ship.knownname, this.ship, this.ship.owner, player.age - $time_started_local, $start_cargofree - this.ship.cargo.{$ware}.free, $ware]" output="$debugchance" chance="$debug_eco"/>
      </do_if>
      <do_else>
        <!-- remove reservation so other ships can go and pick it up -->
        <set_owner object="$pickuptarget" faction="null" />
        <enable_collisions_between object="this.ship" target="$pickuptarget" />
        <set_region_object_persistence object="$pickuptarget" persistent="false" />
      </do_else>
    </do_if>
  </on_abort>
</aiscript>
