<?xml version="1.0" encoding="utf-8"?>
<mdscript name="Diplomacy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <cue name="Patch_Userdata" instantiate="true">
      <conditions>
        <event_cue_signalled cue="md.Setup.Start"/>
      </conditions>
      <actions>
        <do_if value="CustomGamestart_IntroductionUnlocked.state == cuestate.complete">
          <set_userdata storystate="'story_diplomacy_network'" value="1"/>
        </do_if>
        <do_if value="ProtocolNull_Researched.state == cuestate.complete">
          <set_userdata storystate="'story_protocol_null'" value="1"/>
        </do_if>
      </actions>
    </cue>

    <cue name="Start" namespace="this" mapeditor="false" version="3">
      <conditions>
        <event_cue_signalled cue="md.Setup.Start"/>
        <check_value value="player.galaxy.macro.ismacro.{macro.xu_ep2_universe_macro}" comment="only in main-galaxy"/>
      </conditions>
      <actions>

        <set_value name="$DebugChance"                exact="0"/>
        <set_value name="$DeepDebugChance"            exact="0"     comment="for AI scripts and similar external code"/>
        <set_value name="$DiplomacyResearch"          exact="ware.research_diplomacy_network"/>
        <set_value name="$Seed" min="1L" max="100000L"/>
        <debug_text text="'Initializing Diplomacy Feature'" chance="$DebugChance"/>
        <create_list name="$RequestedDiplomats_FactionList"/>
        <create_group groupname="$DiplomatActorGroup"/>

        <!-- List of Factions that have a diplomat and are currently active -->
        <create_list name="global.$DiplomaticFactions"/>

        <!-- This table (extended in DLCs) defines if a faction can be interacted with diplomatically (faction gain/loss, Diplomats, EventCapability & starting Agent Experience
             It is extended by the various setup_dlc_*** scripts-->
        <do_if value="not $DiplomacyFactionTable?">
          <set_value name="$DiplomacyFactionTable" exact="table[]"/>
        </do_if>
        <set_value name="$DiplomacyFactionTable.{faction.alliance}"          exact="table[$DiplomatAvailable = ['yes', tag.group_14],
                                                                                          $EventCapable = 'no',
                                                                                          $InateAgentExperience = 'negotiation']"/>
        <set_value name="$DiplomacyFactionTable.{faction.antigone}"          exact="table[$DiplomatAvailable = ['yes', tag.group_15],
                                                                                          $EventCapable = 'yes',
                                                                                          $InateAgentExperience = 'negotiation']"/>
        <set_value name="$DiplomacyFactionTable.{faction.argon}"             exact="table[$DiplomatAvailable = ['yes', tag.group_12],
                                                                                          $EventCapable = 'yes',
                                                                                          $InateAgentExperience = 'negotiation']"/>
        <set_value name="$DiplomacyFactionTable.{faction.buccaneers}"        exact="table[$DiplomatAvailable = ['conditional', tag.group_01],
                                                                                          $EventCapable = 'conditional',
                                                                                          $InateAgentExperience = 'espionage']"/>
        <set_value name="$DiplomacyFactionTable.{faction.paranid}"           exact="table[$DiplomatAvailable = ['yes', tag.group_09],
                                                                                          $EventCapable = 'yes',
                                                                                          $InateAgentExperience = 'espionage']"/>
        <set_value name="$DiplomacyFactionTable.{faction.hatikvah}"          exact="table[$DiplomatAvailable = ['yes', tag.group_17],
                                                                                          $EventCapable = 'no',
                                                                                          $InateAgentExperience = 'negotiation']"/>
        <set_value name="$DiplomacyFactionTable.{faction.holyorder}"         exact="table[$DiplomatAvailable = ['yes', tag.group_05],
                                                                                          $EventCapable = 'yes',
                                                                                          $InateAgentExperience = 'espionage']"/>
        <set_value name="$DiplomacyFactionTable.{faction.ministry}"          exact="table[$DiplomatAvailable = ['yes', tag.group_08],
                                                                                          $EventCapable = 'yes',
                                                                                          $InateAgentExperience = 'espionage']"/>
        <set_value name="$DiplomacyFactionTable.{faction.trinity}"           exact="table[$DiplomatAvailable = ['conditional', tag.group_09],
                                                                                          $EventCapable = 'conditional',
                                                                                          $InateAgentExperience = 'espionage']"/>
        <set_value name="$DiplomacyFactionTable.{faction.teladi}"            exact="table[$DiplomatAvailable = ['yes', tag.group_10],
                                                                                          $EventCapable = 'yes',
                                                                                          $InateAgentExperience = 'negotiation']"/>
        <set_value name="$DiplomacyFactionTable.{faction.scaleplate}"        exact="table[$DiplomatAvailable = ['conditional', tag.group_21],
                                                                                          $EventCapable = 'no',
                                                                                          $InateAgentExperience = 'negotiation']"/>
        <set_value name="$DiplomacyFactionTable.{faction.xenon}"             exact="table[$DiplomatAvailable = ['no'],
                                                                                          $EventCapable = 'no',
                                                                                          $InateAgentExperience = 'no_agents']"/>
        <set_value name="$DiplomacyFactionTable.{faction.khaak}"             exact="table[$DiplomatAvailable = ['no'],
                                                                                          $EventCapable = 'no',
                                                                                          $InateAgentExperience = 'no_agents']"/>
        <set_value name="$DiplomacyFactionTable.{faction.holyorderfanatic}"  exact="table[$DiplomatAvailable = ['no'],
                                                                                          $EventCapable = 'no',
                                                                                          $InateAgentExperience = 'no_agents']"/>

        <!-- This table (extended in DLCs) defines all wares that can be used to bribe factions during diplomatic actions
             It is extended by the various setup_dlc_*** scripts-->
        <do_if value="not $DiplomaticBribesTable?">
          <set_value name="$DiplomaticBribesTable" exact="table[]"/>
        </do_if>

        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_spacedyepizza}" other="[faction.alliance]" create="true"/>
        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_finemeal}" other="[faction.alliance, faction.antigone, faction.argon, faction.hatikvah]" create="true"/>
        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_aquaponicvegetable}" other="[faction.alliance]" create="true"/>
        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_microbrewdrink}" other="[faction.alliance, faction.antigone]" create="true"/>
        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_infusedbeverage}" other="[faction.buccaneers]" create="true"/>
        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_neuralstimulator}" other="[faction.paranid, faction.holyorder, faction.ministry, faction.trinity, faction.teladi]" create="true"/>
        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_harmonicresonator}" other="[faction.antigone]" create="true"/>
        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_nividiumjewel}" other="[faction.buccaneers, faction.teladi]" create="true"/>
        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_majaglit}" other="[faction.paranid, faction.holyorder, faction.ministry, faction.trinity]" create="true"/>
        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_rareartefact}" other="[faction.alliance]" create="true"/>
        <append_list_elements name="$DiplomaticBribesTable.{ware.inv_xenotext}" other="[faction.alliance, faction.antigone, faction.argon, faction.paranid, faction.hatikvah, faction.holyorder, faction.trinity, faction.teladi]" create="true"/>

        <!-- Base Game only locked relations
        base_2: Paranid Story
        base_3: Integrated Faction
        dlc2_1: CovOps Story-->
        <do_if value="not md.$TerranEarthFactions.count">
          <!-- set this exclusion only if the Terran DLC is not active. Otherwise setup_dlc_terran.xml will set a more precise exclusion -->
          <set_faction_diplomacy_exclusion faction="faction.argon" otherfaction="faction.antigone" flags="base_3"/>
        </do_if>

        <set_faction_diplomacy_exclusion faction="faction.teladi" otherfaction="faction.ministry" flags="base_3"/>
        <set_faction_diplomacy_exclusion faction="faction.paranid" otherfaction="faction.holyorder" flags="base_2"/>
        <set_faction_diplomacy_exclusion faction="faction.buccaneers" otherfaction="faction.holyorder" flags="base_2"/>
        <set_faction_diplomacy_exclusion faction="faction.buccaneers" otherfaction="faction.paranid" flags="base_2"/>
        <set_faction_diplomacy_exclusion faction="faction.trinity" otherfaction="faction.holyorder" flags="base_3"/>
        <set_faction_diplomacy_exclusion faction="faction.trinity" otherfaction="faction.paranid" flags="base_3"/>
        <set_faction_diplomacy_exclusion faction="faction.trinity" otherfaction="faction.buccaneers" flags="base_3"/>

        <!-- Maximum number of allowed player agents (can potentially be changed by something like a station module) -->
        <set_value name="$PlayerAgentLimit" exact="2"/>

        <!-- Some actions can steal blueprints. This blacklist will be temporarily filled with blueprint wares that we don't want the player to allow access to -->
        <do_if value="not $Diplomacy_StoryBlueprint_Blacklist?">
          <set_value name="$Diplomacy_StoryBlueprint_Blacklist" exact="[]"/>
        </do_if>
      </actions>
      <patch sinceversion="2">
        <!-- In previous versions, players could accidentally get a scaleplate diplomat -->
        <do_if value="md.$FactionData.{faction.scaleplate}.$ActiveDiplomat?">
          <signal_cue_instantly cue="RemoveDiplomatFromHQ" param="[faction.scaleplate, true]"/>
        </do_if>
      </patch>
      <patch sinceversion="3">
        <set_faction_diplomacy_exclusion faction="faction.teladi" otherfaction="faction.ministry" flags="base_3"/>
        <run_actions ref="md.Diplomacy.Diplomacy_ActivateFactionLibrary">
          <param name="Faction" value="faction.ministry"/>
          <param name="DiplomatCapable" value="true"/>
          <param name="EventCapable" value="true"/>
        </run_actions>
      </patch>
      <cues>

        <cue name="DebugCues">
          <cues>

            <cue name="Debug_UnlockAndFillEmbassy">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <signal_cue cue="Debug_UnlockEmbassy"/>
              </actions>
              <delay exact="3s"/>
              <actions>
                <signal_cue cue="Debug_FillEmbassy"/>
                <signal_cue cue="Debug_CheatAllDiplomacyResources"/>
              </actions>
            </cue>

            <cue name="Debug_UnlockEmbassy">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <do_if value="not md.X4Ep1_Mentor_Subscriptions.Start.$HQ?">
                  <signal_cue_instantly cue="md.X4Ep1_Mentor_Subscriptions.Debug_Create_HQ_With_Mentors"/>
                  <signal_cue_instantly cue="md.X4Ep1_Mentor_Subscriptions.UnlockResearch" check="false"/>
                  <cancel_cue           cue="md.X4Ep1_Mentor_Subscriptions.Phase_SignalLeak"/>
                </do_if>
                <do_elseif value="md.X4Ep1_Mentor_Subscriptions.Start.$HQ? and md.Story_Diplomacy_Intro.Pt11_End.state != cuestate.complete">
                  <signal_objects object="md.$PersistentCharacters.$DalBusta" param="'new_hq_interior'" param2="md.$PersistentCharacters.$BosoTa.room"/>
                  <signal_cue_instantly cue="md.Story_Diplomacy_Intro.Pt11_End"/>
                </do_elseif>
                <signal_cue cue="md.NPC_Agent.AgentsActivated"/>
              </actions>
              <delay exact="2s"/>
              <actions>
                <!-- Skips the need to research diplomacy -->
                <signal_cue cue="md.X4Ep1_Mentor_Subscriptions.Manage_EmbassyOffice_Room" check="false"/>
              </actions>
            </cue>

            <cue name="Debug_FillEmbassy">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="$SkipTutorials"/>
                <do_if value="not md.X4Ep1_Mentor_Subscriptions.Start.$HQ?">
                  <signal_cue_instantly cue="md.X4Ep1_Mentor_Subscriptions.Debug_Create_HQ_With_Mentors"/>
                  <signal_cue_instantly cue="md.X4Ep1_Mentor_Subscriptions.UnlockResearch" check="false"/>
                  <cancel_cue           cue="md.X4Ep1_Mentor_Subscriptions.Phase_SignalLeak"/>
                </do_if>
                <do_elseif value="md.X4Ep1_Mentor_Subscriptions.Start.$HQ? and md.Story_Diplomacy_Intro.Pt11_End.state != cuestate.complete">
                  <signal_objects object="md.$PersistentCharacters.$DalBusta" param="'new_hq_interior'" param2="md.$PersistentCharacters.$BosoTa.room"/>
                  <signal_cue_instantly cue="md.Story_Diplomacy_Intro.Pt11_End"/>
                </do_elseif>
                <signal_cue_instantly cue="md.NPC_Agent.AgentsActivated" check="false"/>

                <!-- Cancel both introductory cues -->
                <cancel_cue cue="EmbassyIntroduction"/>
                <cancel_cue cue="AgentIntroduction"/>
              </actions>
              <delay exact="2s"/>
              <actions>
                <!-- Create debug variable that skips delays and npc voice lines -->

                <!-- add the diplomats for factions that are not active on game start -->
                <do_if value="md.$TerranYakiFactions.count" comment="if Terran DLC is active">
                  <set_value name="$DiplomacyFactionTable.{md.$TerranYakiFactions.{1}}.$DiplomatAvailable.{1}" exact="'yes'"/>
                  <debug_text text="@md.$FactionData.{md.$TerranYakiFactions.{1}}.$Representative"/>
                </do_if>
                <do_for_each name="$faction" in="lookup.faction.list">
                  <do_if value="$faction.isactive and
                                @md.$FactionData.{$faction}.$Representative and
                                not $RequestedDiplomats_FactionList.indexof.{$faction} and
                                $DiplomacyFactionTable.{$faction}.$DiplomatAvailable.{1} == 'yes'">
                    <signal_cue_instantly cue="CreateFactionDiplomat" param="md.$FactionData.{$faction}.$Representative"/>
                    <do_if value="not $faction.hasrelation.friend.{faction.player} ">
                      <set_faction_relation faction="$faction" otherfaction="faction.player" value="0.01"/>
                    </do_if>
                    <set_faction_diplomacy_active faction="$faction" active="true" />
                    <debug_text text="'Faction: ' + $faction.knownname + ' Page: ' + md.$FactionData.{$faction}.$Representative.page" chance="$DebugChance"/>
                  </do_if>
                </do_for_each>

                <!-- Unlock the research for both Agent slot expansions -->
                <add_research ware="ware.research_diplomacy_network "/>
                <add_research ware="ware.research_agentslot_01"/>
                <add_research ware="ware.research_agentslot_02"/>
                <set_value name="$PlayerAgentLimit" exact="8"/>

                <!-- Automatically hire agents and move them to the HQ -->
                <do_all exact="8" counter="$i">
                  <set_value name="this.$tempfaction" exact="md.$AgentFactionTable.keys.{$i}"/>
                  <set_value name="this.$AgentActor" exact="md.$AgentFactionTable.{this.$tempfaction}.$AgentActor"/>
                  <run_actions ref="md.NPC_Agent.HelperLibrary_HireAgent">
                    <param name="AgentActor" value="this.$AgentActor"/>
                  </run_actions>
                </do_all>
                <!-- Unlock all generic Agent Actions -->
                <signal_cue cue="Diplomacy_EnableAllGenericActions"/>
              </actions>
              <delay exact="5s"/>
              <actions>
                <!-- After all Diplomats have been spawned assign them with debug ships, remove the debug variable -->
                <get_ship_definition reference="$debug_shipref" size="class.ship_s" faction="faction.argon" tags="tag.scout"/>
                <do_for_each name="$agent" in="md.$PlayerAgentTable">
                  <find_dockingbay name="$debug_hq_dock" object="player.headquarters" checkoperational="true" multiple="false">
                    <match_dock storage="true" size="tag.dock_s"/>
                  </find_dockingbay>
                  <create_ship name="$ship" capturable="true" commandeerable="false" ref="$debug_shipref" dock="$debug_hq_dock">
                    <owner exact="faction.player" overridenpc="true"/>
                    <loadout>
                      <level exact="0.4"/>
                    </loadout>
                  </create_ship>

                  <create_order object="$ship" id="'DockAndWait'">
                    <param name="destination" value="player.headquarters"/>
                  </create_order>
                  <assign_diplomacy_ship ship="$ship" agent="$agent"/>
                </do_for_each>
                <remove_value name="$SkipTutorials"/>
              </actions>
            </cue>

            <cue name="Debug_CheatAllDiplomacyResources">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <apply_player_influence influence="300"/>
                <add_inventory ware="ware.inv_spaceflycaviar" exact="99"/>
                <add_inventory ware="ware.inv_securitybypasssystem" exact="99"/>
                <add_inventory ware="ware.inv_securitydecryptionsystem" exact="99"/>
                <add_inventory ware="ware.inv_securityslicer" exact="99"/>
                <add_inventory ware="ware.inv_electronics" exact="99"/>
                <add_inventory ware="ware.inv_cahoonas" exact="99"/>
                <add_inventory ware="ware.inv_spaceflycaviar" exact="99" entity="player.headquarters.defencenpc"/>
                <add_inventory ware="ware.inv_securitybypasssystem" exact="99" entity="player.headquarters.defencenpc"/>
                <add_inventory ware="ware.inv_securitydecryptionsystem" exact="99" entity="player.headquarters.defencenpc"/>
                <add_inventory ware="ware.inv_securityslicer" exact="99" entity="player.headquarters.defencenpc"/>
                <add_inventory ware="ware.inv_electronics" exact="99" entity="player.headquarters.defencenpc"/>
                <add_inventory ware="ware.inv_cahoonas" exact="99" entity="player.headquarters.defencenpc"/>
                <transfer_money to="faction.player" from="faction.ownerless" amount="350000000Cr"/>

                <do_for_each name="$inv_ware" in="$DiplomaticBribesTable">
                  <add_inventory ware="$inv_ware" exact="99"/>
                </do_for_each>
              </actions>
            </cue>

            <cue name="Debug_AddDiplomacyResearchWares_toHQ">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <create_construction_sequence macros="[
                      macro.struct_tel_cross_01_macro, macro.struct_tel_cross_01_macro, 
                      macro.struct_tel_base_02_macro, macro.struct_tel_base_02_macro, macro.struct_tel_base_02_macro
                    ]" station="$HQ" base="$HQ.plannedconstruction.sequence" comment="async calculation"/>
              </actions>
              <cues>
                <cue name="Debug_HQ_Extend_Phase1_Callback">
                  <conditions>
                    <event_object_construction_sequence_created object="$HQ" />
                  </conditions>
                  <actions>
                    <debug_text text="'Expanding HQ'"/>
                    <set_value name="$ConstructionSequence" exact="event.param" />
                    <apply_construction_sequence station="$HQ" sequence="event.param"/>
                    <signal_cue cue="Debug_HQ_Extend_Phase2"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="Debug_HQ_Extend_Phase2" comment="storage">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <create_construction_sequence macros="[
                              macro.storage_tel_l_container_01_macro, macro.storage_tel_l_container_01_macro, macro.storage_tel_l_container_01_macro
                              ]" station="$HQ" base="$HQ.plannedconstruction.sequence" comment="async calculation"/>
              </actions>
              <cues>
                <cue name="Debug_HQ_Extend_Phase2_Callback">
                  <conditions>
                    <event_object_construction_sequence_created object="$HQ" />
                  </conditions>
                  <actions>
                    <set_value name="$ConstructionSequence" exact="event.param" />
                    <apply_construction_sequence station="$HQ" sequence="$ConstructionSequence"/>
                  </actions>
                  <delay exact="2s"/>
                  <actions>
                    <!-- Add required resources Condensate research -->
                    <add_cargo object="$HQ" ware="ware.advancedcomposites" exact="200"/>
                    <add_cargo object="$HQ" ware="ware.advancedelectronics" exact="1300"/>
                    <add_cargo object="$HQ" ware="ware.energycells" exact="4000"/>
                    <add_cargo object="$HQ" ware="ware.medicalsupplies" exact="13000"/>
                    <add_cargo object="$HQ" ware="ware.microchips" exact="1000"/>
                    <add_cargo object="$HQ" ware="ware.smartchips" exact="5500"/>
                    <add_cargo object="$HQ" ware="ware.foodrations" exact="25000"/>
                  </actions>
                </cue>
              </cues>
            </cue>

          </cues>
        </cue>

        <cue name="SetupCues">
          <cues>

            <cue name="Setup_Remember_HQ_Check" onfail="cancel">
              <conditions>
                <check_value value="md.X4Ep1_Mentor_Subscriptions.UnlockResearch.state == cuestate.complete"/>
              </conditions>
              <actions>
                <signal_cue_instantly cue="Setup_Remember_HQ"/>
              </actions>
            </cue>

            <cue name="Setup_Remember_Dal_Check" onfail="cancel">
              <conditions>
                <check_value value="md.Story_Diplomacy_Intro.Pt11_End.state == cuestate.complete"/>
              </conditions>
              <actions>
                <!-- Dal has already been unlocked, too! -->
                <signal_cue_instantly cue="Setup_Remember_Dal"/>
              </actions>
            </cue>

            <!-- Sets up the HQ and Boso. If Dal is also present, he will be remembered in a separate cue -->
            <cue name="Setup_Remember_HQ">
              <conditions>
                <check_any>
                  <event_cue_signalled/>
                  <event_cue_completed cue="md.X4Ep1_Mentor_Subscriptions.Other_Story_HQ_Handover"/>
                  <event_cue_completed cue="md.X4Ep1_Mentor_Subscriptions.UnlockResearch"/>
                  <event_cue_completed cue="md.X4Ep1_Mentor_Subscriptions.Phase_Boron_Boso_JumpedIntoHE_Introductions"/>
                </check_any>
              </conditions>
              <delay exact="1s"/>
              <actions>
                <!-- Remember Boso/HQ from X4Ep1_Mentor_Subscriptions -->
                <set_value name="$BosoTa" exact="md.$PersistentCharacters.$BosoTa"/>
                <assert value="$BosoTa != null" text="'Boso is null'"/>

                <set_value name="$HQ" exact="md.X4Ep1_Mentor_Subscriptions.Start.$HQ"/>
                <do_if value="md.X4Ep1_Mentor_Subscriptions.Start.$EmbassyRoom?">
                  <set_value name="$EmbassyRoom" exact="md.X4Ep1_Mentor_Subscriptions.Start.$EmbassyRoom"/>
                </do_if>

                <!-- NPC Usecase Setup -->
                <do_if value="not $MissionActors?">
                  <set_value name="$MissionActors" exact="table[]"/>
                </do_if>
                <set_value name="$MissionActors.$BosoTa" exact="table[
                                                            $entity = $BosoTa,
                                                            $monitor = table[
                                                              $cutscenekey = 'ShowCharacterBoron',
                                                              $caption = true
                                                            ]
                                                          ]"/>

                <!-- Owning the HQ unlocks the Embassy and Diplomacy handling -->
                <do_if value="$DiplomacyResearch.research.unlocked">
                  <signal_cue cue="EmbassyCues" check="false"/>
                </do_if>
              </actions>
            </cue>

            <cue name="Setup_Remember_Dal">
              <conditions>
                <check_any>
                  <event_cue_signalled/>
                  <event_cue_completed cue="md.Story_Diplomacy_Intro.Pt11_End"/>
                </check_any>
              </conditions>
              <delay exact="0.5s"/>
              <actions>
                <set_value name="$DalBusta" exact="md.$PersistentCharacters.$DalBusta"/>
                <assert value="$DalBusta != null" text="'DalBusta is null'"/>
                <set_value name="$BosoTa" exact="md.$PersistentCharacters.$BosoTa"/>
                <assert value="$BosoTa != null" text="'Boso is null'"/>

                <set_value name="$HQ" exact="md.X4Ep1_Mentor_Subscriptions.Start.$HQ"/>

                <do_if value="not $MissionActors?">
                  <set_value name="$MissionActors" exact="table[]"/>
                </do_if>

                <set_value name="$MissionActors.$DalBusta" exact="table[
                                                            $entity = $DalBusta,
                                                            $monitor = table[
                                                              $cutscenekey = 'ShowCharacterDal',
                                                              $caption = true
                                                            ]
                                                          ]"/>

              </actions>
            </cue>

          </cues>
        </cue>

        <cue name="CustomGamestart_StoryState" onfail="cancel">
          <conditions>
            <check_value value="player.module == 'custom_budgeted' or player.module == 'custom_creative'"/>
          </conditions>
          <actions>
            <do_if value="gamestart.storystate.story_diplomacy_network">
              <signal_cue_instantly cue="CustomGamestart_IntroductionsDone"/>
            </do_if>
            <do_if value="gamestart.storystate.story_protocol_null">
              <signal_cue_instantly cue="CustomGamestart_ProtocolNull"/>
            </do_if>
          </actions>
        </cue>

        <cue name="CustomGamestart_IntroductionsDone">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <delay exact="1s" comment="delay so that the HQ can be set up"/>
          <actions>
            <set_value name="$SkipTutorials"/>

            <!-- Unlock Embassy Research -->
            <add_research ware="ware.research_diplomacy_network "/>
            <signal_cue_instantly cue="md.X4Ep1_Mentor_Subscriptions.Manage_EmbassyOffice_Room" check="false"/>

            <!-- Activate all diplomatic missions -->
            <signal_cue cue="Diplomacy_EnableAllGenericActions"/>

            <!-- Populate the universe with Agents -->
            <signal_cue_instantly cue="md.NPC_Agent.AgentsActivated" check="false"/>
          </actions>
          <delay exact="3s"/>
          <actions>
            <!-- Cancel the two Introduction cues -->
            <cancel_cue cue="EmbassyIntroduction"/>
            <cancel_cue cue="AgentIntroduction"/>

            <!-- Hire one agent randomly (and equip them with a ship) -->
            <set_value name="this.$tempfaction" exact="md.$AgentFactionTable.keys.random"/>
            <set_value name="this.$AgentActor" exact="md.$AgentFactionTable.{this.$tempfaction}.$AgentActor"/>
            <run_actions ref="md.NPC_Agent.HelperLibrary_HireAgent">
              <param name="AgentActor" value="this.$AgentActor"/>
            </run_actions>

            <get_ship_definition reference="$agent_shipref" size="class.ship_s" faction="faction.argon" tags="tag.scout"/>
            <find_dockingbay name="$hq_dock" object="player.headquarters" checkoperational="true" multiple="false">
              <match_dock storage="true" size="tag.dock_s"/>
            </find_dockingbay>
            <create_ship name="$ship" capturable="true" commandeerable="false" ref="$agent_shipref" dock="$hq_dock">
              <owner exact="faction.player" overridenpc="true"/>
              <loadout>
                <level exact="0.4"/>
              </loadout>
            </create_ship>

            <create_order object="$ship" id="'DockAndWait'">
              <param name="destination" value="player.headquarters"/>
            </create_order>
            <assign_diplomacy_ship ship="$ship" agent="this.$AgentActor"/>
            <remove_value name="$SkipTutorialss"/>
          </actions>
        </cue>

        <cue name="CustomGamestart_ProtocolNull">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <signal_cue_instantly cue="CustomGamestart_IntroductionsDone"/>

            <!-- Unlock Research -->
            <add_research ware="ware.research_interference_network "/>
          </actions>
          <delay exact="6s"/>
          <actions>

            <signal_cue_instantly cue="ProtocolNull_Start" param="md.$PlayerAgentTable.keys.{1}"/>
          </actions>
        </cue>

        <cue name="CustomGamestart_IntroductionUnlocked">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_userdata storystate="'story_diplomacy_network'" value="1"/>
          </actions>
        </cue>

        <!-- After Dal's introduction is done, all standard actions are unlocked -->
        <cue name="Diplomacy_EnableAllGenericActions">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$AgentActionIDList" exact="[
                                                        'improve_relations_low',
                                                        'improve_relations_medium',
                                                        'negotiate_ceasefire',
                                                        'active_station_information',
                                                        'active_ship_information',
                                                        'negotiate_trade_deal',
                                                        'declare_war',
                                                        'build_intelligence_network',
                                                        'steal_blueprint_ship_lxl',
                                                        'steal_blueprint_ship_sm',
                                                        'steal_blueprint_module',
                                                        'steal_blueprint_equipment',
                                                        'spy_station',
                                                        'spy_ship',
                                                        'acquire_inventory_item_low',
                                                        'acquire_inventory_item_medium',
                                                        'acquire_inventory_item_high',
                                                        'initiate_diplomatic_interference',
                                                        ]"/>

            <do_for_each name="$GenericActionID" in="$AgentActionIDList">
              <set_diplomacy_action_hidden action="$GenericActionID" hidden="false"/>
            </do_for_each>
          </actions>
        </cue>

        <library name="Diplomacy_ActivateFactionLibrary" purpose="run_actions">
          <params>
            <param name="Faction"/>
            <param name="DiplomatCapable"/>
            <param name="EventCapable"/>
          </params>
          <actions>
            <do_if value="$DiplomatCapable">
              <set_value name="md.Diplomacy.Start.$DiplomacyFactionTable.{$Faction}.$DiplomatAvailable.{1}" exact="'yes'"/>
            </do_if>
            <do_elseif value="not $DiplomatCapable">
              <set_value name="md.Diplomacy.Start.$DiplomacyFactionTable.{$Faction}.$DiplomatAvailable.{1}" exact="'no'"/>
            </do_elseif>

            <do_if value="$EventCapable">
              <set_value name="md.Diplomacy.Start.$DiplomacyFactionTable.{$Faction}.$EventCapable" exact="'yes'"/>
            </do_if>
            <do_elseif value="not $EventCapable">
              <set_value name="md.Diplomacy.Start.$DiplomacyFactionTable.{$Faction}.$EventCapable" exact="'no'"/>
            </do_elseif>
          </actions>
        </library>

        <!-- Change a faction's entry when it deactivates -->
        <cue name="DiplomacyFactionDeactivated" instantiate="true">
          <conditions>
            <event_faction_deactivated/>
            <check_value value="global.$DiplomaticFactions.indexof.{event.param}"/>
          </conditions>
          <actions>
            <set_value name="this.$DeactivatedFaction" exact="event.param"/>
            <remove_from_list name="global.$DiplomaticFactions" exact="this.$DeactivatedFaction"/>
            <run_actions ref="md.Diplomacy.Diplomacy_ActivateFactionLibrary">
              <param name="Faction" value="this.$DeactivatedFaction"/>
              <param name="DiplomatCapable" value="false"/>
              <param name="EventCapable" value="false"/>
            </run_actions>
            <set_faction_diplomacy_active faction="this.$DeactivatedFaction" active="false"/>
            <set_faction_diplomacy_events_allowed faction="this.$DeactivatedFaction" allow="false"/>
          </actions>
        </cue>

        <!-- Faction Diplomacy and Event Capability Handling -->
        <cue name="Diplomacy_ActiveFactionCheck" instantiate="true" checkinterval="30s">
          <actions>
            <do_if value="$DiplomacyFactionTable?">
              <do_for_each name="this.$faction" valuename="this.$FactionTable" in="$DiplomacyFactionTable">
                <do_if value="this.$faction.isactive">
                  <!-- check if the faction wants to be diplomatically active but isn't yet -->
                  <do_if value="($DiplomacyFactionTable.{this.$faction}.$DiplomatAvailable.{1} == 'yes' and not this.$faction.isdiplomacyactive)">
                    <append_to_list name="global.$DiplomaticFactions" exact="this.$faction"/>
                    <set_faction_diplomacy_active faction="this.$faction" active="true"/>
                  </do_if>

                  <!-- check if a faction is capable of Diplomatic Events but isn't set to do so yet -->
                  <do_if value="($DiplomacyFactionTable.{this.$faction}.$EventCapable == 'yes' and not this.$faction.arediplomacyeventsallowed)">
                    <set_faction_diplomacy_events_allowed faction="this.$faction" allow="true"/>
                  </do_if>
                </do_if>
              </do_for_each>
            </do_if>
          </actions>
        </cue>

        <!-- Triggered after the $HQ Embassy was unlocked -->
        <cue name="EmbassyCues">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$EmbassyRoom" exact="md.X4Ep1_Mentor_Subscriptions.Start.$EmbassyRoom"/>
          </actions>
          <cues>

            <cue name="Embassy_HintCue">
              <conditions>
                <event_object_changed_room object="player.entity" room="$EmbassyRoom"/>
              </conditions>
              <actions>
                <show_help line="1072" position="13" duration="11s"/>
              </actions>
            </cue>

            <cue name="DiplomatManagement" version="5">
              <patch sinceversion="3">
                <!-- In the first few betas there was an issue where the female split diplomats would not spawn properly. Tracked down and fixed the cause, patching for recovery -->
                <do_for_each name="this.$diplomat" in="$DiplomatActorGroup">
                  <do_if value="not this.$diplomat.hascontext.{player.headquarters}">
                    <signal_cue_instantly cue="RemoveDiplomatFromHQ" param="[this.$diplomat.owner, false]"/>
                  </do_if>
                  <do_if value="this.$diplomat.race == race.split and this.$diplomat.isfemale">
                    <set_value name="this.$firstname" exact="[{20302,1301},{20302,1302},{20302,1303},{20302,1304},{20302,1305},{20302,1306}].random"/>
                    <set_value name="this.$lastname" exact="[{20302,1201},{20302,1202},{20302,1203},{20302,1204},{20302,1205},{20302,1206}].random"/>
                    <set_value name="this.$completename" exact="this.$firstname + ' ' + {20302,1100} + this.$lastname"/>
                    <set_object_name object="this.$diplomat" name="this.$completename"/>
                  </do_if>
                </do_for_each>
                <do_for_each name="this.$faction" in="$RequestedDiplomats_FactionList">
                  <do_if value="not md.$FactionData.{this.$faction}.$ActiveDiplomat">
                    <signal_cue_instantly cue="CreateFactionDiplomat" param="md.$FactionData.{this.$faction}.$Representative"/>
                  </do_if>
                </do_for_each>
              </patch>
              <patch sinceversion="4">
                <do_for_each name="this.$faction" in="$RequestedDiplomats_FactionList">
                  <do_if value="(not $DiplomatActorGroup.indexof.{md.$FactionData.{this.$faction}.$ActiveDiplomat})
                                and this.$faction.isactive and this.$faction.hasrelation.friend.{faction.player}">
                    <add_to_group groupname="$DiplomatActorGroup" object="md.$FactionData.{this.$faction}.$ActiveDiplomat"/>
                  </do_if>
                </do_for_each>
              </patch>
              <patch sinceversion="5">
                <!-- Argon Diplomat was accidentally set up as the wrong gender -->
                <do_if value="not md.$FactionData.{faction.argon}.$ActiveDiplomat.isfemale">
                  <set_value name="this.$diplomat" exact="md.$FactionData.{faction.argon}.$ActiveDiplomat"/>
                  <signal_cue_instantly cue="RemoveDiplomatFromHQ" param="[this.$diplomat.owner, true]"/>
                  <signal_cue_instantly cue="CreateFactionDiplomat" param="md.$FactionData.{faction.argon}.$Representative"/>
                </do_if>
              </patch>
              <cues>
                <cue name="DiplomatMovementHandling">
                  <cues>

                    <cue name="CreateFactionDiplomat" instantiate="true">
                      <conditions>
                        <check_any>
                          <event_cue_signalled comment="can be signalled from debug cues"/>
                          <event_cue_signalled cue="DispatchingDiplomat_FactionRep_Reaction"/>
                        </check_any>
                      </conditions>
                      <delay exact="0.1s"/>
                      <actions>

                        <set_value name="this.$Faction" exact="event.param.owner"/>
                        <append_to_list name="$RequestedDiplomats_FactionList" exact="this.$Faction"/>

                        <!-- Only create a Diplomat if the faction doesn't already have one -->
                        <do_if value="not @md.$FactionData.{this.$Faction}.$ActiveDiplomat.exists">

                          <create_cue_actor name="this.$DiplomatActor" cue="namespace">
                            <select faction="this.$Faction" tags="tag.factiondiplomat"/>
                            <owner exact="this.$Faction"/>
                          </create_cue_actor>
                          <set_entity_traits    entity="this.$DiplomatActor" missionactor="true" customhandler="true" subtitlename="true"/>
                          <set_entity_overrides entity="this.$DiplomatActor" title="'Diplomat'" icon="'factionrepresentative'"/>

                          <set_value name="md.$FactionData.{this.$Faction}.$ActiveDiplomat" exact="this.$DiplomatActor"/>
                          <set_diplomat faction="this.$Faction" representative="this.$DiplomatActor"/>
                        </do_if>

                        <add_to_group groupname="$DiplomatActorGroup" object="this.$DiplomatActor" />

                        <do_if value="player.isinconversation">
                          <add_npc_line speaker="md.$FactionData.{this.$Faction}.$ActiveDiplomat"  hidechoices="true" chance="if $SkipTutorials? then 0 else 100">
                            <text line="3001" comment="Accepting the invitation"/>
                          </add_npc_line>
                        </do_if>
                        <signal_cue_instantly cue="MoveDiplomatOntoHQ" param="this.$Faction"/>
                      </actions>
                    </cue>

                    <cue name="MoveDiplomatOntoHQ" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <do_if value="$SkipTutorials?">
                          <set_value name="this.$Delay" exact="0s"/>
                        </do_if>
                        <do_else>
                          <set_value name="this.$Delay" min="30s" max="90s" profile="bell"/>
                        </do_else>
                      </actions>
                      <delay exact="this.$Delay"/>
                      <actions>
                        <set_value name="this.$Faction" exact="event.param"/>

                        <do_if value="$RequestedDiplomats_FactionList.indexof.{this.$Faction} and this.$Faction.isactive" comment="By the time the Diplomat 'arrives', the player could already have declared war on the faction, in which place we don't go through with the placement">
                          <set_value name="this.$DiplomatActor" exact="md.$FactionData.{this.$Faction}.$ActiveDiplomat"/>
                          <set_value name="this.$Faction" exact="this.$DiplomatActor.owner"/>

                          <set_value name="this.$GroupTag" exact="$DiplomacyFactionTable.{this.$Faction}.$DiplomatAvailable.{2}"/>

                          <run_actions ref="md.LIB_Generic.Find_NPC_Slots_By_Group" result="this.$slot">
                            <param name="ObjectOrRoom"        value="$EmbassyRoom"/>
                            <param name="Group"               value="this.$GroupTag"/>
                            <param name="ExcludeBlocked"      value="false"/>
                            <param name="ExcludeFilled"       value="false"/>
                          </run_actions>

                          <do_if value="this.$slot.component.slotactor.{this.$slot}">
                            <!-- If the slot is already occupied, dismiss the previous occupant (may happen in a short window when PRA/HOP are merged into TRI) -->
                            <set_value name="this.$replacedDiplomatFaction" exact="this.$slot.component.slotactor.{this.$slot}.owner" />
                            <signal_cue_instantly cue="RemoveDiplomatFromHQ" param="[this.$replacedDiplomatFaction, false]"/>
                          </do_if>

                          <signal_cue_instantly cue="md.NPC_Instantiation.NPC_Placement_Manager" param="['add_definition', this.$DiplomatActor, table[
                                                                                                                                        $requestercue = namespace,
                                                                                                                                        $priority = 100,
                                                                                                                                        $location = this.$slot,
                                                                                                                                        $debugchance = 0,
                                                                                                                                        $debugcaller = if $DebugChance == 100 then this else null]
                                                                                                                                        ]"/>

                          <do_if value="not $SkipTutorials?">
                            <!-- Give confirmation that the diplomat has arrived in the form of voice lines -->
                            <set_value name="this.$MissionActors" exact="table[]"/>
                            <set_value name="this.$MissionActors.$DiplomatActor" exact="table[
                                                                    $entity = this.$DiplomatActor,
                                                                    $monitor = table[
                                                                      $cutscenekey = 'ShowNPCFace',
                                                                      $caption = true
                                                                    ]
                                                                  ]"/>

                            <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                          $caller = this, $preset = '$plotlike', $actors = this.$MissionActors, $nofullscreenmenu = false, $debugchance = if $DebugChance == 100 then this else null,
                                                                          $script = [
                                                                                    4s,
                                                                                    table[ $actor = '$DiplomatActor', $speak = 3002, $recipient = 'player', $comment = 'Confirmation of arrival.'],
                                                                                    ],
                                                                          ]" />
                          </do_if>
                        </do_if>
                        <do_elseif value="$RequestedDiplomats_FactionList.indexof.{this.$Faction}">
                          <remove_from_list name="$RequestedDiplomats_FactionList" exact="this.$Faction"/>
                        </do_elseif>
                        <!-- Unlock the achievement for inviting a diplomat to your embassy -->
                        <unlock_achievement name="INVITE_DIPLOMAT"/>
                      </actions>
                    </cue>

                    <cue name="RemoveDiplomatFromHQ" instantiate="true">
                      <conditions>
                        <check_any>
                          <event_cue_signalled/>
                          <check_all>
                            <event_faction_relation_changed faction="faction.player"/>
                            <check_value value="$RequestedDiplomats_FactionList.indexof.{event.param2}"/>
                            <check_value value="event.param3.{1} lt -0.01"/>
                          </check_all>
                          <check_all>
                            <event_faction_deactivated/>
                            <check_value value="$RequestedDiplomats_FactionList.indexof.{event.param}"/>
                          </check_all>
                        </check_any>
                      </conditions>
                      <actions>
                        <!-- Different conditions pass the faction through different parameters -->
                        <do_if value="event.param2" comment="Relations deteriorated">
                          <set_value name="this.$Faction" exact="event.param2"/>
                          <set_value name="this.$DiplomatActor" exact="md.$FactionData.{this.$Faction}.$ActiveDiplomat"/>
                          <set_value name="this.$DeleteDiplomat" exact="false"/>

                          <!-- Give confirmation that the diplomat has arrived in the form of voice lines -->
                          <set_value name="this.$MissionActors" exact="table[]"/>
                          <set_value name="this.$MissionActors.$DiplomatActor" exact="table[
                                                                    $entity = this.$DiplomatActor,
                                                                    $monitor = table[
                                                                      $cutscenekey = 'ShowNPCFace',
                                                                      $caption = true
                                                                    ]
                                                                  ]"/>

                          <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                          $caller = this, $preset = '$plotlike', $actors = this.$MissionActors, $nofullscreenmenu = false, $debugchance = if $DebugChance == 100 then this else null,
                                                                          $script = [
                                                                                    2s,
                                                                                    table[ $actor = '$DiplomatActor', $speak = 3003, $recipient = 'player', $comment = 'Notice that the diplomat is leaving.'],
                                                                                    ],
                                                                          ]" />

                        </do_if>
                        <do_else>
                          <set_value name="this.$Faction" exact="event.param.{1}"/>
                          <set_value name="this.$DeleteDiplomat" exact="event.param.{2}"/>
                          <set_value name="this.$DiplomatActor" exact="md.$FactionData.{this.$Faction}.$ActiveDiplomat"/>
                        </do_else>

                        <remove_from_list name="$RequestedDiplomats_FactionList" exact="this.$Faction"/>
                        <do_if value="this.$DeleteDiplomat">
                          <destroy_object object="this.$DiplomatActor" explosion="false" />
                        </do_if>
                        <do_else>
                          <signal_cue_instantly cue="md.NPC_Instantiation.NPC_Placement_Manager" param="['add_definition', this.$DiplomatActor,
                                                                                                                                    table[
                                                                                                                                      $requestercue = namespace,
                                                                                                                                      $priority = 100,
                                                                                                                                      $location = 'disconnect',
                                                                                                                                      $debugchance = $DeepDebugChance,
                                                                                                                                      $debugcaller = if $DebugChance == 100 then this else null]
                                                                                                                                    ]"/>
                        </do_else>
                      </actions>
                    </cue>

                    <cue name="DispatchingDiplomat_FactionRep_Reaction" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <set_value name="this.$FactionRepresentative" exact="event.param"/>
                        <set_value name="this.$Faction" exact="this.$FactionRepresentative.owner"/>

                        <add_npc_line speaker="this.$FactionRepresentative" lookat="player.entity"  hidechoices="true">
                          <text line="5029" comment="Relaying message."/>
                        </add_npc_line>
                      </actions>
                      <cues>

                      </cues>
                    </cue>

                  </cues>
                </cue>

                <cue name="DiplomatConversation">
                  <cues>

                    <cue name="Diplomat_ConversationStarted" instantiate="true">
                      <conditions>
                        <event_conversation_started conversation="default"/>
                        <check_value value="$DiplomatActorGroup.indexof.{event.object}"/>
                      </conditions>
                      <actions>
                        <set_value name="this.$DiplomatActor" exact="event.object"/>
                        <set_value name="this.$Faction" exact="this.$DiplomatActor.owner"/>
                        <debug_text text="'Conversation with ' + this.$DiplomatActor.name + ' (' + this.$Faction.name + ') started'" chance="$DebugChance" />

                        <do_if value="player.room != null and this.$DiplomatActor.room == player.room">
                          <set_value name="$LiveViewAvailable" exact="player.canactivateliveview"/>
                          <add_player_choice text="{1002,3200}" section="cFactionDiplomat_liveStream" tooltip="(if $LiveViewAvailable then '' else {1001,9408})" position="top_right" comment="Show me the Live Stream" selectable="$LiveViewAvailable"/>
                        </do_if>

                        <add_npc_line speaker="this.$DiplomatActor" line="2001" comment="Generic neutral greeting" />
                        <do_if value="not this.$DiplomatActor.owner.hastag.nolicencesale" comment="Some factions (e.g. Kaori) don't offer blueprints">
                          <add_player_choice_sub text="{1002,7000}" section="cFactionDiplomat_licences" position="top_left" choiceparam="[0, 0, this.$DiplomatActor, 'licence']" baseparam="event.param2" comment="Show me your licences" />
                        </do_if>
                        <do_if value="not this.$DiplomatActor.owner.hastag.noblueprintsale" comment="some factions (e.g. Kaori) don't offer blueprints">
                          <add_player_choice_sub text="{1002,7001}" section="cFactionDiplomat_blueprints" position="left" choiceparam="[0, 0, this.$DiplomatActor, 'blueprint']" baseparam="event.param2" comment="I would like to buy a blueprint."/>
                        </do_if>
                        <do_if value="@md.$FactionData.{this.$Faction}.$PromotionActive">
                          <add_player_choice_sub section="cFactionDiplomat_promotion" text="{30003,10005}" position="bottom_left" highlighted="true" />
                        </do_if>
                        <do_if value="md.$AgentFactionTable?">
                          <do_if value="this.$Faction.relationto.{faction.player} ge 0.01
                                         and (md.$AgentFactionTable.{this.$Faction} and md.$AgentFactionTable.{this.$Faction}.$Ownership != 'owned')
                                         and (md.$PlayerAgentTable.keys.count ge 1 or $AgentIntroductionDone?)
                                         and md.$PlayerAgentTable.keys.count lt $PlayerAgentLimit">
                            <add_player_choice_sub section="cFactionDiplomat_agentlocation" text="{1002,12020}.[{20208,11001}]" comment="Way to: Agent" />
                          </do_if>
                        </do_if>
                        <add_player_choice_return text="{1002,2}" position="bottom_right" comment="Goodbye" />
                      </actions>
                    </cue>

                    <cue name="ConversationNextSection" instantiate="true">
                      <conditions>
                        <event_conversation_next_section />
                        <check_value value="$DiplomatActorGroup.indexof.{event.object}"/>
                      </conditions>
                      <actions>
                        <set_value name="this.$DiplomatActor" exact="event.object"/>
                        <do_if value="event.param == 'cFactionDiplomat_licences'">
                          <open_conversation_menu menu="BlueprintOrLicenceTraderMenu" param="event.param2" param2="event.param3" />
                        </do_if>
                        <do_elseif value="event.param == 'cFactionDiplomat_blueprints'">
                          <open_conversation_menu menu="BlueprintOrLicenceTraderMenu" param="event.param2" param2="event.param3"/>
                        </do_elseif>
                        <do_elseif value="event.param == 'cFactionDiplomat_diplomat'">
                          <signal_cue_instantly cue="md.Diplomacy.DispatchingDiplomat_FactionRep_Reaction" param="this.$DiplomatActor" />
                        </do_elseif>
                        <do_elseif value="event.param == 'cFactionDiplomat_promotion'">

                          <signal_cue_instantly cue="md.PlayerReputation.CeremonyEvent" param="[this.$DiplomatActor, 'ceremonystarted']" comment="listened to by md.PlayerReputation.FactionRepresentativePromotionCallback" />
                          <set_value name="$CeremonyUnderway" />

                        </do_elseif>
                        <do_elseif value="event.param == 'cFactionDiplomat_agentlocation'">
                          <set_value name="this.$Faction" exact="this.$DiplomatActor.owner"/>
                          <set_value name="this.$FactionAgent" exact="md.$AgentFactionTable.{this.$Faction}.$AgentActor"/>
                          <signal_cue_instantly cue="md.Guidance.NewTarget" param="[this.$FactionAgent, null, null, true]"/>
                        </do_elseif>
                      </actions>
                    </cue>

                    <cue name="LineSpoken" instantiate="true">
                      <conditions>
                        <event_speak_finished/>
                        <check_value value="$DiplomatActorGroup.indexof.{event.object}"/>
                        <check_value value="$CeremonyUnderway?" />
                      </conditions>
                      <actions>
                        <set_value name="this.$DiplomatActor" exact="event.object"/>
                        <do_if value="event.param2" exact="12117">
                          <debug_text text="'The ceremony is now over'" chance="$DebugChance" />
                          <remove_value name="$CeremonyUnderway" />
                          <set_value name="$CeremonyOver" />
                        </do_if>
                        <do_else>
                          <signal_cue_instantly cue="md.PlayerReputation.CeremonyEvent" param="[this.$DiplomatActor, 'ceremonyline', event.param2]" comment="listened to by md.PlayerReputation.FactionRepresentativePromotionCallback" />
                        </do_else>
                      </actions>
                    </cue>

                    <cue name="ConversationComplete" instantiate="true">
                      <conditions>
                        <event_conversation_finished  />
                        <check_value value="$DiplomatActorGroup.indexof.{event.object}"/>
                      </conditions>
                      <actions>
                        <set_value name="this.$DiplomatActor" exact="event.object"/>
                        <set_value name="this.$Faction" exact="this.$DiplomatActor.owner"/>
                        <do_if value="$CeremonyOver?">
                          <signal_cue_instantly cue="md.PlayerReputation.CeremonyEvent" param="[this.$DiplomatActor, 'ceremonycomplete', event.param2]" comment="listened to by md.PlayerReputation.FactionRepresentativePromotionCallback" />
                          <!--signal_cue_instantly cue="md.PlayerReputation.WritePromotionLogEntry" param="[md.$FactionData.{this.$Faction}.$PromotionActive, this.$DiplomatActor.owner]" /-->
                          <remove_value name="$CeremonyOver" />
                          <debug_text text="this.$DiplomatActor + ' has finished promoting player - mission will be completed now.'" chance="$DebugChance" />
                          <remove_value name="md.$FactionData.{this.$Faction}.$PromotionActive"/>
                        </do_if>
                        <do_else>
                          <debug_text text="'Player left conversation without finishing ceremony - it will remain in place'" chance="$DebugChance" />
                        </do_else>
                        <do_if value="this.$Faction.relationto.{faction.player} ge 0.01" comment="Player is a friend of the faction">
                          <set_value name="$NPCLine" exact="2007" comment="(Goodbye - friendly)" />
                        </do_if>
                        <do_else>
                          <set_value name="$NPCLine" exact="2008" comment="(Goodbye - neutral)" />
                        </do_else>
                        <speak actor="this.$DiplomatActor" line="$NPCLine" />
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <cue name="EmbassyIntroduction" checkinterval="30s">
              <conditions>
                <check_any exact="md.$FactionData.keys.count" counter="$i">
                  <check_all>
                    <check_value value="@md.$FactionData.{md.$FactionData.keys.{$i}}.$Representative"/>
                    <check_value value="md.$FactionData.keys.{$i}.hasrelation.friend.{faction.player} and md.$FactionData.keys.{$i}.isactive"/>
                    <check_value value="player.entity.gatedistance.{md.$FactionData.{md.$FactionData.keys.{$i}}.$Headquarters} le 2"/>
                    <check_value value="not @$AgentIntroduction_MissionCue.hasguidance"/>
                    <check_value value="player.age ge (md.$LastMentorSpeak + 1min)"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <do_for_each name="$faction" in="md.$FactionData">
                  <do_if value="$faction.isactive and $faction.hasrelation.friend.{faction.player} and player.entity.gatedistance.{md.$FactionData.{$faction}.$Headquarters} le 2">
                    <set_value name="$EmbassyIntro_Faction" exact="$faction"/>
                    <set_value name="$EmbassyIntro_Rep" exact="md.$FactionData.{$faction}.$Representative"/>
                    <break/>
                  </do_if>
                </do_for_each>
              </actions>
              <cues>

                <cue name="EmbassyIntro_CreateMission">
                  <delay exact="0.5s"/>
                  <actions>
                    <set_value name="$EmbassyIntro_MissionCue" exact="this"/>
                    <set_value name="$EmbassyIntro_ObjectiveStep" exact="1"/>
                    <create_mission comment="Embassy Intro Mission"
                                          name="{30296,1001}" description="{30296,1002}" rewardtext="{30296,1003}"
                                          icon="'briefing_boso_ta_01'" iconcaption="$BosoTa.name"
                                          faction="$EmbassyIntro_Faction" difficulty="level.veryeasy"
                                          cue="$EmbassyIntro_MissionCue" abortable="true" type="missiontype.plot">
                      <briefing>
                        <objective step="1" action="objective.custom" customaction="{30296,1011}" object="$EmbassyIntro_Rep" showunknownpath="true" suggestdocking="true"/>
                      </briefing>
                    </create_mission>
                    <set_objective_from_briefing cue="$EmbassyIntro_MissionCue" step="$EmbassyIntro_ObjectiveStep"/>
                  </actions>
                  <cues>

                    <cue name="EmbassyIntro_Boso_IntroCall_v2">
                      <conditions>
                        <event_cue_completed cue="EmbassyIntro_CreateMission"/>
                      </conditions>
                      <actions>
                        <!-- Boso tells the player they can invite a diplomat-->
                        <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                              $caller = this, $preset = '$plot', $actors = $MissionActors, $debugchance = $DeepDebugChance, $missioncue = $EmbassyIntro_MissionCue,
                                                                              $script = [
                                                                                        table[ $actor = '$BosoTa', $speak = 302960107, $recipient = 'player', $comment = 'I hope this finds you well!'],
                                                                                        table[ $actor = '$BosoTa', $speak = 302960108, $recipient = 'player', $comment = 'With your newly acquired expertise, you may now invite diplomats from friendly factions to your Headquarters.'],
                                                                                        ],
                                                                              ]" />
                      </actions>
                    </cue>

                    <cue name="EmbassyIntro_FactionDeactivated">
                      <conditions>
                        <event_faction_deactivated faction="$EmbassyIntro_Faction"/>
                      </conditions>
                      <actions>
                        <remove_mission cue="$EmbassyIntro_MissionCue" reason="failed"/>
                      </actions>
                      <cues>

                        <cue name="EmbassyIntro_FindNewFaction">
                          <actions>
                            <set_value name="this.$jumpgatedistance" exact="1000"/>
                            <do_for_each name="$faction" in="md.$FactionData">
                              <do_if value="$faction.isactive and $faction.hasrelation.friend.{faction.player}">
                                <do_if value="player.entity.gatedistance.{md.$FactionData.{$faction}.$Headquarters} le this.$jumpgatedistance">
                                  <set_value name="this.$jumpgatedistance" exact="player.entity.gatedistance.{md.$FactionData.{$faction}.$Headquarters}"/>
                                  <set_value name="$EmbassyIntro_Faction" exact="$faction"/>
                                  <set_value name="$EmbassyIntro_Rep" exact="md.$FactionData.{$faction}.$Representative"/>
                                  <set_value name="this.$success"/>
                                </do_if>
                              </do_if>
                            </do_for_each>
                            <do_if value="this.$success?">
                              <reset_cue cue="EmbassyIntro_CreateMission"/>
                            </do_if>
                          </actions>
                          <delay exact="5min"/>
                          <actions>
                            <reset_cue cue="this"/>
                          </actions>
                        </cue>

                      </cues>
                    </cue>

                    <!-- This is an optional tutorial type mission, so we allow (and have to handle) aborting the mission -->
                    <cue name="EmbassyIntro_Aborted">
                      <conditions>
                        <event_mission_aborted cue="$EmbassyIntro_MissionCue"/>
                      </conditions>
                      <actions>
                        <cancel_cue cue="EmbassyIntroduction"/>
                      </actions>
                    </cue>

                    <!-- The player has requested a Diplomat, so we can end this mission -->
                    <cue name="EmbassyIntro_DiplomatRequested">
                      <conditions>
                        <event_cue_signalled cue="DispatchingDiplomat_FactionRep_Reaction"/>
                      </conditions>
                      <actions>
                        <set_value name="$DiplomatIntroductionDone"/>
                        <!-- Have Boso give some feedback a few moments after the Diplomat was requested -->
                        <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                            $caller = this, $preset = '$plot', $actors = $MissionActors, $debugchance = $DeepDebugChance, $missioncue = $EmbassyIntro_MissionCue,
                                                                            $script = [
                                                                                      3s,
                                                                                      table[ $actor = '$BosoTa', $speak = 302960109, $recipient = 'player', $comment = 'Diplomats are authorized by their governments to ratify blueprint sales.'],
                                                                                      table[ $actor = '$BosoTa', $speak = 302960110, $recipient = 'player', $comment = 'They may also organize promotional ceremonies on behalf of their factions - this means youd be climbing the ladder!'],
                                                                                      table[ $actor = '$BosoTa', $speak = 302960111, $recipient = 'player', $comment = 'Good-faith participation is, of course, anticipated; should relations deteriorate, foreign diplomats may be recalled.'],
                                                                                      ],
                                                                            $callbackcue = EmbassyIntro_MissionEnded,
                                                                            $abortcallbackcue = EmbassyIntro_MissionEnded
                                                                            ]" />
                        <do_if value="$AgentIntroductionDone?">
                          <signal_cue cue="CustomGamestart_IntroductionUnlocked"/>
                        </do_if>
                      </actions>
                    </cue>

                    <cue name="EmbassyIntro_MissionEnded">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <remove_mission cue="$EmbassyIntro_MissionCue" type="completed"/>
                      </actions>
                    </cue>

                  </cues>
                </cue>

              </cues>
            </cue>

            <cue name="AgentManagement_Check" onfail="cancel">
              <conditions>
                <check_value value="md.Story_Diplomacy_Intro.Pt11_End.state == cuestate.complete"/>
              </conditions>
              <actions>
                <signal_cue cue="AgentManagement"/>
              </actions>
            </cue>

            <cue name="AgentManagement">
              <conditions>
                <check_any>
                  <event_cue_signalled/>
                  <event_cue_completed cue="Setup_Remember_Dal"/>
                </check_any>
              </conditions>
              <cues>

                <cue name="AgentExpansionCues">
                  <actions>
                    <!-- The Embassy was unlocked, now add the two extension research wares -->
                    <add_encyclopedia_entry type="researchables" item="'research_agentslot_01'"/>
                    <add_encyclopedia_entry type="researchables" item="'research_agentslot_02'"/>
                  </actions>
                  <cues>

                    <cue name="AgentExpansion_CheckResearchStatus">
                      <actions>
                        <!-- Check the state of research on game startup, once -->
                        <do_if value="ware.research_agentslot_01.research.unlocked">
                          <set_value name="$PlayerAgentLimit" operation="add" exact="2"/>
                        </do_if>
                        <do_if value="ware.research_agentslot_02.research.unlocked">
                          <set_value name="$PlayerAgentLimit" operation="add" exact="4"/>
                        </do_if>

                        <do_if value="$PlayerAgentLimit ge 8">
                          <set_value name="$PlayerAgentLimit" exact="8" comment="debug cues could set the max limit higher, so reset to 8 to make sure"/>
                          <!-- All research already completed, we don't need to listen for more -->
                          <cancel_cue cue="this"/>
                        </do_if>
                      </actions>
                      <cues>

                        <cue name="AgentExpansion_AgentLimit_Research_01_Completed">
                          <conditions>
                            <event_player_production_finished research="true"/>
                            <check_value value="event.param2 == ware.research_agentslot_01"/>
                          </conditions>
                          <actions>
                            <set_value name="$PlayerAgentLimit" operation="add" exact="2"/>
                            <signal_cue cue="AgentExpansion_BosoConfirmation"/>
                          </actions>
                        </cue>

                        <cue name="AgentExpansion_AgentLimit_Research_02_Completed">
                          <conditions>
                            <event_player_production_finished research="true"/>
                            <check_value value="event.param2 == ware.research_agentslot_02"/>
                          </conditions>
                          <actions>
                            <set_value name="$PlayerAgentLimit" operation="add" exact="4"/>
                            <signal_cue cue="AgentExpansion_BosoConfirmation"/>
                          </actions>
                        </cue>

                        <cue name="AgentExpansion_BosoConfirmation" instantiate="true">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <set_value name="$ResearchLine" exact="[30201172, 30201173].random"/>
                            <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                                  $caller = this, $preset = '$plotlike', $actors = $MissionActors, $debugchance = $DeepDebugChance,
                                                                                  $script = [
                                                                                            table[ $actor = '$BosoTa', $speak = $ResearchLine, $recipient = 'player', ],
                                                                                            ],
                                                                                  ]" />
                          </actions>
                        </cue>

                      </cues>
                    </cue>

                  </cues>
                </cue>

                <cue name="AgentIntroduction">
                  <cues>

                    <cue name="AgentIntroduction_ResetCue">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <delay exact="event.param"/>
                      <actions>
                        <signal_cue cue="AgentIntroduction_CreateMission"/>
                        <reset_cue cue="this"/>
                      </actions>
                    </cue>

                    <cue name="AgentIntroduction_Dal_IntroCall" checkinterval="30s">
                      <conditions>
                        <check_value value="not player.isinfullscreenmenu"/>
                        <check_value value="not player.isinconversation"/>
                        <check_value value="not player.isscreenshotmode"/>
                        <check_value value="not md.$MissionDND.count"/>
                        <check_value value="player.age ge (md.$LastMentorSpeak + 5min)"/>
                        <check_value value="not @$EmbassyIntro_MissionCue.hasguidance"/>
                        <check_value value="not $SkipTutorials?" comment="Don't trigger this mission if it was a debug case"/>
                        <!-- We do not want to gate the Agent Actions behind inviting a diplomat anymore -->
                        <!--<check_value value="$DiplomatActorGroup.count ge 1"/>-->
                      </conditions>
                      <delay exact="0.5s"/>
                      <actions>
                        <signal_cue cue="AgentIntroduction_CreateMission"/>
                      </actions>
                    </cue>

                    <cue name="AgentIntroduction_CreateMission">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <add_to_group groupname="$AgentStationGroup" group="md.$AgentTrackedContrainerGroup"/>
                        <do_for_each name="$station" in="$AgentStationGroup" reverse="true">
                          <do_if value="$station.owner.relationto.{faction.player} le -0.01 or player.entity.gatedistance.{$station.sector} lt 0 ">
                            <remove_from_group group="$AgentStationGroup" object="$station"/>
                          </do_if>
                        </do_for_each>

                        <do_if value="$AgentStationGroup.count lt 1">
                          <!-- The player cannot dock at any station with an agent at the moment, reset and rerun this cue later -->
                          <signal_cue_instantly cue="AgentIntroduction_ResetCue" param="15min"/>
                          <reset_cue cue="this"/>
                        </do_if>
                        <do_else>
                          <sort_group group="$AgentStationGroup" sortbygatedistancefrom="player.entity"/>
                          <set_value name="$StationGroupRandomiser" exact="[[1,2,3].random,$AgentStationGroup.count].min" comment="randomly select one of the closest three stations"/>
                          <set_value name="$AgentStation" exact="$AgentStationGroup.{$StationGroupRandomiser}"/>
                          <remove_value name="$AgentStationGroup"/>
                        </do_else>

                        <set_value name="$AgentIntroduction_Faction" exact="$AgentStation.owner"/>
                        <set_value name="$Intro_Agent" exact="md.$AgentFactionTable.{$AgentIntroduction_Faction}.$AgentActor"/>

                        <set_value name="$AgentIntroduction_MissionCue" exact="this"/>
                        <set_value name="$AgentIntroduction_ObjectiveStep" exact="1"/>
                        <create_mission comment="Embassy Intro Mission"
                                              name="{30296,2001}" description="{30296,2002}" rewardtext="{30296,2003}"
                                              icon="'briefing_dal_busta_01'" iconcaption="$DalBusta.name"
                                              faction="$AgentIntroduction_Faction" difficulty="level.veryeasy"
                                              cue="$AgentIntroduction_MissionCue" abortable="false" type="missiontype.plot">
                          <briefing>
                            <objective step="1" action="objective.custom" customaction="{30296,2011}" object="$Intro_Agent" showunknownpath="true" suggestdocking="true"/>
                          </briefing>
                        </create_mission>
                        <set_objective_from_briefing cue="$AgentIntroduction_MissionCue" step="$AgentIntroduction_ObjectiveStep"/>
                      </actions>
                      <cues>

                        <cue name="AgentIntroduction_AgentDestroyed_ResetCue">
                          <conditions>
                            <event_object_destroyed object="$Intro_Agent"/>
                            <check_value value="AgentIntroduction_AgentHired.state == cuestate.waiting"/>
                          </conditions>
                          <actions>
                            <set_value name="$RepeatedDalIntroMission"/>
                            <signal_cue_instantly cue="AgentIntroduction_ResetCue" param="1s"/>
                            <reset_cue cue="parent"/>
                          </actions>
                        </cue>

                        <cue name="AgentIntroduction_DalBusta_Speech" onfail="cancel">
                          <conditions>
                            <check_value value="not $RepeatedDalIntroMission?"/>
                          </conditions>
                          <actions>
                            <!-- Dal reaches out and lets the player know that they can hire an agent -->
                            <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                            $caller = this, $preset = '$plot', $actors = $MissionActors, $debugchance = $DeepDebugChance, $missioncue = $AgentIntroduction_MissionCue,
                                                                            $script = [
                                                                                      table[ $actor = '$DalBusta', $speak = 302960201, $recipient = 'player', $comment = 'Hey, partner! Now that youve dipped your toe into foreign affairs, you may consider hiring specially trained agents who offer their services at major stations.'],
                                                                                      table[ $actor = '$DalBusta', $speak = 302960202, $recipient = 'player', $comment = 'Naturally, after all this time in the business, Ive come to rely on a few trusted providers; one of them has recently reached out to me and Id like to recommend their services.'],
                                                                                      ],
                                                                            ]" />
                          </actions>
                        </cue>

                        <cue name="AgentIntroductionFallback_Check" onfail="cancel">
                          <conditions>
                            <check_value value="player.entity.hascontext.{$AgentStation}"/>
                          </conditions>
                          <actions>
                            <signal_cue cue="AgentIntroductionFallback"/>
                          </actions>
                        </cue>

                        <!-- If for come reason the Agent that the mission points to was not properly spawned in one of the dynamic rooms, place them on the dock -->
                        <cue name="AgentIntroductionFallback">
                          <conditions>
                            <check_any>
                              <event_cue_signalled/>
                              <event_object_changed_object object="player.entity" newobject="$AgentStation"/>
                              <check_all>
                                <event_object_docked_at container="$AgentStation"/>
                                <check_value value="event.param == player.ship"/>
                              </check_all>
                            </check_any>
                            <check_value value="$Intro_Agent.room == $AgentStation.controlroom"/>
                          </conditions>
                          <actions>
                            <!-- Find an empty agent slot at the dock -->
                            <find_room name="$managersoffice" object="$AgentStation" roomtype="roomtype.manager"/>
                            <find_npc_slot name="this.$slot" object="$managersoffice" tags="tag.service" excludeblocked="true" excludefilled="true" multiple="false"/>
                            <do_if value="this.$slot">
                              <add_actor_to_room actor="$Intro_Agent" slot="this.$slot" result="this.$AgentMoved"/>
                            </do_if>
                            <do_else>
                              <add_actor_to_room actor="$Intro_Agent" object="$managersoffice" result="this.$AgentMoved"/>
                            </do_else>
                          </actions>
                          <cues>

                            <cue name="AgentIntroductionFallback_Cleanup">
                              <conditions>
                                <event_object_destroyed object="$managersoffice.dynamicinterior" method="killmethod.removed"/>
                                <check_value value="not event.param3"/>
                              </conditions>
                              <actions>
                                <do_if value="$Intro_Agent.hascontext.{$managersoffice.dynamicinterior}">
                                  <add_actor_to_room actor="$Intro_Agent" object="$AgentStation.controlroom" result="this.$AgentMoved" />
                                  <debug_text text="'Agent ' + $Intro_Agent + ' was in an interior which was to be removed. Rescue them! Now in ' + $AgentStation + ' ' + $AgentStation.knownname"/>
                                </do_if>
                                <reset_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="AgentIntroduction_AgentHired">
                      <conditions>
                        <event_cue_signalled comment="signalled from the NPC_Agent script"/>
                      </conditions>
                      <actions>
                        <do_if value="$AgentIntroduction_MissionCue?">
                          <!-- Dal congratulates the player on acquiring an Agent -->
                          <do_if value="$Intro_Agent == event.param">
                            <!-- This is the exact agent Dal wanted to hire -->
                            <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                              $caller = this, $preset = '$plot', $actors = $MissionActors, $nofullscreenmenu = false, $debugchance = $DeepDebugChance, $missioncue = $AgentIntroduction_MissionCue,
                                                                              $script = [
                                                                                        table[ $actor = '$DalBusta', $speak = 302960203, $recipient = 'player', $comment = 'Excellent. Ive relied on this agents services for quite some time and have never been disappointed.'],
                                                                                        ],
                                                                              ]" />
                          </do_if>
                          <do_else>
                            <!-- The player decided to hire someone else -->
                            <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                            $caller = this, $preset = '$plot', $actors = $MissionActors, $nofullscreenmenu = false, $debugchance = $DeepDebugChance, $missioncue = $AgentIntroduction_MissionCue,
                                                                            $script = [
                                                                                      table[ $actor = '$DalBusta', $speak = 302960205, $recipient = 'player', $comment = 'Well now - you still manage to surprise me occasionally!'],
                                                                                      table[ $actor = '$DalBusta', $speak = 302960206, $recipient = 'player', $comment = 'I havent had much experience with the agent you just commissioned, but I trust your judgment.'],
                                                                                      table[ $actor = '$DalBusta', $speak = 302960207, $recipient = 'player', $comment = 'Just remember: staying vigilant is paramount.'],
                                                                                      ],
                                                                            ]" />
                          </do_else>
                          <!-- Update mission briefing -->
                          <update_mission cue="$AgentIntroduction_MissionCue">
                            <briefing>
                              <objective step="1" action="objective.custom" customaction="{30296,2011}" object="$Intro_Agent" />
                              <objective step="2" action="objective.custom" customaction="{30296,2012}" />
                              <objective step="3" action="objective.custom" customaction="{30296,2013}"/>
                            </briefing>
                          </update_mission>
                        </do_if>
                        <do_else>
                          <!-- The player hired someone before Dal could start the mission-->
                          <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                            $caller = this, $preset = '$plotlike', $actors = $MissionActors, $nofullscreenmenu = false, $debugchance = $DeepDebugChance,
                                                                            $script = [
                                                                                      table[ $actor = '$DalBusta', $speak = 302960208, $recipient = 'player', $comment = 'Hello! Ive been meaning to talk with you about a scheme Ive been poring over for a while... one thatll require hiring an agent.'],
                                                                                      table[ $actor = '$DalBusta', $speak = 302960209, $recipient = 'player', $comment = 'I see youve already started making connections on your own. Good!'],
                                                                                      ],
                                                                            ]" />
                          <!-- Cancel some cues -->
                          <cancel_cue cue="AgentIntroduction_ResetCue"/>
                          <cancel_cue cue="AgentIntroduction_Dal_IntroCall"/>
                          <cancel_cue cue="AgentIntroductionFallback"/>
                          <!-- Set up the mission for the second half of the introduction -->

                          <set_value name="$AgentIntroduction_Faction" exact="faction.argon"/>
                          <set_value name="$Intro_Agent" exact="md.$AgentFactionTable.{faction.argon}.$AgentActor"/>

                          <set_value name="$AgentIntroduction_MissionCue" exact="this"/>
                          <set_value name="$AgentIntroduction_ObjectiveStep" exact="1"/>
                          <create_mission comment="Embassy Intro Mission"
                                                name="{30296,2001}" description="{30296,2002}" rewardtext="{30296,2003}"
                                                icon="'briefing_dal_busta_01'" iconcaption="$DalBusta.name"
                                                faction="$AgentIntroduction_Faction" difficulty="level.veryeasy"
                                                cue="$AgentIntroduction_MissionCue" abortable="false" type="missiontype.plot">
                            <briefing>
                              <objective step="1" action="objective.custom" customaction="{30296,2011}" object="$Intro_Agent" />
                              <objective step="2" action="objective.custom" customaction="{30296,2012}" />
                              <objective step="3" action="objective.custom" customaction="{30296,2013}"/>
                            </briefing>
                          </create_mission>
                        </do_else>
                        <signal_cue cue="AgentIntroduction_AssignShip"/>
                      </actions>
                    </cue>

                    <cue name="AgentIntroduction_AssignShip">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <set_value name="$AgentIntroduction_ObjectiveStep" operation="add" exact="1"/>
                        <set_objective_from_briefing cue="$AgentIntroduction_MissionCue" step="$AgentIntroduction_ObjectiveStep"/>
                        <show_help_overlay id="'diplomacy_agent_ship'" highlightonly="true"/>

                        <!-- Spawm a ship at the player-hq that can be used for this first assignment (but the player is not required to use the ship) -->
                        <find_dockingbay name="$debug_hq_dock" object="player.headquarters" checkoperational="true" multiple="false">
                          <match_dock storage="true" size="tag.dock_s"/>
                        </find_dockingbay>
                        <create_ship name="$AgentShip_Gift" capturable="true" commandeerable="false" macro="macro.ship_arg_s_scout_01_a_macro" dock="$debug_hq_dock">
                          <owner exact="faction.player" overridenpc="true"/>
                          <loadout ref="diplomacy_agent_introduction_gift"/>
                        </create_ship>

                        <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                          $caller = this, $preset = '$plot', $actors = $MissionActors, $nofullscreenmenu = false, $debugchance = $DeepDebugChance, $missioncue = $AgentIntroduction_MissionCue,
                                                                          $script = [
                                                                                    table[ $actor = '$DalBusta', $speak = 302960210, $recipient = 'player', $comment = 'First, youll need to assign an agent to a ship that is currently docked at your headquarters.'],
                                                                                    table[ $actor = '$DalBusta', $speak = 302960212, $recipient = 'player', $comment = 'Since this is the first time youve hired an agent, Ive taken the freedom to arrange such a ship for your convenience!'],
                                                                                    ],
                                                                          ]" />
                      </actions>
                      <cues>

                        <!-- The player has assigned any ship to the diplomat -->
                        <cue name="AgentIntroduction_AssignShip_Completed" checkinterval="1s">
                          <conditions>
                            <check_any>
                              <check_all exact="md.$PlayerAgentTable.keys.count" counter="$j">
                                <check_value value="md.$PlayerAgentTable.keys.{$j}.diplomacy.ship" comment="at least one agent has a ship assigned to them"/>
                              </check_all>
                            </check_any>
                          </conditions>
                          <actions>
                            <remove_help_overlay id="'diplomacy_agent_ship'"/>
                            <signal_cue cue="AgentIntroduction_GatherInfluence"/>
                          </actions>
                        </cue>

                      </cues>
                    </cue>

                    <!-- Dal asks the player to trigger a Cultivate Influence action -->
                    <cue name="AgentIntroduction_GatherInfluence">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <set_value name="$AgentIntroduction_ObjectiveStep" operation="add" exact="1"/>
                        <set_objective_from_briefing cue="$AgentIntroduction_MissionCue" step="$AgentIntroduction_ObjectiveStep"/>

                        <!-- Dal explains agent actions -->
                        <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                          $caller = this, $preset = '$plot', $actors = $MissionActors, $nofullscreenmenu = false, $debugchance = $DeepDebugChance, $missioncue = $AgentIntroduction_MissionCue,
                                                                          $script = [
                                                                                    table[ $actor = '$DalBusta', $speak = 302960213, $recipient = 'player', $comment = 'Not everything can be solved by military intervention; some issues require subtle coercion, economic manipulation, or other covert maneuvers.',],
                                                                                    table[ $actor = '$DalBusta', $speak = 302960216, $recipient = 'player', $comment = 'Always maintain plausible deniability - which is why you hire agents to handle this delicate work!',],
                                                                                    table[ $actor = '$DalBusta', $speak = 302960217, $recipient = 'player', $comment = 'Of course, many of these operations require some amount of influence to succeed.',],
                                                                                    table[ $actor = '$DalBusta', $speak = 302960218, $recipient = 'player', $comment = 'Think of it as currency in the shadows - and like any currency, you need to start building your reserves.',],
                                                                                    table[ $actor = '$DalBusta', $speak = 302960219, $recipient = 'player', $comment = 'Time to cultivate some influence and establish yourself as someone worth knowing!',],
                                                                                    ],
                                                                          ]" />

                        <!-- Show hint to open Diplomacy UI -->
                        <show_help_overlay id="'diplomacy_sidebar_embassy'" highlightonly="true"/>
                      </actions>
                      <cues>

                        <cue name="AgentIntroduction_OverlayHandling">
                          <cues>
                            <cue name="AgentIntroduction_MenuClosedPrematurely" instantiate="true">
                              <conditions>
                                <event_ui_triggered control="'menu_close'"/>
                              </conditions>
                              <actions>
                                <show_help_overlay id="'toplevel_diplomacy'" highlightonly="true"/>
                                <show_help_overlay id="'diplomacy_sidebar_embassy'" highlightonly="true"/>
                              </actions>
                            </cue>

                            <cue name="AgentIntroduction_ToplevelDiplomacyUI_Opened" instantiate="true">
                              <conditions>
                                <event_ui_triggered control="'DiplomacyMenu'"/>
                              </conditions>
                              <actions>
                                <remove_help_overlay id="'toplevel_diplomacy'"/>
                              </actions>
                            </cue>

                            <cue name="AgentIntroduction_AgentActionUISidebar_Opened" instantiate="true">
                              <conditions>
                                <event_ui_triggered control="'embassy'" screen="'DiplomacyMenu'"/>
                              </conditions>
                              <actions>
                                <remove_help_overlay id="'diplomacy_sidebar_embassy'"/>
                              </actions>
                            </cue>
                          </cues>
                        </cue>

                        <cue name="AgentIntroduction_ActionStarted">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'cultivate_influence'"/>
                          </conditions>
                          <actions>
                            <set_value name="$AgentIntroduction_ObjectiveStep" operation="add" exact="1"/>
                            <set_objective cue="$AgentIntroduction_MissionCue" step="$AgentIntroduction_ObjectiveStep" action="objective.custom" customaction="{30296,2014}" updatebriefing="true"/>

                            <remove_help_overlay all="true"/>
                            <cancel_cue cue="AgentIntroduction_OverlayHandling"/>
                          </actions>
                        </cue>

                        <cue name="AgentIntroduction_ActionFinished">
                          <conditions>
                            <event_diplomacy_action_operation_completed/>
                            <check_value value="event.param.action.id == 'cultivate_influence'"/>
                          </conditions>
                          <actions>
                            <!-- Dal chimes in and releases the player into the feature -->
                            <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                              $caller = this, $preset = '$plot', $actors = $MissionActors, $nofullscreenmenu = false, $debugchance = $DeepDebugChance, $missioncue = $AgentIntroduction_MissionCue,
                                                                              $script = [
                                                                                        table[ $actor = '$DalBusta', $speak = 302960220, $recipient = 'player', $comment = 'Alright! Your agent has completed the mission and returned to base. The operation went smoothly and boosted your influence considerably.'],
                                                                                        table[ $actor = '$DalBusta', $speak = 302960221, $recipient = 'player', $comment = 'This opens up even more sophisticated operations - check out whats now become available!'],
                                                                                        ],
                                                                              ]" />

                            <!-- Unlock all Agent Actions -->
                            <signal_cue cue="Diplomacy_EnableAllGenericActions"/>

                            <!-- Change objective again -->
                            <set_value name="$AgentIntroduction_ObjectiveStep" operation="add" exact="1"/>
                            <set_objective cue="$AgentIntroduction_MissionCue" step="$AgentIntroduction_ObjectiveStep" action="objective.custom" customaction="{30296,2015}" updatebriefing="true"/>
                          </actions>
                          <cues>

                            <!-- More details for how actions work -->
                            <cue name="AgentIntroduction_MoreActionsExplained">
                              <conditions>
                                <event_ui_triggered control="'embassy'" screen="'DiplomacyMenu'"/>
                                <check_value value="$AgentIntroduction_MissionCue.hasmission"/>
                              </conditions>
                              <actions>
                                <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                              $caller = this, $preset = '$plot', $actors = $MissionActors, $nofullscreenmenu = false, $debugchance = $DeepDebugChance, $missioncue = $AgentIntroduction_MissionCue,
                                                                              $script = [
                                                                                        table[ $actor = '$DalBusta', $speak = 302960222, $recipient = 'player', $comment = 'Youll notice that these operations require your agents to be either skilled negotiators or outright spies. While espionage is riskier, its less costly and offers greater rewards.'],
                                                                                        table[ $actor = '$DalBusta', $speak = 302960223, $recipient = 'player', $comment = 'As your agents take on more missions, theyll gain experience and improve their success rates.'],
                                                                                        table[ $actor = '$DalBusta', $speak = 302960224, $recipient = 'player', $comment = 'You dont have to limit yourself to hiring just one agent - different objectives may require different skill sets!'],
                                                                                        table[ $actor = '$DalBusta', $speak = 302960225, $recipient = 'player', $comment = 'If you can provide accommodation, you can hire new personnel into your service.'],
                                                                                        table[ $actor = '$DalBusta', $speak = 302960226, $recipient = 'player', $comment = 'Dont hesitate to ask for recommendations on suitable agents.'],
                                                                                        ],
                                                                              ]" />
                              </actions>
                            </cue>

                            <cue name="AgentIntroduction_FinalDebrief">
                              <conditions>
                                <event_diplomacy_action_operation_started/>
                              </conditions>
                              <actions>
                                <!-- The Mission is completed -->
                                <set_value name="$AgentIntroductionDone"/>
                                <remove_mission cue="$AgentIntroduction_MissionCue" type="completed"/>

                                <do_if value="$DiplomatIntroductionDone?">
                                  <signal_cue cue="CustomGamestart_IntroductionUnlocked"/>
                                </do_if>
                              </actions>
                            </cue>

                          </cues>
                        </cue>
                      </cues>
                    </cue>

                    <!-- Dal comments on the Interferene Mechanic-->
                    <cue name="AgentIntroduction_Interference_CallToAction">
                      <conditions>
                        <event_player_influence_updated/>
                        <check_value value="event.param ge diplomacy.action.{'initiate_diplomatic_interference'}.cost.influence"/>
                      </conditions>
                      <actions>
                        <!-- Dal points out that the player now has enough influence to try their hand at an interference event if they want -->
                        <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                          $caller = this, $preset = '$plotlike', $actors = $MissionActors, $debugchance = $DeepDebugChance,
                                                                          $script = [
                                                                                    table[ $actor = '$DalBusta', $speak = 302960230, $recipient = 'player', ],
                                                                                    table[ $actor = '$DalBusta', $speak = 302960231, $recipient = 'player', ],
                                                                                    ],
                                                                          ]" />
                      </actions>
                    </cue>

                    <cue name="Dal_AgentConversation">
                      <conditions>
                        <event_cue_completed cue="Diplomacy_EnableAllGenericActions"/>
                      </conditions>
                      <cues>

                        <cue name="DalConversation_LocateAgents" instantiate="true">
                          <conditions>
                            <event_conversation_started actor="$DalBusta"/>
                            <check_value value="$AgentIntroductionDone? or md.$PlayerAgentTable.keys.count ge 1"/>
                            <check_value value="md.$PlayerAgentTable.keys.count lt $PlayerAgentLimit"/>
                          </conditions>
                          <actions>
                            <add_player_choice_sub section="cDal_agentlocation" text="{1002,12020}.[{20208,11001}]" selectable="if $Dal_NoAgentConversationOption? then false else true" tooltip="if $Dal_NoAgentConversationOption? then {1026,12809} else ''" comment="Way to: Agent" />
                          </actions>
                        </cue>

                        <cue name="DalConversation_AgentLocation" instantiate="true">
                          <conditions>
                            <event_conversation_next_section actor="$DalBusta" section="cDal_agentlocation"/>
                          </conditions>
                          <actions>
                            <do_if value="$TemporaryFactionAgent.exists and $TemporaryFactionAgent.owner != faction.player">
                              <signal_cue_instantly cue="md.Guidance.NewTarget" param="[$TemporaryFactionAgent, null, null, true]"/>
                              <add_npc_line speaker="$DalBusta" line="302960237" comment="Greeting for player-owned agent on mission"/>
                            </do_if>
                            <do_else>
                              <set_value name="$Dal_NoAgentConversationOption"/>
                              <add_npc_line speaker="$DalBusta" line="302960238" comment="Greeting for player-owned agent on mission"/>
                            </do_else>
                          </actions>
                        </cue>

                        <!-- Every 30min, determine a new agent to point to -->
                        <cue name="DalConversation_LookForAgent">
                          <actions>
                            <do_for_each name="$faction" valuename="$agent" in="md.$AgentFactionTable">
                              <!-- Only point to agents of a faction that the player can dock at and who are not employed by the player -->
                              <do_if value="$faction.relationto.{faction.player} ge -0.1 and $agent != 'owned'">
                                <add_to_group groupname="$temporaryAgentGroup" object="md.$AgentFactionTable.{$faction}.$AgentActor"/>
                              </do_if>
                            </do_for_each>
                            <do_if value="$temporaryAgentGroup.count">
                              <remove_value name="$Dal_NoAgentConversationOption"/>
                              <set_value name="$TemporaryFactionAgent" exact="$temporaryAgentGroup.random"/>
                            </do_if>
                          </actions>
                          <delay min="30min" max="60min"/>
                          <actions>
                            <remove_value name="$temporaryAgentGroup"/>
                            <remove_value name="$TemporaryFactionAgent"/>
                            <reset_cue cue="this"/>
                          </actions>
                        </cue>

                      </cues>
                    </cue>

                  </cues>
                </cue>

                <!-- Helper libraries -->
                <library name="CostDeduction_DiplomaticAction" purpose="run_actions">
                  <params>
                    <param name="Operation"/>
                  </params>
                  <actions>
                    <set_value name="$ActionID" exact="$Operation.action.id"/>
                    <set_value name="$WaresCostTable" exact="table[]"/>
                    <set_value name="$InfluenceCost" exact="diplomacy.action.{$ActionID}.cost.influence"/>
                    <set_value name="$MoneyCost" exact="diplomacy.action.{$ActionID}.cost.money"/>
                    <do_if value="diplomacy.action.{$ActionID}.cost.wares.list">
                      <set_value name="$WaresCostTable" exact="diplomacy.action.{$ActionID}.cost.wares.table"/>
                    </do_if>
                    <set_value name="$Gift" exact="$Operation.action.gift"/>

                    <!-- Remove influence -->
                    <apply_player_influence influence="- $InfluenceCost"/>

                    <!-- Remove credits -->
                    <transfer_money from="faction.player" to="faction.ownerless" amount="$MoneyCost"/>

                    <set_value name="$HQ_InventoryNPC" exact="player.headquarters.defencenpc"/>

                    <!-- Remove inventory wares if they were required -->
                    <do_for_each name="$ware" valuename="$amount" in="$WaresCostTable">
                      <do_if value="$HQ_InventoryNPC.inventory.{$ware}.count ge $amount">
                        <remove_inventory entity="$HQ_InventoryNPC" ware="$ware" exact="$amount" />
                      </do_if>
                      <do_elseif value="$HQ_InventoryNPC.inventory.{$ware}.count">
                        <set_value name="$remaining" exact="$amount - $HQ_InventoryNPC.inventory.{$ware}.count"/>
                        <remove_inventory entity="$HQ_InventoryNPC" ware="$ware" exact="$HQ_InventoryNPC.inventory.{$ware}.count" />
                        <remove_inventory entity="player.entity" ware="$ware" exact="$remaining"/>
                      </do_elseif>
                      <do_else>
                        <remove_inventory entity="player.entity" ware="$ware" exact="$amount"/>
                      </do_else>
                    </do_for_each>

                    <!-- Remove gift if submitted -->
                    <do_if value="$Gift">
                      <do_if value="$HQ_InventoryNPC.inventory.{$Gift}.count">
                        <remove_inventory entity="$HQ_InventoryNPC" ware="$Gift" exact="1" />
                      </do_if>
                      <do_else>
                        <remove_inventory entity="player.entity" ware="$Gift" exact="1" />
                      </do_else>
                    </do_if>
                    <debug_text text="'Cost for operation ' + $ActionID + ' has been deduced.'"/>
                  </actions>
                </library>

                <library name="CostDeduction_DiplomaticEvent" purpose="run_actions">
                  <params>
                    <param name="EventID"/>
                    <param name="PlayerOptionID"/>
                  </params>
                  <actions>
                    <set_value name="$WaresCostTable" exact="table[]"/>
                    <set_value name="$InfluenceCost" exact="diplomacy.event.{$EventID}.option.{$PlayerOptionID}.cost.influence"/>
                    <set_value name="$MoneyCost" exact="diplomacy.event.{$EventID}.option.{$PlayerOptionID}.cost.money"/>
                    <do_if value="diplomacy.event.{$EventID}.option.{$PlayerOptionID}.cost.wares.list">
                      <set_value name="$WaresCostTable" exact="diplomacy.event.{$EventID}.option.{$PlayerOptionID}.cost.wares.table"/>
                    </do_if>

                    <!-- Remove influence -->
                    <apply_player_influence influence="- $InfluenceCost"/>

                    <!-- Remove credits -->
                    <transfer_money from="faction.player" to="faction.ownerless" amount="$MoneyCost"/>

                    <set_value name="$HQ_InventoryNPC" exact="player.headquarters.defencenpc"/>

                    <!-- Remove inventory wares if they were required -->
                    <do_for_each name="$ware" valuename="$amount" in="$WaresCostTable">
                      <do_if value="$HQ_InventoryNPC.inventory.{$ware}.count ge $amount">
                        <remove_inventory entity="$HQ_InventoryNPC" ware="$ware" exact="$amount" />
                      </do_if>
                      <do_elseif value="$HQ_InventoryNPC.inventory.{$ware}.count">
                        <set_value name="$remaining" exact="$amount - $HQ_InventoryNPC.inventory.{$ware}.count"/>
                        <remove_inventory entity="$HQ_InventoryNPC" ware="$ware" exact="$HQ_InventoryNPC.inventory.{$ware}.count" />
                        <remove_inventory entity="player.entity" ware="$ware" exact="$remaining"/>
                      </do_elseif>
                      <do_else>
                        <remove_inventory entity="player.entity" ware="$ware" exact="$amount"/>
                      </do_else>
                      <remove_inventory entity="$HQ_InventoryNPC" ware="$ware" exact="$amount" />
                    </do_for_each>

                    <debug_text text="'Cost for Event option has been deduced.'"/>
                  </actions>
                </library>

                <library name="Success_Evaluation" purpose="run_actions">
                  <params>
                    <param name="ActionID"/>
                    <param name="Agent"/>
                    <param name="Bribe" default="null"/>
                    <param name="DiplomaticBribesTable" default="null"/>
                    <param name="Faction" default="null"/>
                  </params>
                  <actions>
                    <!-- Success of the action is calculated by three factors:
                            * Base success chance
                            * Experience of the Agent in the relevant attribute
                            * Optional bribe (bribe can increase or decrease the success chance depending on the bribe) -->

                    <!-- Get base success chance set by the agent action library -->
                    <set_value name="$OperationSuccessChance" exact="diplomacy.action.{$ActionID}.successchance"/>

                    <do_if value="$OperationSuccessChance == 100">
                      <!-- A mission that is always marked as always successful never needs a calculation -->
                      <set_value name="$Success" exact="true"/>
                      <set_value name="$BribeEffect" exact="'none_supplied'"/>
                    </do_if>
                    <do_else>
                      <!-- Figure out how good the Agent is in the relevant area and apply a boost to success chances if the right agent was selected -->
                      <set_value name="$AgentSuccessChance" exact="0"/>
                      <set_value name="$PreferredAgentType" exact="diplomacy.action.{$ActionID}.agent.type"/>
                      <set_value name="$RequiredAgentExperienceAmount" exact="diplomacy.action.{$ActionID}.agent.experience"/>

                      <do_if value="$PreferredAgentType == agenttype.negotiation">
                        <set_value name="$AgentExperienceAmount" exact="$Agent.$diplomacy_exp_negotiation"/>
                      </do_if>
                      <do_elseif value="$PreferredAgentType == agenttype.espionage">
                        <set_value name="$AgentExperienceAmount" exact="$Agent.$diplomacy_exp_espionage"/>
                      </do_elseif>

                      <do_all exact="2" counter="$i">
                        <do_if value="$i == 1">
                          <set_value name="$Current_ExperienceAmount" exact="$AgentExperienceAmount"/>
                        </do_if>
                        <do_else>
                          <set_value name="$Current_ExperienceAmount" exact="$RequiredAgentExperienceAmount"/>
                        </do_else>

                        <!-- Agent Experience moves up in ranges, depending o nthe relevant experience value -->
                        <do_if value="$Current_ExperienceAmount le 9">
                          <set_value name="$Current_ExperienceValue" exact="0"/>
                        </do_if>
                        <do_elseif value="$Current_ExperienceAmount le 19">
                          <set_value name="$Current_ExperienceValue" exact="1"/>
                        </do_elseif>
                        <do_elseif value="$Current_ExperienceAmount le 49">
                          <set_value name="$Current_ExperienceValue" exact="2"/>
                        </do_elseif>
                        <do_elseif value="$Current_ExperienceAmount le 99">
                          <set_value name="$Current_ExperienceValue" exact="3"/>
                        </do_elseif>
                        <do_elseif value="$Current_ExperienceAmount le 199">
                          <set_value name="$Current_ExperienceValue" exact="4"/>
                        </do_elseif>
                        <do_else>
                          <set_value name="$Current_ExperienceValue" exact="5"/>
                        </do_else>

                        <do_if value="$i == 1">
                          <set_value name="$RelevantAgentExperienceValue" exact="$Current_ExperienceValue"/>
                        </do_if>
                        <do_else>
                          <set_value name="$RequiredAgentExperienceValue" exact="$Current_ExperienceValue"/>
                        </do_else>
                      </do_all>

                      <set_value name="$ExperienceDifference" exact="$RelevantAgentExperienceValue - $RequiredAgentExperienceValue"/>
                      <set_value name="$AgentSuccessChance" exact="$ExperienceDifference * 10"/>

                      <set_value name="$BribeSuccessChance" exact="0"/>
                      <set_value name="$BribeEffect" exact="'none_supplied'"/>
                      <do_if value="$Bribe">
                        <do_if value="$Faction">
                          <set_value name="$BribeSuccessChance" exact="diplomacy.actions.gifteffect.{$Bribe}.{$Faction}"/>
                          <do_if value="$BribeSuccessChance gt 0">
                            <debug_text text="'Added gift contributed to success'"/>
                            <set_value name="$BribeEffect" exact="'positive'"/>
                          </do_if>
                          <do_else>
                            <debug_text text="'Added gift was detrimental to success'"/>
                            <set_value name="$BribeEffect" exact="'negative'"/>
                          </do_else>
                        </do_if>
                        <do_else>
                          <debug_text text="'No faction provided to compare the bribe table against.'"/>
                        </do_else>
                      </do_if>

                      <!-- Apply a seed to ensure that the player can't do save-scumming to force a success -->
                      <set_value name="$AssembledSuccessChance" exact="$OperationSuccessChance + $AgentSuccessChance + $BribeSuccessChance"/>
                      <set_value name="$CalculatedSuccessChance" exact="[$AssembledSuccessChance, 99].min" comment="always caps at 99%"/>
                      <set_value name="$EvaluatedSuccess" min="1" max="100" seed="Start.$Seed"/>
                      <advance_seed seed="Start.$Seed"/>

                      <set_value name="$Success" exact="$EvaluatedSuccess lt $CalculatedSuccessChance"/>
                    </do_else>

                    <!-- Also evaluate the Agent Outcome if the mission was deemed a fail#
                    (we do it now so that starting or ending other Actions won't noticable change the outcome) -->
                    <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                    <do_if value="not $Success and ($Risk != agentrisk.none)">
                      <!--Low:
                      Chance of injury 20%
                      Medium:
                      Chance of injury 40%
                      Chance of death 10%
                      High:
                      Chance of injury 60%
                      Chance of death 30%
                      Very High:
                      Chance of injury 80%
                      Chance of death 50%-->

                      <do_if value="$Risk == agentrisk.low">
                        <set_value name="$InjuryChance" exact="20"/>
                        <set_value name="$DeathChance" exact="0"/>
                      </do_if>
                      <do_elseif value="$Risk == agentrisk.medium">
                        <set_value name="$InjuryChance" exact="40"/>
                        <set_value name="$DeathChance" exact="10"/>
                      </do_elseif>
                      <do_elseif value="$Risk == agentrisk.high">
                        <set_value name="$InjuryChance" exact="60"/>
                        <set_value name="$DeathChance" exact="30"/>
                      </do_elseif>
                      <do_elseif value="$Risk == agentrisk.veryhigh">
                        <set_value name="$InjuryChance" exact="80"/>
                        <set_value name="$DeathChance" exact="50"/>
                      </do_elseif>

                      <!-- calculate chance of injury -->
                      <set_value name="$EvaluatedSuccess" min="1" max="100" seed="Start.$Seed"/>
                      <advance_seed seed="Start.$Seed"/>
                      <set_value name="$Injured" exact="$EvaluatedSuccess lt $InjuryChance"/>

                      <!-- calculate chance of death -->
                      <set_value name="$EvaluatedSuccess" min="1" max="100" seed="Start.$Seed"/>
                      <advance_seed seed="Start.$Seed"/>
                      <set_value name="$Killed" exact="$EvaluatedSuccess lt $DeathChance"/>

                      <!-- The Killed roll always takes precedent -->
                      <do_if value="$Killed">
                        <set_value name="$AgentOutcome" exact="agentresult.killed"/>
                      </do_if>
                      <do_elseif value="$Injured">
                        <set_value name="$AgentOutcome" exact="agentresult.injured"/>
                      </do_elseif>
                      <do_else>
                        <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                      </do_else>
                    </do_if>
                    <do_else>
                      <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                    </do_else>

                    <return value="[$Success, $BribeEffect, $AgentOutcome]"/>
                  </actions>
                </library>

                <library name="ActionDurationCalculation" purpose="run_actions">
                  <params>
                    <param name="ActionID"/>
                    <param name="Agent"/>
                    <param name="ActionDuration"/>
                  </params>
                  <actions>
                    <do_if value="diplomacy.action.{$ActionID}.agent.type == agenttype.negotiation">
                      <set_value name="$AgentExperienceAmount" exact="$Agent.$diplomacy_exp_negotiation"/>
                    </do_if>
                    <do_else>
                      <set_value name="$AgentExperienceAmount" exact="$Agent.$diplomacy_exp_espionage"/>
                    </do_else>

                    <do_if value="$AgentExperienceAmount le 19">
                      <set_value name="$FailureModifier" exact="0.1"/>
                    </do_if>
                    <do_elseif value="$AgentExperienceAmount le 49">
                      <set_value name="$FailureModifier" min="0.1" max="0.2" profile="increasing" />
                    </do_elseif>
                    <do_elseif value="$AgentExperienceAmount le 99">
                      <set_value name="$FailureModifier" min="0.1" max="0.3" profile="increasing" />
                    </do_elseif>
                    <do_elseif value="$AgentExperienceAmount le 199">
                      <set_value name="$FailureModifier" min="0.1" max="0.4" profile="increasing" />
                    </do_elseif>
                    <do_else>
                      <set_value name="$FailureModifier" min="0.1" max="0.5" profile="increasing" />
                    </do_else>

                    <return value="$ActionDuration * $FailureModifier"/>
                  </actions>
                </library>

                <library name="Risk_EvaluateOutcome" purpose="run_actions">
                  <params>
                    <param name="AgentOutcome"/>
                    <param name="Agent"/>
                  </params>
                  <actions>
                    <do_if value="$AgentOutcome == agentresult.killed" comment="Agent died">
                      <!-- If agent died, remove them from the game -->
                      <set_value name="stat.diplomacy_agents_lost" operation="add"/>
                      <!-- Destroy the Agent Ship, too -->
                      <destroy_object object="$Agent.diplomacy.ship" explosion="false"/>
                      <signal_cue_instantly cue="md.NPC_Agent.AgentCleanUp" param="$Agent"/>
                    </do_if>
                    <do_elseif value="$AgentOutcome == agentresult.injured" comment="Agent got injured">
                      <!-- If the agent was injured, take them out of rotation for a set amount of time -->
                      <set_value name="$Agent.$diplomacy_injury_endtime" exact="player.age + 20min"/>
                    </do_elseif>

                    <!-- Return the result -->
                    <debug_text text="'Agent Outcome: ' + $AgentOutcome"/>
                    <return value="$AgentOutcome"/>
                  </actions>
                </library>

                <library name="AgentExperience_RewardEvaluation" purpose="run_actions">
                  <params>
                    <param name="ActionID" default="null"/>
                    <param name="Risk"/>
                    <param name="Agent"/>
                  </params>
                  <actions>
                    <do_if value="$Risk == agentrisk.none">
                      <set_value name="$Experience" min="1" max="8" profile="decreasing"/>
                    </do_if>
                    <do_elseif value="$Risk == agentrisk.low">
                      <set_value name="$Experience" min="1" max="10" profile="bell"/>
                    </do_elseif>
                    <do_elseif value="$Risk == agentrisk.medium">
                      <set_value name="$Experience" min="3" max="12" profile="increasing"/>
                    </do_elseif>
                    <do_elseif value="$Risk == agentrisk.high">
                      <set_value name="$Experience" min="5" max="15" profile="bell"/>
                    </do_elseif>
                    <do_elseif value="$Risk == agentrisk.veryhigh">
                      <set_value name="$Experience" min="5" max="15" profile="increasing"/>
                    </do_elseif>

                    <do_if value="$ActionID">
                      <!-- This was an agent action, so we need to find out which is the prefferred agent type -->
                      <do_if value="diplomacy.action.{$ActionID}.agent.type == agenttype.negotiation">
                        <set_value name="$Agent.$diplomacy_exp_negotiation" operation="add" exact="$Experience"/>
                        <set_value name="$Agent.$diplomacy_exp_espionage" operation="add" exact="[($Experience / 5)i,1].max"/>
                      </do_if>
                      <do_elseif value="diplomacy.action.{$ActionID}.agent.type == agenttype.espionage">
                        <set_value name="$Agent.$diplomacy_exp_espionage" operation="add" exact="$Experience"/>
                        <set_value name="$Agent.$diplomacy_exp_negotiation" operation="add" exact="[($Experience / 5)i,1].max"/>
                      </do_elseif>
                    </do_if>
                    <do_else>
                      <!-- Event Action, add experience to both types, spread equally -->
                      <set_value name="$Agent.$diplomacy_exp_espionage" operation="add" exact="($Experience / 2)i"/>
                      <set_value name="$Agent.$diplomacy_exp_negotiation" operation="add" exact="($Experience / 2)i"/>
                    </do_else>

                    <!-- Check to see if the agent now has reached the final agent rank "spymaster" for achievement purposes -->
                    <do_if value="($Agent.$diplomacy_exp_negotiation + $Agent.$diplomacy_exp_espionage) ge 400">
                      <unlock_achievement name="SPYMASTER"/>
                    </do_if>
                  </actions>
                </library>

                <library name="AgentActor_CloneHandling" purpose="cue_ref">
                  <params>
                    <param name="ActionSetupCue"/>
                    <param name="CleanupCue"/>
                    <param name="Agent"/>
                    <param name="MovementCompletedCue" default="null"/>
                    <param name="Destination" default="null"/>
                    <param name="TravelTime" default="null"/>
                  </params>
                  <actions>
                    <set_value name="$seed" exact="md.$PlayerAgentTable.{$Agent}.$Seed"/>
                    <set_value name="$PreviousFaction" exact="md.$PlayerAgentTable.{$Agent}.$OriginalOwner"/>
                    <create_cue_actor name="$AgentClone" cue="$ActionSetupCue" seed="$seed">
                      <select tags="tag.agent" faction="$PreviousFaction"/>
                      <name name="$Agent.name"/>
                      <skills>
                        <skill type="boarding" exact="$Agent.skill.boarding" />
                        <skill type="engineering" exact="$Agent.skill.engineering" />
                        <skill type="management" exact="$Agent.skill.management" />
                        <skill type="piloting" exact="$Agent.skill.piloting" />
                        <skill type="morale" exact="$Agent.skill.morale" />
                      </skills>
                      <owner exact="faction.player" />
                    </create_cue_actor>
                    <set_entity_traits    entity="$AgentClone" missionactor="false" customhandler="true" subtitlename="true"/>
                    <set_entity_type entity="$AgentClone" type="entitytype.agent" />
                    <set_value name="$AgentClone.$Stay" exact="true"/>
                  </actions>
                  <cues>

                    <!-- The clone will always be deployed on mission and can therefore only ever say one thing -->
                    <cue name="AgentCloneConversation" instantiate="true">
                      <conditions>
                        <event_conversation_started actor="$AgentClone" conversation="default"/>
                      </conditions>
                      <actions>
                        <add_npc_line speaker="$AgentClone" line="6006" comment="Greeting for player-owned agent on mission"/>
                      </actions>
                    </cue>

                    <!-- If a destination exists, send the clone there after the determined TravelTime -->
                    <cue name="AgentClone_TravelCue" onfail="cancel">
                      <conditions>
                        <check_value value="$Destination"/>
                      </conditions>
                      <delay exact="$TravelTime"/>
                      <actions>
                        <debug_text text="'Moving clone to: ' + $Destination.knownname"/>
                        <run_actions ref="Determine_AgentDestinationRoom" result="$ResultString">
                          <param name="Agent" value="$Agent"/>
                          <param name="Destination" value="$Destination" />
                        </run_actions>
                        <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$AgentClone, [$Destination, $ResultString]]"/>

                        <do_if value="$MovementCompletedCue">
                          <signal_cue cue="$MovementCompletedCue"/>
                        </do_if>
                      </actions>
                    </cue>

                    <!-- Library cleanup when the clone is destroyed -->
                    <cue name="AgentCloneDestroyed">
                      <conditions>
                        <check_any>
                          <event_object_destroyed object="$AgentClone"/>
                          <event_object_destroyed object="$Agent" comment="we do not anticipate the Agent being destroyed before the clone was cleaned up, but listen to it as a fallback"/>
                        </check_any>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="AgentCloneCleanup"/>
                      </actions>
                    </cue>

                    <!-- Clone cleanup when the Cleanup cue is signalled -->
                    <cue name="AgentCloneCleanup">
                      <conditions>
                        <check_any>
                          <event_cue_signalled/>
                          <event_cue_activated cue="$CleanupCue"/>
                        </check_any>
                      </conditions>
                      <actions>
                        <!-- Remove the agent clone if we created one -->
                        <signal_cue_instantly cue="md.NPC_Agent.AgentCleanUp" param="$AgentClone"/>
                        <cancel_cue cue="parent"/>
                      </actions>
                    </cue>

                  </cues>
                </library>

                <library name="Determine_AgentDestinationRoom" purpose="run_actions">
                  <params>
                    <param name="Agent"/>
                    <param name="Destination"/>
                  </params>
                  <actions>
                    <!-- Determine where the Agent Clone is travelling to -->
                    <do_if value="$Destination.isclass.station">
                      <!-- Determine if the Agent is spawned in the Manager's Office or the Security -->
                      <do_if value="$Agent.$diplomacy_exp_negotiation gt $Agent.$diplomacy_exp_espionage">
                        <set_value name="$ResultString" exact="'managersoffice'" />
                      </do_if>
                      <do_else>
                        <set_value name="$ResultString" exact="'security'" />
                      </do_else>
                    </do_if>
                    <do_elseif value="$Destination.isclass.ship">
                      <!-- Place either on the bridge or find the engine room (depending on Agent attributes) -->
                      <do_if value="$Agent.$diplomacy_exp_negotiation gt $Agent.$diplomacy_exp_espionage">
                        <set_value name="$ResultString" exact="'bridge'" />
                      </do_if>
                      <do_else>
                        <set_value name="$ResultString" exact="'crew_quarters'" />
                      </do_else>
                    </do_elseif>

                    <return value="$ResultString"/>
                  </actions>
                </library>

                <library name="Generate_ActionLogbookEntry" purpose="run_actions">
                  <params>
                    <param name="Operation"/>
                    <param name="ActionID"/>
                    <param name="Agent"/>
                    <param name="AgentOutcome"/>
                    <param name="Success"/>
                    <param name="Aborted"/>
                    <param name="BribeEffect"/>
                    <param name="DestinationString" default="null"/>
                    <param name="RewardString" default="null"/>
                    <param name="BlueprintString" default="null"/>
                  </params>
                  <actions>
                    <!-- Assemble and send a Log Book message -->
                    <do_if value="$Aborted">
                      <set_value name="$title" exact="{20235,1003}" comment="Agent Action aborted"/>
                    </do_if>
                    <do_else>
                      <do_if value="$Success">
                        <set_value name="$title" exact="{20235,1002}" comment="Agent Action completed"/>
                        <set_value name="$descriptiontext" exact="diplomacy.action.{$ActionID}.successtext"/>
                      </do_if>
                      <do_else>
                        <set_value name="$title" exact="{20235,1001}" comment="Agent Action failed"/>
                        <set_value name="$descriptiontext" exact="diplomacy.action.{$ActionID}.failuretext"/>
                      </do_else>
                    </do_else>
                    <set_value name="$notificationtext" exact="$title"/>

                    <set_value name="$logtext" exact="[]" />

                    <!-- Agent action name -->
                    <set_value name="$logtext.{1}" operation="insert" exact="$Operation.action.name" />
                    <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                    <set_value name="$notificationtext" exact="$title + '\n' + $Operation.action.name"/>

                    <do_if value="$descriptiontext?">
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="$descriptiontext" />
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                    </do_if>

                    <!-- Agent status -->
                    <do_if value="$AgentOutcome == agentresult.survived">
                      <do_if value="$DestinationString">
                        <substitute_text text="$AgentDestinationReturnText" source="{20235,1014}">
                          <replace string="'$AGENT$'" with="$Agent.name"/>
                          <replace string="'$TARGETDESTINATION$'" with="$DestinationString"/>
                        </substitute_text>
                      </do_if>

                      <substitute_text text="$AgentReturnText" source="{20235,1017}">
                        <replace string="'$AGENT$'" with="$Agent.name"/>
                      </substitute_text>

                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="if $AgentDestinationReturnText? then $AgentDestinationReturnText else $AgentReturnText" />
                    </do_if>
                    <do_elseif value="$AgentOutcome == agentresult.injured">
                      <do_if value="$DestinationString">
                        <substitute_text text="$AgentDestinationReturnText" source="{20235,1015}">
                          <replace string="'$AGENT$'" with="$Agent.name"/>
                          <replace string="'$TARGETDESTINATION$'" with="$DestinationString"/>
                        </substitute_text>
                      </do_if>

                      <substitute_text text="$AgentReturnText" source="{20235,1018}">
                        <replace string="'$AGENT$'" with="$Agent.name"/>
                      </substitute_text>

                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="if $AgentDestinationReturnText? then $AgentDestinationReturnText else $AgentReturnText" />
                      <set_value name="$notificationtext" exact="$notificationtext + '\n' + $AgentReturnText"/>
                    </do_elseif>
                    <do_else>
                      <substitute_text text="$AgentReturnText" source="{20235,1016}">
                        <replace string="'$AGENT$'" with="$Agent.name"/>
                      </substitute_text>
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="$AgentReturnText" comment="Agent deceased"/>
                      <set_value name="$notificationtext" exact="$notificationtext + '\n' + $AgentReturnText"/>
                    </do_else>
                    <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>

                    <!-- Optional Bribe feedback -->
                    <do_if value="$BribeEffect != 'none_supplied'">
                      <do_if value="$BribeEffect == 'positive'">
                        <substitute_text text="$BribeText" source="{20235,1023}">
                          <replace string="'$Gift_Bribe$'" with="$Operation.action.gift.name"/>
                        </substitute_text>
                        <substitute_text text="$BribeNotificationText" source="{20235,1025}">
                          <replace string="'$Gift_Bribe$'" with="$Operation.action.gift.name"/>
                        </substitute_text>
                      </do_if>
                      <do_else>
                        <substitute_text text="$BribeText" source="{20235,1022}">
                          <replace string="'$Gift_Bribe$'" with="$Operation.action.gift.name"/>
                        </substitute_text>
                        <substitute_text text="$BribeNotificationText" source="{20235,1024}">
                          <replace string="'$Gift_Bribe$'" with="$Operation.action.gift.name"/>
                        </substitute_text>
                      </do_else>
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="$BribeText"/>
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                      <set_value name="$notificationtext" exact="$notificationtext + '\n' + $BribeNotificationText"/>
                    </do_if>

                    <!-- Add reward line -->
                    <do_if value="$RewardString and $Success">
                      <substitute_text text="$RewardText" source="{20235,1030}">
                        <replace string="'$REWARD$'" with="$RewardString"/>
                      </substitute_text>
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="$RewardText" comment="Reward received:"/>
                      <set_value name="$notificationtext" exact="$notificationtext + '\n' + $RewardText"/>
                    </do_if>

                    <!-- Let the player know if they already have all available blueprints, too -->
                    <do_if value="$BlueprintString and $Success">
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="$BlueprintString"/>
                    </do_if>

                    <show_notification text="$notificationtext"/>
                    <write_to_logbook category="diplomacy" title="$title" text="$logtext"/>
                  </actions>
                </library>

                <library name="GetRelevantBlueprint" purpose="run_actions">
                  <params>
                    <param name="Faction"/>
                    <param name="Destination"/>
                    <param name="Agent"/>
                    <param name="StationModules" default="false"/>
                  </params>
                  <actions>
                    <set_value name="$BlueprintWare" exact="null"/>
                    <set_value name="$BlueprintTable" exact="table[]"/>
                    <set_value name="$BlueprintWeightTable" exact="table[]"/>
                    <set_value name="$OfferedBlueprintsList" exact="[]"/>

                    <!-- Determine a random blueprint that is produced by this station and is not yet owned by the player -->
                    <do_if value="$StationModules">
                      <!-- This Action wants station module blueprints -->
                      <get_ware_definition result="$LowValue_BlueprintSelectionList" flags="allowplayerblueprint blueprint" faction="$Faction" tags="tag.module" >
                        <owner type="station_gen_basic" licencefaction="$Faction"/>
                      </get_ware_definition>

                      <get_ware_definition result="$MediumValue_BlueprintSelectionList" flags="allowplayerblueprint blueprint" faction="$Faction" tags="tag.module" >
                        <owner type="station_gen_intermediate" licencefaction="$Faction"/>
                      </get_ware_definition>

                      <get_ware_definition result="$MediumValue_IllegalBlueprintSelectionList" flags="allowplayerblueprint blueprint" faction="$Faction" tags="tag.module" >
                        <owner type="station_illegal" licencefaction="$Faction"/>
                      </get_ware_definition>

                      <get_ware_definition result="$HighValue_BlueprintSelectionList" flags="allowplayerblueprint blueprint " faction="$Faction" tags="tag.module" >
                        <owner type="station_gen_advanced" licencefaction="$Faction"/>
                      </get_ware_definition>

                      <get_ware_definition result="$Equip_SM_BlueprintSelectionList" flags="allowplayerblueprint blueprint" faction="$Faction" tags="tag.module" >
                        <owner type="station_equip_sm" licencefaction="$Faction"/>
                      </get_ware_definition>

                      <get_ware_definition result="$Equip_LXL_BlueprintSelectionList" flags="allowplayerblueprint blueprint" faction="$Faction" tags="tag.module" >
                        <owner type="station_equip_lxl" licencefaction="$Faction"/>
                      </get_ware_definition>

                      <append_list_elements name="$MediumValue_BlueprintSelectionList" other="$MediumValue_IllegalBlueprintSelectionList"/>
                      <append_list_elements name="$HighValue_BlueprintSelectionList" other="$Equip_SM_BlueprintSelectionList"/>
                      <append_list_elements name="$HighValue_BlueprintSelectionList" other="$Equip_LXL_BlueprintSelectionList"/>

                      <do_for_each name="$list" in="[$LowValue_BlueprintSelectionList, $MediumValue_BlueprintSelectionList, $HighValue_BlueprintSelectionList]">
                        <do_for_each name="$moduleware" in="$list" reverse="true">
                          <do_if value="player.blueprints.{$moduleware}.any.exists
                                        or $moduleware.hastag.hiddenwithoutlicence
                                        or $moduleware.hastag.nodiplomacyblueprint
                                        or md.Diplomacy.Start.$Diplomacy_StoryBlueprint_Blacklist.indexof.{$moduleware}">
                            <remove_from_list name="$list" exact="$moduleware"/>
                          </do_if>
                        </do_for_each>
                      </do_for_each>
                    </do_if>
                    <do_else>
                      <!-- All other blueprint results are determined by the type of station it targets -->
                      <do_if value="$Destination.isshipyard or $Destination.iswharf">

                        <get_ware_definition result="$LowValue_BlueprintSelectionList" flags="allowplayerblueprint ship blueprint " faction="$Faction">
                          <owner type="generaluseship" licencefaction="$Faction"/>
                        </get_ware_definition>

                        <get_ware_definition result="$MediumValue_BlueprintSelectionList" flags="allowplayerblueprint ship blueprint " faction="$Faction">
                          <owner type="militaryship" licencefaction="$Faction"/>
                        </get_ware_definition>

                        <get_ware_definition result="$HighValue_BlueprintSelectionList" flags="allowplayerblueprint ship blueprint " faction="$Faction">
                          <owner type="capitalship" licencefaction="$Faction"/>
                        </get_ware_definition>

                        <!-- Remove all ship wares that are not the required size or if the player already owns the blueprint for the ware in question -->
                        <do_for_each name="$list" in="[$LowValue_BlueprintSelectionList, $MediumValue_BlueprintSelectionList, $HighValue_BlueprintSelectionList]">
                          <do_for_each name="$shipware" in="$list" reverse="true">
                            <do_if value="($Destination.isshipyard and not ($shipware.objectmacro.isclass.ship_l or $shipware.objectmacro.isclass.ship_xl))
                                           or ($Destination.iswharf and not ($shipware.objectmacro.isclass.ship_s or $shipware.objectmacro.isclass.ship_m))
                                           or player.blueprints.{$shipware}.any.exists
                                           or $shipware.hastag.hiddenwithoutlicence
                                          or $moduleware.hastag.nodiplomacyblueprint
                                           or md.Diplomacy.Start.$Diplomacy_StoryBlueprint_Blacklist.indexof.{$shipware}">
                              <remove_from_list name="$list" exact="$shipware"/>
                            </do_if>
                          </do_for_each>
                        </do_for_each>
                      </do_if>
                      <do_elseif value="$Destination.isequipmentdock">
                        <get_ware_definition result="$LowValue_BlueprintSelectionList" flags="allowplayerblueprint blueprint" faction="$Faction" tags="tag.equipment" >
                          <owner type="generaluseequipment" licencefaction="$Faction"/>
                        </get_ware_definition>
                        <get_ware_definition result="$LowValue_ThrusterList" flags="allowplayerblueprint blueprint" faction="$Faction" tags="tag.thruster"/>
                        <append_list_elements name="$LowValue_BlueprintSelectionList" other="$LowValue_ThrusterList"/>

                        <get_ware_definition result="$MediumValue_BlueprintSelectionList" flags="allowplayerblueprint blueprint" faction="$Faction" tags="tag.equipment" >
                          <owner type="militaryequipment" licencefaction="$Faction"/>
                        </get_ware_definition>

                        <get_ware_definition result="$HighValue_BlueprintSelectionList" flags="allowplayerblueprint blueprint" faction="$Faction" tags="tag.equipment" >
                          <owner type="capitalequipment" licencefaction="$Faction"/>
                        </get_ware_definition>

                        <do_for_each name="$list" in="[$LowValue_BlueprintSelectionList, $MediumValue_BlueprintSelectionList, $HighValue_BlueprintSelectionList]">
                          <do_for_each name="$equipmentware" in="$list" reverse="true">
                            <do_if value="player.blueprints.{$equipmentware}.any.exists
                                          or $equipmentware.hastag.hiddenwithoutlicence
                                          or $equipmentware.hastag.nodiplomacyblueprint
                                          or md.Diplomacy.Start.$Diplomacy_StoryBlueprint_Blacklist.indexof.{$equipmentware}">
                              <debug_text text="'Remove ware: ' + $equipmentware"/>
                              <remove_from_list name="$list" exact="$equipmentware"/>
                            </do_if>
                          </do_for_each>
                        </do_for_each>
                      </do_elseif>
                    </do_else>

                    <!-- Stealing a blueprint is always an espionage check -->
                    <do_if value="$Agent.$diplomacy_exp_espionage le 9">
                      <set_value name="$ExperienceBoostValue" exact="0"/>
                    </do_if>
                    <do_elseif value="$Agent.$diplomacy_exp_espionage le 19">
                      <set_value name="$ExperienceBoostValue" exact="1"/>
                    </do_elseif>
                    <do_elseif value="$Agent.$diplomacy_exp_espionage le 49">
                      <set_value name="$ExperienceBoostValue" exact="2"/>
                    </do_elseif>
                    <do_elseif value="$Agent.$diplomacy_exp_espionage le 99">
                      <set_value name="$ExperienceBoostValue" exact="3"/>
                    </do_elseif>
                    <do_elseif value="$Agent.$diplomacy_exp_espionage le 199">
                      <set_value name="$ExperienceBoostValue" exact="4"/>
                    </do_elseif>
                    <do_else>
                      <set_value name="$ExperienceBoostValue" exact="5"/>
                    </do_else>

                    <!-- A low skill agent will always lean towards low value blueprints, a 5 skill agent will get equal chances of pickings from all 3 lists (given they aren't empty, i.e. the player already owns all of the blueprints in the list) -->
                    <do_if value="$HighValue_BlueprintSelectionList.count">
                      <set_value name="$weight" min="0" max="$ExperienceBoostValue *2"/>
                      <set_value name="$BlueprintWeightTable.{$weight}" exact="$HighValue_BlueprintSelectionList"/>
                    </do_if>
                    <do_if value="$MediumValue_BlueprintSelectionList.count">
                      <set_value name="$weight" min="0" max="5 + $ExperienceBoostValue"/>
                      <set_value name="$BlueprintWeightTable.{$weight}" exact="$MediumValue_BlueprintSelectionList"/>
                    </do_if>
                    <do_if value="$LowValue_BlueprintSelectionList.count">
                      <set_value name="$weight" min="0" max="10"/>
                      <set_value name="$BlueprintWeightTable.{$weight}" exact="$LowValue_BlueprintSelectionList"/>
                    </do_if>

                    <do_if value="$BlueprintWeightTable.keys.count">
                      <set_value name="$OfferedBlueprintsList" exact="$BlueprintWeightTable.{$BlueprintWeightTable.keys.list.max}"/>
                    </do_if>

                    <do_for_each name="$ware" in="$OfferedBlueprintsList">
                      <!-- Weigh the table based on max price and agent experience -->
                      <set_value name="$BlueprintTable.{$ware}" exact="100*1/($ware.maxprice/50000)+(10*(1*$ExperienceBoostValue))"/>
                    </do_for_each>

                    <do_if value="$BlueprintTable.keys.count">
                      <set_value name="$SortedBlueprintList" exact="$BlueprintTable.keys.sorted"/>
                      <set_value name="$WeightedSelection" min="1" max="$BlueprintTable.keys.count" profile="decreasing" seed="Start.$Seed"/>
                      <advance_seed seed="Start.$Seed"/>
                      <set_value name="$BlueprintWare" exact="$SortedBlueprintList.{$WeightedSelection}"/>
                    </do_if>

                    <debug_text text="'Diplomatic action will reward the following blueprint: ' + $BlueprintWare.name" chance="if $BlueprintWare then 100 else 0"/>
                    <return value="$BlueprintWare"/>
                  </actions>
                </library>

                <library name="GenerateDiplomaticEvent" purpose="run_actions">
                  <params>
                    <param name="Faction1"/>
                    <param name="Faction2"/>
                    <param name="Agent"/>
                    <param name="Source" default="null"/>
                  </params>
                  <actions>
                    <do_any>
                      <set_value name="$EventAlly" exact="'ally_espionage_suspicion'"/>
                      <set_value name="$EventAlly" exact="'ally_ethical_dilemma'"/>
                      <set_value name="$EventAlly" exact="'ally_unilateral_action'"/>
                    </do_any>
                    <do_any>
                      <set_value name="$EventFriend" exact="'friend_diplomatic_insult'"/>
                      <set_value name="$EventFriend" exact="'friend_mining_rights'"/>
                      <set_value name="$EventFriend" exact="'friend_security_cooperation'"/>
                    </do_any>
                    <do_any>
                      <set_value name="$EventNeutral" exact="'neutral_trade_dispute'"/>
                      <set_value name="$EventNeutral" exact="'neutral_illegal_activity'"/>
                      <set_value name="$EventNeutral" exact="'neutral_territorial_claim'"/>
                      <set_value name="$EventNeutral" exact="'neutral_cyber_attack'"/>
                    </do_any>
                    <do_any>
                      <set_value name="$EventEnemy" exact="'enemy_corrupted_official'"/>
                      <set_value name="$EventEnemy" exact="'enemy_infiltration_attempt'"/>
                      <set_value name="$EventEnemy" exact="'enemy_military_investments'"/>
                    </do_any>
                    <do_any>
                      <set_value name="$EventHostile" exact="'hostile_peace_talks'"/>
                      <set_value name="$EventHostile" exact="'hostile_policy_shift'"/>
                      <set_value name="$EventHostile" exact="'hostile_common_enemy'"/>
                    </do_any>

                    <do_if value="$Faction1.hasrelation.enemy.{$Faction2}">
                      <set_value name="$EventID" exact="if $Faction1.hasrelation.kill.{$Faction2} then $EventHostile
                                                        else $EventEnemy"/>
                    </do_if>
                    <do_elseif value="$Faction1.hasrelation.friend.{$Faction2}">
                      <!-- We already trigger the ally event for member relations -->
                      <set_value name="$EventID" exact="if $Faction1.hasrelation.member.{$Faction2} then $EventAlly
                                                        else $EventFriend"/>
                    </do_elseif>
                    <do_else>
                      <set_value name="$EventID" exact="$EventNeutral"/>
                    </do_else>

                    <!-- Create, then start the Diplomatic Event Operation -->
                    <do_if value="$Source">
                      <create_diplomacy_event_operation result="$EventOperation" event="$EventID" agent="$Agent" faction="$Faction1" otherfaction="$Faction2" source="$Source" owner="faction.player"/>
                    </do_if>
                    <do_else>
                      <create_diplomacy_event_operation result="$EventOperation" event="$EventID" agent="$Agent" faction="$Faction1" otherfaction="$Faction2" owner="faction.player"/>
                    </do_else>
                    <start_diplomacy_event_operation operation="$EventOperation"/>

                    <!-- Trigger Notification and Logbook Entry -->
                    <set_value name="$title" exact="{20236,1002}"/>
                    <set_value name="$notificationtext" exact="$title"/>

                    <set_value name="$logtext" exact="[]" />

                    <!-- Event name -->
                    <set_value name="$logtext.{1}" operation="insert" exact="$EventOperation.event.name" />
                    <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                    <set_value name="$notificationtext" exact="$notificationtext + '\n' + $EventOperation.event.name"/>

                    <!-- Factions involved -->
                    <substitute_text text="$FactionsInvolvedText" source="{20236,1003}">
                      <replace string="'$FACTIONSHORTNAME1$'" with="$Faction1.shortname"/>
                      <replace string="'$FACTIONSHORTNAME2$'" with="$Faction2.shortname"/>
                    </substitute_text>
                    <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="$FactionsInvolvedText" />
                    <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                    <set_value name="$notificationtext" exact="$notificationtext + '\n' + $FactionsInvolvedText"/>

                    <!-- Current relations -->
                    <do_if value="$Faction1.hasrelation.enemy.{$Faction2}">
                      <set_value name="$RelationRangeText" exact="if $Faction1.hasrelation.kill.{$Faction2} then {1001,5212}
                                                                else {20218,601}"/>
                    </do_if>
                    <do_elseif value="$Faction1.hasrelation.friend.{$Faction2}">
                      <!-- We already trigger the ally event for member relations -->
                      <set_value name="$RelationRangeText" exact="if $Faction1.hasrelation.member.{$Faction2} then {20218,401}
                                                                else {20218,301}"/>
                    </do_elseif>
                    <do_else>
                      <set_value name="$RelationRangeText" exact="{20218,201}"/>
                    </do_else>
                    <substitute_text text="$FactionRelationsText" source="{20236,1004}">
                      <replace string="'$RELATIONRANGE$'" with="$RelationRangeText"/>
                    </substitute_text>
                    <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="$FactionRelationsText" />
                    <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                    <set_value name="$notificationtext" exact="$notificationtext + '\n' + $FactionRelationsText"/>

                    <show_notification text="$notificationtext"/>
                    <write_to_logbook category="diplomacy" title="$title" text="$logtext"/>
                    <return value="$EventOperation"/>
                  </actions>
                </library>

                <!-- All agent actions -->
                <cue name="AgentActions">
                  <cues>

                    <!--
                    #### NEGOTIATION ACTIONS ####
                    -->

                    <!-- Keep track of how many actions have completed and award a first "Action Completed" achievement -->
                    <cue name="DiplomaticActionCounter" instantiate="true">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <set_value name="$DiplomaticActionCounter" operation="add" exact="1"/>
                        <set_value name="this.$success" exact="event.param.{2}"/>

                        <do_if value="this.$success">
                          <unlock_achievement name="DIPLOMACY_ACTION"/>
                        </do_if>

                        <do_if value="event.param.{1} == 'initiate_diplomatic_interference' and this.$success">
                          <set_value name="$InterferenceActionCounter" operation="add" exact="1"/>
                        </do_if>

                        <do_if value="@$InterferenceActionCounter ge 2 and not $ProtocolNull_ResearchAdded?">
                          <set_value name="$ProtocolNull_ResearchAdded"/>
                          <add_encyclopedia_entry type="researchables" item="'research_interference_network'"/>
                          <signal_cue cue="AgentIntroduction_ProtocolNull"/>
                        </do_if>

                        <do_if value="this.$success">
                          <set_value name="stat.diplomacy_actions_completed" operation="add"/>
                        </do_if>
                        <do_else>
                          <set_value name="stat.diplomacy_actions_failed" operation="add"/>
                        </do_else>
                      </actions>
                    </cue>

                    <!-- Dal comments on Protocol Null Research -->
                    <cue name="AgentIntroduction_ProtocolNull">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                          $caller = this, $preset = '$plotlike', $actors = $MissionActors, $debugchance = $DeepDebugChance,
                                                                          $script = [
                                                                                    table[ $actor = '$DalBusta', $speak = 302960232, $recipient = 'player', $comment = 'It didnt escape my attention that youve been proactively manipulating factions for some time! But have you heard of Protocol Null?'],
                                                                                    table[ $actor = '$DalBusta', $speak = 302960233, $recipient = 'player', $comment = 'It allows your agents to do their work independently, creating a constantly shifting political landscape.'],
                                                                                    table[ $actor = '$DalBusta', $speak = 302960234, $recipient = 'player', $comment = 'If you like, we could ask Boso Ta to cook up a research plan. Let me know!'],
                                                                                    ],
                                                                          ]" />
                      </actions>
                    </cue>

                    <cue name="NegotiationActions">
                      <cues>

                        <!-- Agent Action 1: Cultivate Influence -->
                        <cue name="Action1_GatherInfluence" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'cultivate_influence'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action1_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action1_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action1_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action1_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action1_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action1_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action1_GatherInfluence"/>
                                  <param name="CleanupCue" value="Action1_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action1_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action1_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action1_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action1_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action1_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action1_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action1_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action1_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action1_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action1_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action1_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Reward influence -->
                                <apply_player_influence influence="diplomacy.action.{$ActionID}.reward.influence"/>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action1_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action1_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="{1001,12814}"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 2: Improve relations Low -->
                        <cue name="Action2_ImproveRelationsLow" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'improve_relations_low'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action2_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action2_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action2_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action2_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action2_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action2_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action2_ImproveRelationsLow"/>
                                  <param name="CleanupCue" value="Action2_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action2_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action2_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action2_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action2_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action2_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action2_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action2_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action2_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action2_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action2_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action2_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Reward faction reptutation -->
                                <add_faction_relation faction="faction.player" otherfaction="$Faction" value="0.00256" reason="relationchangereason.missioncompleted" />

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action2_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action2_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <substitute_text text="$RelationRewardString" source="{20235,10232}">
                                  <replace string="'$RELATIONVALUE$'" with="faction.player.relation.{$Faction.relationto.{faction.player}}.uivalue"/>
                                </substitute_text>
                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="$RelationRewardString"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 3: Improve relations Medium -->
                        <cue name="Action3_ImproveRelationsMedium" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'improve_relations_medium'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action3_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action3_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action3_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action3_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action3_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action3_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action3_ImproveRelationsMedium"/>
                                  <param name="CleanupCue" value="Action3_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action3_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action3_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action3_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action3_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action3_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action3_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action3_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action3_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action3_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action3_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action3_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Reward faction reptutation -->
                                <add_faction_relation faction="faction.player" otherfaction="$Faction" value="0.0064" reason="relationchangereason.missioncompleted" />

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action3_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action3_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <substitute_text text="$RelationRewardString" source="{20235,10232}">
                                  <replace string="'$RELATIONVALUE$'" with="faction.player.relation.{$Faction.relationto.{faction.player}}.uivalue"/>
                                </substitute_text>
                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="$RelationRewardString"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 4: Ceasefire Agreement -->
                        <cue name="Action4_CeasefireAgreement" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'negotiate_ceasefire'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action4_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action4_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action4_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action4_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action4_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action4_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action4_CeasefireAgreement"/>
                                  <param name="CleanupCue" value="Action4_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action4_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action4_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action4_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action4_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action4_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action4_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action4_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action4_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action4_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action4_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action4_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Set faction relation to minimum docking relation if it is still less than (relations could have increased during the action) -->
                                <do_if value="not $Faction.hasrelation.dock.{faction.player}">
                                  <set_faction_relation faction="$Faction" otherfaction="faction.player" value="$Faction.relation.dock.min" reason="relationchangereason.missioncompleted"/>
                                </do_if>


                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action4_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action4_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <substitute_text text="$RelationRewardString" source="{20235,10232}">
                                  <replace string="'$RELATIONVALUE$'" with="faction.player.relation.{$Faction.relationto.{faction.player}}.uivalue"/>
                                </substitute_text>
                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="$RelationRewardString"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 5: Assign Agent on Station -->
                        <cue name="Action5_AssignAgentToStation" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'active_station_information'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action5_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action5_SuccessCalculation">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                                <do_if value="not $Success">

                                  <run_actions ref="ActionDurationCalculation" result="$PrematureCancelTime">
                                    <param name="ActionID"      value="$ActionID"/>
                                    <param name="Agent"           value="$Agent"/>
                                    <param name="ActionDuration"  value="$ActionDuration"/>
                                  </run_actions>
                                </do_if>
                                <do_else>
                                  <!-- No need to keep this one running since it was successful -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <delay exact="$PrematureCancelTime"/>
                              <actions>
                                <!-- The mission was aborted prematurely -->
                                <debug_text text="'Action not successful. Abort prematurely.'"/>
                                <signal_cue cue="Action5_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action5_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action5_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action5_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action5_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action5_AssignAgentToStation"/>
                                  <param name="CleanupCue" value="Action5_Cleanup"/>
                                  <param name="MovementCompletedCue" value="Action5_OngoingEffects"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <!-- Some Actions have ongoing effects that are active only for the duration of the operation -->
                            <cue name="Action5_OngoingEffects">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Give the object gravidar vision -->
                                <set_value name="$RadarEnabled"/>
                                <add_player_gravidar_access_request object="$Destination"/>

                                <!-- Send a notification that the visibility has now unlocked -->
                                <substitute_text text="$RadarConfirmationText" source="{20235,1032}">
                                  <replace string="'$TARGETDESTINATION$'" with="$Destination.knownname"/>
                                </substitute_text>
                                <show_notification text="$RadarConfirmationText"/>
                              </actions>
                            </cue>

                            <cue name="Action5_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action5_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action5_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action5_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action5_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action5_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action5_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action5_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action5_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action5_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action5_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- This action does not have a outcome reward, the reward is the ongoing effect -->

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action5_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action5_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$RadarEnabled?">
                                  <!-- Remove vision from the Destination -->
                                  <remove_player_gravidar_access_request object="$Destination"/>
                                  <!-- Send a notification that the visibility is no longer guaranteed -->
                                  <substitute_text text="$RadarCancellationText" source="{20235,1033}">
                                    <replace string="'$TARGETDESTINATION$'" with="$Destination.knownname"/>
                                  </substitute_text>
                                  <show_notification text="$RadarCancellationText"/>
                                </do_if>

                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 6: Assign Agent on Ship -->
                        <cue name="Action6_AssignAgentToShip" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'active_ship_information'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$ship"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action6_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action6_SuccessCalculation">
                              <actions>
                                <set_value name="$PrematureCancelTime" exact="0s"/>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                                <do_if value="not $Success">

                                  <run_actions ref="ActionDurationCalculation" result="$PrematureCancelTime">
                                    <param name="ActionID"      value="$ActionID"/>
                                    <param name="Agent"           value="$Agent"/>
                                    <param name="ActionDuration"  value="$ActionDuration"/>
                                  </run_actions>
                                </do_if>
                                <do_else>
                                  <!-- No need to keep this one running since it was successful -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <delay exact="$PrematureCancelTime"/>
                              <actions>
                                <!-- The mission was aborted prematurely -->
                                <debug_text text="'Action not successful. Abort prematurely.'"/>
                                <signal_cue cue="Action6_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action6_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action6_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action6_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action6_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action6_AssignAgentToShip"/>
                                  <param name="CleanupCue" value="Action6_Cleanup"/>
                                  <param name="MovementCompletedCue" value="Action6_OngoingEffects"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <!-- Some Actions have ongoing effects that are active only for the duration of the operation -->
                            <cue name="Action6_OngoingEffects">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Give the object gravidar vision -->
                                <set_value name="$RadarEnabled"/>
                                <add_player_gravidar_access_request object="$Destination"/>

                                <!-- Send a notification that the visibility has now unlocked -->
                                <substitute_text text="$RadarConfirmationText" source="{20235,1032}">
                                  <replace string="'$TARGETDESTINATION$'" with="$Destination.knownname"/>
                                </substitute_text>
                                <show_notification text="$RadarConfirmationText"/>
                              </actions>
                            </cue>

                            <cue name="Action6_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action6_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action6_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action6_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action6_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action6_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action6_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action6_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action6_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action6_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action6_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- This action does not have a outcome reward, the reward is the ongoing effect -->

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action6_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action6_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$RadarEnabled?">
                                  <!-- Remove vision from the Destination -->
                                  <remove_player_gravidar_access_request object="$Destination"/>
                                  <!-- Send a notification that the visibility is no longer guaranteed -->
                                  <substitute_text text="$RadarCancellationText" source="{20235,1033}">
                                    <replace string="'$TARGETDESTINATION$'" with="$Destination.knownname"/>
                                  </substitute_text>
                                  <show_notification text="$RadarCancellationText"/>
                                </do_if>

                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 7: Negotiate Discount -->
                        <cue name="Action7_NegotiateDiscount" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'negotiate_trade_deal'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action7_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action7_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action7_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action7_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action7_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action7_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action7_NegotiateDiscount"/>
                                  <param name="CleanupCue" value="Action7_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action7_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action7_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action7_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action7_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action7_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action7_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action7_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action7_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action7_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action7_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action7_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Unlock a trade discount for the selected target station -->
                                <do_if value="diplomacy.action.{$ActionID}.reward.unlocks.count">
                                  <set_value name="$Discount" exact="diplomacy.action.{$ActionID}.reward.unlocks.random"/>
                                  <do_if value="$Destination.iswharf">
                                    <add_player_discount name="$Discount.name" id="$Discount.id"  amount="10" object="$Destination" time="4h" applytoshipsales="true"/>
                                  </do_if>
                                  <do_elseif value="$Destination.isshipyard">
                                    <add_player_discount name="$Discount.name" id="$Discount.id"  amount="5" object="$Destination" time="4h" applytoshipsales="true"/>
                                  </do_elseif>
                                  <do_else>
                                    <add_player_discount name="$Discount.name" id="$Discount.id"  amount="30" object="$Destination" time="4h"/>
                                  </do_else>
                                </do_if>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action7_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action7_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="{20235,10731}"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 8: Declare War -->
                        <cue name="Action8_NegotiateDiscount" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'declare_war'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action8_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action8_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action8_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action8_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action8_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action8_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action8_NegotiateDiscount"/>
                                  <param name="CleanupCue" value="Action8_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action8_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action8_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action8_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action8_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action8_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action8_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action8_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action8_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action8_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action8_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action8_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Drop reputation to the lowest possible -->
                                <set_faction_relation faction="faction.player" otherfaction="$Faction" value="$Faction.relation.kill.min" reason="relationchangereason.missioncompleted"/>

                                <!-- Reward influence -->
                                <apply_player_influence influence="diplomacy.action.{$ActionID}.reward.influence"/>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action8_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action8_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>
                      </cues>
                    </cue>

                    <!--
                    #### ESPIONAGE ACTIONS ####
                    -->

                    <cue name="EspionageActions">
                      <cues>

                        <!-- Agent Action 9: Build Intelligence Network -->
                        <cue name="Action9_BuildIntelligenceNetwork" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'build_intelligence_network'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action9_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action9_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action9_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action9_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action9_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action9_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action9_BuildIntelligenceNetwork"/>
                                  <param name="CleanupCue" value="Action9_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action9_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action9_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action9_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action9_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action9_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action9_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action9_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action9_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action9_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action9_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action9_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Reward influence -->
                                <apply_player_influence influence="diplomacy.action.{$ActionID}.reward.influence"/>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action9_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action9_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="{1001,12814}"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 10: Steal L/XL Blueprints -->
                        <cue name="Action10_StealBlueprintsShipyard" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'steal_blueprint_ship_lxl'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action10_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action10_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action10_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action10_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action10_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action10_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action10_StealBlueprintsShipyard"/>
                                  <param name="CleanupCue" value="Action10_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action10_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action10_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action10_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action10_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action10_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action10_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action10_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action10_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action10_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action10_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action10_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <run_actions ref="GetRelevantBlueprint" result="$BlueprintWare">
                                  <param name="Faction" value="$Faction"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="Agent" value="$Agent"/>
                                </run_actions>

                                <do_if value="$BlueprintWare">
                                  <add_blueprints wares="$BlueprintWare" />
                                  <set_value name="$RewardString" exact="$BlueprintWare.name"/>
                                  <set_value name="$BlueprintsExhausted" exact="null"/>
                                </do_if>
                                <do_else>
                                  <!-- Player already owns all potential blueprints. Refund some credits instead -->
                                  <transfer_money from="faction.ownerless" to="faction.player" amount="diplomacy.action.{$ActionID}.cost.money"/>
                                  <set_value name="$BlueprintsExhausted" exact="'\n'+{20235,20222}"/>
                                  <set_value name="$RewardString" exact="{1001,37}"/>
                                </do_else>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action10_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action10_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="@$RewardString"/>
                                  <param name="BlueprintString" value="@$BlueprintsExhausted"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 11: Steal S/M Blueprints -->
                        <cue name="Action11_StealBlueprintsShipyard" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'steal_blueprint_ship_sm'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action11_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action11_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action11_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action11_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action11_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action11_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action11_StealBlueprintsShipyard"/>
                                  <param name="CleanupCue" value="Action11_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action11_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action11_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action11_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action11_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action11_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action11_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action11_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action11_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action11_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action11_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action11_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <run_actions ref="GetRelevantBlueprint" result="$BlueprintWare">
                                  <param name="Faction" value="$Faction"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="Agent" value="$Agent"/>
                                </run_actions>

                                <do_if value="$BlueprintWare">
                                  <add_blueprints wares="$BlueprintWare" />
                                  <set_value name="$RewardString" exact="$BlueprintWare.name"/>
                                  <set_value name="$BlueprintsExhausted" exact="null"/>
                                </do_if>
                                <do_else>
                                  <!-- Player already owns all potential blueprints. Refund some credits instead -->
                                  <transfer_money from="faction.ownerless" to="faction.player" amount="diplomacy.action.{$ActionID}.cost.money"/>
                                  <set_value name="$BlueprintsExhausted" exact="'\n'+{20235,20222}"/>
                                  <set_value name="$RewardString" exact="{1001,37}"/>
                                </do_else>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action11_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action11_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="@$RewardString"/>
                                  <param name="BlueprintString" value="@$BlueprintsExhausted"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 12: Steal Station Module Blueprints -->
                        <cue name="Action12_StealBlueprintstationModule" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'steal_blueprint_module'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action12_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action12_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action12_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action12_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action12_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action12_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action12_StealBlueprintstationModule"/>
                                  <param name="CleanupCue" value="Action12_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action12_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action12_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action11_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action12_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action12_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action12_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action12_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action12_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action12_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action12_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action12_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <run_actions ref="GetRelevantBlueprint" result="$BlueprintWare">
                                  <param name="Faction" value="$Faction"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="StationModules" value="true" comment="to indicate we are interested in the station modules"/>
                                </run_actions>

                                <do_if value="$BlueprintWare">
                                  <add_blueprints wares="$BlueprintWare" />
                                  <set_value name="$RewardString" exact="$BlueprintWare.name"/>
                                  <set_value name="$BlueprintsExhausted" exact="null"/>
                                </do_if>
                                <do_else>
                                  <!-- Player already owns all potential blueprints. Refund some credits instead -->
                                  <transfer_money from="faction.ownerless" to="faction.player" amount="diplomacy.action.{$ActionID}.cost.money"/>
                                  <set_value name="$BlueprintsExhausted" exact="'\n'+{20235,20222}"/>
                                  <set_value name="$RewardString" exact="{1001,37}"/>
                                </do_else>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action12_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action12_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="@$RewardString"/>
                                  <param name="BlueprintString" value="@$BlueprintsExhausted"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 13: Steal Equipment Blueprints -->
                        <cue name="Action13_StealBlueprintsEquipment" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'steal_blueprint_equipment'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action13_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action13_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action13_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action13_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action13_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action13_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action13_StealBlueprintsEquipment"/>
                                  <param name="CleanupCue" value="Action13_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action13_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action13_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action13_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action13_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action13_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action13_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action13_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action13_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action13_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action13_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action13_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <run_actions ref="GetRelevantBlueprint" result="$BlueprintWare">
                                  <param name="Faction" value="$Faction"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="Agent" value="$Agent"/>
                                </run_actions>

                                <do_if value="$BlueprintWare">
                                  <add_blueprints wares="$BlueprintWare" />
                                  <set_value name="$RewardString" exact="$BlueprintWare.name"/>
                                </do_if>
                                <do_else>
                                  <!-- Player already owns all potential blueprints. Refund some credits instead -->
                                  <transfer_money from="faction.ownerless" to="faction.player" amount="diplomacy.action.{$ActionID}.cost.money"/>
                                  <set_value name="$BlueprintsExhausted" exact="'\n'+{20235,20222}"/>
                                  <set_value name="$RewardString" exact="{1001,37}"/>
                                </do_else>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action13_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action13_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="@$RewardString"/>
                                  <param name="BlueprintString" value="@$BlueprintsExhausted"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 14: Spy on Station -->
                        <cue name="Action14_SpyOnStation" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'spy_station'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action14_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action14_SuccessCalculation">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                                <do_if value="not $Success">

                                  <run_actions ref="ActionDurationCalculation" result="$PrematureCancelTime">
                                    <param name="ActionID"      value="$ActionID"/>
                                    <param name="Agent"           value="$Agent"/>
                                    <param name="ActionDuration"  value="$ActionDuration"/>
                                  </run_actions>
                                </do_if>
                                <do_else>
                                  <!-- No need to keep this one running since it was successful -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <delay exact="$PrematureCancelTime"/>
                              <actions>
                                <!-- The mission was aborted prematurely -->
                                <debug_text text="'Action not successful. Abort prematurely.'"/>
                                <signal_cue cue="Action14_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action14_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action14_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action14_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action14_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action14_SpyOnStation"/>
                                  <param name="CleanupCue" value="Action14_Cleanup"/>
                                  <param name="MovementCompletedCue" value="Action14_OngoingEffects"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <!-- Some Actions have ongoing effects that are active only for the duration of the operation -->
                            <cue name="Action14_OngoingEffects">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Give the object gravidar vision -->
                                <set_value name="$RadarEnabled"/>
                                <add_player_gravidar_access_request object="$Destination"/>

                                <!-- Send a notification that the visibility has now unlocked -->
                                <substitute_text text="$RadarConfirmationText" source="{20235,1032}">
                                  <replace string="'$TARGETDESTINATION$'" with="$Destination.knownname"/>
                                </substitute_text>
                                <show_notification text="$RadarConfirmationText"/>
                              </actions>
                            </cue>

                            <cue name="Action14_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action14_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action14_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action14_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action14_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action14_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action14_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action14_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action14_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action14_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action14_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- This action does not have a outcome reward, the reward is the ongoing effect -->

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action14_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action14_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$RadarEnabled?">
                                  <!-- Remove vision from the Destination -->
                                  <remove_player_gravidar_access_request object="$Destination"/>
                                  <!-- Send a notification that the visibility is no longer guaranteed -->
                                  <substitute_text text="$RadarCancellationText" source="{20235,1033}">
                                    <replace string="'$TARGETDESTINATION$'" with="$Destination.knownname"/>
                                  </substitute_text>
                                  <show_notification text="$RadarCancellationText"/>
                                </do_if>

                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 15: Spy on Ship -->
                        <cue name="Action15_SpyOnShip" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'spy_ship'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$ship"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action15_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action15_SuccessCalculation">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                                <do_if value="not $Success">

                                  <run_actions ref="ActionDurationCalculation" result="$PrematureCancelTime">
                                    <param name="ActionID"      value="$ActionID"/>
                                    <param name="Agent"           value="$Agent"/>
                                    <param name="ActionDuration"  value="$ActionDuration"/>
                                  </run_actions>
                                </do_if>
                                <do_else>
                                  <!-- No need to keep this one running since it was successful -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <delay exact="$PrematureCancelTime"/>
                              <actions>
                                <!-- The mission was aborted prematurely -->
                                <debug_text text="'Action not successful. Abort prematurely.'"/>
                                <signal_cue cue="Action15_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action15_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action15_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action15_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action15_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action15_SpyOnShip"/>
                                  <param name="CleanupCue" value="Action15_Cleanup"/>
                                  <param name="MovementCompletedCue" value="Action15_OngoingEffects"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <!-- Some Actions have ongoing effects that are active only for the duration of the operation -->
                            <cue name="Action15_OngoingEffects">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Give the object gravidar vision -->
                                <set_value name="$RadarEnabled"/>
                                <add_player_gravidar_access_request object="$Destination"/>

                                <!-- Send a notification that the visibility has now unlocked -->
                                <substitute_text text="$RadarConfirmationText" source="{20235,1032}">
                                  <replace string="'$TARGETDESTINATION$'" with="$Destination.knownname"/>
                                </substitute_text>
                                <show_notification text="$RadarConfirmationText"/>
                              </actions>
                            </cue>

                            <cue name="Action15_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action15_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action15_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action15_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action15_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action15_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action15_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action15_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action15_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action15_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action15_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- This action does not have a outcome reward, the reward is the ongoing effect -->

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action15_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action15_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$RadarEnabled?">
                                  <!-- Remove vision from the Destination -->
                                  <remove_player_gravidar_access_request object="$Destination"/>
                                  <!-- Send a notification that the visibility is no longer guaranteed -->
                                  <substitute_text text="$RadarCancellationText" source="{20235,1033}">
                                    <replace string="'$TARGETDESTINATION$'" with="$Destination.knownname"/>
                                  </substitute_text>
                                  <show_notification text="$RadarCancellationText"/>
                                </do_if>

                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 16 a/b/c: Acquire Inventory Item -->
                        <cue name="Action16_AcquireInventoryItem" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_any>
                              <check_value value="event.param.action.id == 'acquire_inventory_item_low'"/>
                              <check_value value="event.param.action.id == 'acquire_inventory_item_medium'"/>
                              <check_value value="event.param.action.id == 'acquire_inventory_item_high'"/>
                            </check_any>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Destination" exact="$Operation.action.$station"/>
                            <set_value name="$Faction" exact="$Destination.owner"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action16_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action16_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Bribe"     value="$Operation.action.gift"/>
                                  <param name="DiplomaticBribesTable" value="Start.$DiplomaticBribesTable"/>
                                  <param name="Faction"   value="$Faction"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action16_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action16_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action16_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action16_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action16_AcquireInventoryItem"/>
                                  <param name="CleanupCue" value="Action16_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action16_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action16_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action16_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action16_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action16_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action16_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action16_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action16_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action16_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action16_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Trigger the specific rewards through script (custom for each Action) -->
                            <cue name="Action16_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <!-- Reward the specified inventory item -->
                                <set_value name="$HQ_InventoryNPC" exact="player.headquarters.defencenpc"/>

                                <!-- The better the item the less items we hand out -->
                                <do_if value="$Operation.action.id == 'acquire_inventory_item_low'">
                                  <set_value name="$amount" min="3" max="10" profile="bell" seed="Start.$Seed"/>
                                  <advance_seed seed="Start.$Seed"/>
                                </do_if>
                                <do_elseif value="$Operation.action.id == 'acquire_inventory_item_medium'">
                                  <set_value name="$amount" min="2" max="5" profile="bell" seed="Start.$Seed"/>
                                  <advance_seed seed="Start.$Seed"/>
                                </do_elseif>
                                <do_else>
                                  <set_value name="$amount" min="1" max="3" profile="decreasing" seed="Start.$Seed"/>
                                  <advance_seed seed="Start.$Seed"/>
                                </do_else>

                                <set_value name="$RewardWare" exact="$Operation.action.$ware"/>
                                <add_inventory entity="$HQ_InventoryNPC" ware="$RewardWare" exact="$amount"/>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action16_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action16_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <do_if value="$RewardWare?">
                                  <substitute_text text="$RewardString" source="{1004,1009}">
                                    <replace string="'$AMOUNT$'" with="$amount"/>
                                    <replace string="'$WARE$'" with="$RewardWare.name"/>
                                  </substitute_text>
                                </do_if>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="$Destination.knownname"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                  <param name="RewardString" value="@$RewardString"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>
                      </cues>
                    </cue>


                    <!--
                    #### INTERFERENCE ACTIONS ####
                    -->

                    <cue name="InterferenceActions">
                      <cues>

                        <!-- Agent Action 17: Initiate Diplomatic Interference -->
                        <cue name="Action17_InitiateDiplomaticInterference" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'initiate_diplomatic_interference'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <set_value name="$Faction1" exact="$Operation.action.$faction1"/>
                            <set_value name="$Faction2" exact="$Operation.action.$faction2"/>
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action17_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action17_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action17_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action17_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action17_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action17_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action17_InitiateDiplomaticInterference"/>
                                  <param name="CleanupCue" value="Action17_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action17_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action17_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action17_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action17_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action17_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action17_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action17_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action17_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                  <do_if value="$Operation.action.gift">
                                    <set_diplomacy_gift_known faction="$Faction1" ware="$Operation.action.gift"/>
                                    <set_diplomacy_gift_known faction="$Faction2" ware="$Operation.action.gift"/>
                                  </do_if>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <signal_cue_instantly cue="Action17_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- IMPORTANT: Do not return agent to HQ since they will be marked as "Handling Event"Then return the agent back to the HQ-->
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action17_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Generate the Diplomatic Event as a reward -->
                            <cue name="Action17_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <run_actions ref="GenerateDiplomaticEvent">
                                  <param name="Faction1"  value="$Faction1"/>
                                  <param name="Faction2"  value="$Faction2"/>
                                  <param name="Agent"     value="$Agent"/>
                                  <param name="Source"    value="$Operation"/>
                                </run_actions>

                                <set_value name="stat.diplomacy_event_instigated" operation="add"/>
                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action17_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action17_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 18: Enable Protocol Null -->
                        <cue name="Action18_EnableProtocolNull" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'enable_protocol_null'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <!-- No special setup needed -->
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action18_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action18_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action18_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action18_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action18_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action18_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action18_EnableProtocolNull"/>
                                  <param name="CleanupCue" value="Action18_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action18_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action18_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action18_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action18_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action18_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action18_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action18_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action18_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action18_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action18_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Activate Protocol Null as the reward -->
                            <cue name="Action18_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <signal_cue_instantly cue="ProtocolNull_Start" param="$Agent"/>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action18_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action18_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 19: Disable Protocol Null -->
                        <cue name="Action19_DisableProtocolNull" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'disable_protocol_null'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <!-- No special setup needed -->
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action19_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action19_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action19_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action19_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action19_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine Travel Time or cancel the Agent Movement cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action19_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action19_DisableProtocolNull"/>
                                  <param name="CleanupCue" value="Action19_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action19_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action19_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action19_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action19_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action19_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action19_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action19_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action19_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action19_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action19_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Deactivate Protocol Null as the reward -->
                            <cue name="Action19_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <signal_cue cue="ProtocolNull_Stop"/>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action19_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action19_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                        <!-- Agent Action 20: Enable Heretic's End  -->
                        <cue name="Action20_Activation_Check" onfail="cancel">
                          <conditions>
                            <check_value value="Diplomacy_EnableAllGenericActions.state == cuestate.complete"/>
                          </conditions>
                          <actions>
                            <signal_cue cue="Action20_Activation"/>
                          </actions>
                        </cue>
                        <cue name="Action20_Activation">
                          <conditions>
                            <check_any>
                              <event_cue_completed cue="Diplomacy_EnableAllGenericActions"/>
                              <event_cue_signalled/>
                            </check_any>
                          </conditions>
                          <actions>
                            <!-- only run this cue if the Heretics End system is still excluded from the faction logic -->
                            <do_if value="md.Setup.HereticsEnd_Mail3.state == cuestate.complete">
                              <cancel_cue cue="this"/>
                            </do_if>

                            <find_cluster required="true" name="$HereticsEndCluster"  macro="macro.cluster_31_macro" />
                            <find_sector  required="true" name="$HereticsEndSector"   macro="macro.cluster_31_sector001_macro" space="player.galaxy" />
                          </actions>
                          <cues>

                            <cue name="Action20_EnableCheck" checkinterval="30s">
                              <conditions>
                                <check_value value="md.Setup.HereticsEnd_Mail3.state != cuestate.complete"/>
                                <check_value value="$HereticsEndCluster.isknown"/>
                              </conditions>
                              <actions>
                                <set_diplomacy_action_hidden action="'enable_factionlogic_hereticsend'" hidden="false"/>
                              </actions>
                            </cue>

                            <cue name="Action20_DeactivationListener">
                              <conditions>
                                <event_cue_completed cue="md.Setup.HereticsEnd_Mail3"/>
                              </conditions>
                              <actions>
                                <!-- If the player removed the heretic's end factionlogic stopper in another way, there is no need to continue offering this action -->
                                <set_diplomacy_action_hidden action="'enable_factionlogic_hereticsend'" hidden="true"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>
                          </cues>
                        </cue>

                        <cue name="Action20_Factionlogic_HereticsEnd" instantiate="true" namespace="this">
                          <conditions>
                            <event_diplomacy_action_operation_started/>
                            <check_value value="event.param.action.id == 'enable_factionlogic_hereticsend'"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Diplomatic Action ' + event.param.action.id + ' started'"/>
                            <set_value name="$DebugChance" exact="Start.$DebugChance"/>
                            <set_value name="$Operation" exact="event.param"/>
                            <set_value name="$ActionDuration" exact="$Operation.duration"/>
                            <set_value name="$ActionID" exact="$Operation.action.id"/>
                            <set_value name="$Agent" exact="$Operation.agent"/>

                            <!-- Params are different for each Action -->
                            <!-- No special setup needed -->
                          </actions>
                          <cues>

                            <!-- Remove Influence, inventory items and potential bribes from the HQ inventory, or the player inventory if the  -->
                            <cue name="Action20_DeductCost">
                              <actions>
                                <run_actions ref="CostDeduction_DiplomaticAction">
                                  <param name="Operation" value="$Operation"/>
                                </run_actions>
                              </actions>
                            </cue>

                            <!-- Calculate the success when the DA is started, based on the seed as to avoid save scumming. Additionally, DAs can also be failed if the destination is destroyed -->
                            <cue name="Action20_SuccessCalculation_v2">
                              <actions>
                                <!-- Calculate the success chance based on the Agent parameters and base success chance -->
                                <run_actions ref="Success_Evaluation" result="$ResultList">
                                  <param name="ActionID"  value="$ActionID"/>
                                  <param name="Agent"     value="$Agent"/>
                                </run_actions>
                                <set_value name="$Success" exact="$ResultList.{1}"/>
                                <set_value name="$BribeEffect" exact="$ResultList.{2}"/>
                                <set_value name="$AgentOutcome" exact="$ResultList.{3}"/>

                                <debug_text text="'Diplomatic Action ' + $Operation.action.id + ' will be sucessful if not aborted'" chance="if $Success then 100 else 0"/>
                              </actions>
                            </cue>

                            <cue name="Action20_DurationHandling">
                              <delay exact="$ActionDuration"/>
                              <actions>
                                <signal_cue cue="Action20_Completed"/>
                              </actions>
                            </cue>

                            <cue name="Action20_AgentMovement">
                              <actions>
                                <set_value name="$OriginStation" exact="$Agent.station"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['on_mission']]"/>

                                <!-- Determine travel time or cancel the cue -->
                                <do_if value="$Destination?">
                                  <estimate_travel_time result="$EstimatedTravelTime" start="player.headquarters" ship="$Agent.diplomacy.ship" target="$Destination" uselocalhighways="true"/>
                                  <set_value name="$TravelTime" exact="[$EstimatedTravelTime, 15min].min" />
                                </do_if>
                                <do_else>
                                  <!-- No destination, so we do not need to keep this cue going -->
                                  <cancel_cue cue="this"/>
                                </do_else>
                              </actions>
                              <cues>

                                <cue name="Action20_CloneHandling" ref="AgentActor_CloneHandling">
                                  <param name="ActionSetupCue" value="Action20_Factionlogic_HereticsEnd"/>
                                  <param name="CleanupCue" value="Action20_Cleanup"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="Destination" value="$Destination"/>
                                  <param name="TravelTime" value="$TravelTime"/>
                                </cue>

                              </cues>
                            </cue>

                            <cue name="Action20_DestinationCheck" onfail="cancel">
                              <conditions>
                                <check_value value="$Destination?"/>
                              </conditions>
                              <cues>
                                <cue name="Action20_DestinationDestroyed">
                                  <conditions>
                                    <event_object_destroyed object="$Destination"/>
                                  </conditions>
                                  <actions>
                                    <!--Set $Success to false, then signal Action20_Completed -->
                                    <set_value name="$Success" exact="false"/>
                                    <signal_cue cue="Action20_Completed"/>
                                  </actions>
                                </cue>
                              </cues>
                            </cue>

                            <!-- If player aborts we clean up the action and return the agent safely (but influence, inventory items and potential bribes are still lost) -->
                            <cue name="Action20_Abort">
                              <conditions>
                                <event_diplomacy_action_operation_aborted operation="$Operation"/>
                              </conditions>
                              <actions>
                                <cancel_cue cue="Action20_DurationHandling" comment="immediately stop the countdown to completion"/>
                                <set_value name="$DiplomaticAction_Aborted"/>
                                <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>

                                <signal_cue cue="Action20_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action20_Completed">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="not $DiplomaticAction_Aborted?">
                                  <!-- Signal that the action ran through and was not aborted by the player -->
                                  <signal_cue_instantly cue="DiplomaticActionCounter" param="[$ActionID, $Success]"/>
                                </do_if>

                                <!-- If the Action failed and there is a risk to the agent, calculate if the Agent is injured or dies, or if they return -->
                                <set_value name="$Risk" exact="diplomacy.action.{$ActionID}.agent.risk"/>
                                <do_if value="not $Success">
                                  <do_if value="$Risk != agentrisk.none">
                                    <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                                      <param name="AgentOutcome" value="$AgentOutcome"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                    <speak actor="$Agent" line="6011" delay="3s"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                  <!-- If the Action succeeded, trigger Rewards (which will delay cleanup) -->
                                  <speak actor="$Agent" line="6010" delay="3s"/>
                                  <signal_cue_instantly cue="Action20_FinalRewards"/>
                                </do_else>

                                <!-- If the agent survived, add the relevant experience, based on the risk and ActionID type -->
                                <do_if value="$AgentOutcome == agentresult.survived">
                                  <do_if value="not $DiplomaticAction_Aborted?">
                                    <run_actions ref="AgentExperience_RewardEvaluation">
                                      <param name="ActionID" value="$ActionID"/>
                                      <param name="Risk" value="$Risk"/>
                                      <param name="Agent" value="$Agent"/>
                                    </run_actions>
                                  </do_if>
                                  <!-- Then return the agent back to the HQ-->
                                  <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$Agent, ['hq_available']]"/>
                                </do_if>

                                <do_if value="not $Success">
                                  <!-- The Mission was not a success so we clean up the action now -->
                                  <signal_cue cue="Action20_Cleanup"/>
                                </do_if>
                              </actions>
                            </cue>

                            <!-- Deactivate Protocol Null as the reward -->
                            <cue name="Action20_FinalRewards">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <find_cluster required="true" name="$HereticsEndCluster"  macro="macro.cluster_31_macro" />
                                <find_sector  required="true" name="$HereticsEndSector"   macro="macro.cluster_31_sector001_macro" space="player.galaxy" />

                                <!-- unlock Heretic's End -->
                                <set_space_faction_logic_allowed allow="true" space="$HereticsEndCluster"/>
                                <set_space_faction_logic_allowed allow="true" space="$HereticsEndSector"/>

                                <!-- Hide Action since this was a one time thing -->
                                <set_diplomacy_action_hidden action="'enable_factionlogic_hereticsend'" hidden="true"/>

                                <!-- Cancel alternate way to unlock Heretic's End -->
                                <cancel_cue cue="md.Setup.HereticsEnd_FactionOwnershipClearance"/>

                                <!-- The Mission was sucessful and we triggered all rewards, clean up the action now -->
                                <signal_cue cue="Action20_Cleanup"/>
                              </actions>
                            </cue>

                            <cue name="Action20_Cleanup">
                              <conditions>
                                <event_cue_signalled/>
                              </conditions>
                              <actions>
                                <do_if value="$DiplomaticAction_Aborted?">
                                  <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                                </do_if>
                                <do_else>
                                  <!-- Mark the Action as complete -->
                                  <complete_diplomacy_action_operation operation="$Operation" success="$Success" agentresult="$AgentOutcome"/>
                                </do_else>

                                <run_actions ref="Generate_ActionLogbookEntry">
                                  <param name="Operation" value="$Operation"/>
                                  <param name="ActionID" value="$ActionID"/>
                                  <param name="Agent" value="$Agent"/>
                                  <param name="AgentOutcome" value="$AgentOutcome"/>
                                  <param name="Success" value="$Success"/>
                                  <param name="Aborted" value="if $DiplomaticAction_Aborted? then true else false"/>
                                  <param name="DestinationString" value="{20005,9015}"/>
                                  <param name="BribeEffect" value="$BribeEffect"/>
                                </run_actions>

                                <debug_text text="'Diplomatic Action ' +   $Operation.action.id + ' finished, and is cleaning up'"/>
                                <cancel_cue cue="parent"/>
                              </actions>
                            </cue>

                          </cues>
                        </cue>

                      </cues>
                    </cue>

                  </cues>
                </cue>

              </cues>
            </cue>

          </cues>
        </cue>

        <!-- Outside of EmbassyCues so that Project Null could theoretically be running even if the player does not own the Embassy yet -->
        <cue name="DiplomaticEvents">
          <cues>

            <!-- signal with a list of $Faction1, $Faction2, $EventID-->
            <cue name="DiplomaticEvent_Started" instantiate="true" namespace="this">
              <conditions>
                <event_diplomacy_event_operation_started/>
              </conditions>
              <actions>
                <set_value name="$EventOperation" exact="event.param"/>
                <set_value name="$EventID" exact="$EventOperation.event.id"/>

                <set_value name="$Faction1" exact="$EventOperation.faction"/>
                <set_value name="$Faction2" exact="$EventOperation.otherfaction"/>
                <set_value name="$AssignedAgent" exact="$EventOperation.agent"/>

                <!-- Set this faction pairing to be excluded from further diplomatic actions (temporarily) -->
                <set_faction_diplomacy_exclusion faction="$Faction1" otherfaction="$Faction2" flags="base_1"/>

                <!-- if the player has not unlocked the Interference UI yet for some reason, unlock that, too -->
                <set_value name="player.entity.$x4ep1_diplomacy_interference" exact="true"/>
              </actions>
              <cues>

                <cue name="DiplomaticEvent_AgentChanged_Check" checkinterval="2s">
                  <conditions>
                    <check_value value="$AssignedAgent != $EventOperation.agent"/>
                  </conditions>
                  <actions>
                    <!--The Player decided to send a different agent, so we need to recover the originally dispatched agent and send the new one -->
                    <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$AssignedAgent, ['hq_available']]"/>
                    <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$EventOperation.agent, ['on_mission']]"/>
                    <set_value name="$AssignedAgent" exact="$EventOperation.agent"/>
                    <reset_cue cue="this"/>
                  </actions>
                </cue>

                <!-- If the player makes a choice, record that choice and remove the associated cost -->
                <cue name="DiplomaticEvent_PlayerChoiceComitted">
                  <conditions>
                    <event_diplomacy_event_operation_option_chosen operation="$EventOperation"/>
                  </conditions>
                  <actions>
                    <set_value name="$PlayerOptionID" exact="event.param2"/>
                    <set_value name="$AssignedAgent" exact="$EventOperation.agent"/>
                    <cancel_cue cue="DiplomaticEvent_AgentChanged_Check" comment="player cannot change the agent any longer, the choice has been committed"/>

                    <run_actions ref="CostDeduction_DiplomaticEvent">
                      <param name="EventID" value="$EventID"/>
                      <param name="PlayerOptionID" value="$PlayerOptionID"/>
                    </run_actions>
                  </actions>
                </cue>

                <cue name="DiplomaticEvent_Duration">
                  <actions>
                    <set_value name="$EventDuration" exact="diplomacy.event.{$EventID}.duration"/>
                  </actions>
                  <delay exact="$EventDuration"/>
                  <actions>
                    <evaluate_diplomacy_event_operation_outcome result="$OutcomeID" operation="$EventOperation" seed="Start.$Seed"/>
                    <advance_seed seed="Start.$Seed"/>
                    <signal_cue cue="DiplomaticEvent_Concluded"/>
                  </actions>
                </cue>

                <cue name="DiplomaticEvent_Concluded">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <!-- Make this faction pairing available again for other events -->
                    <clear_faction_diplomacy_exclusion faction="$Faction1" otherfaction="$Faction2" flags="base_1"/>

                    <set_value name="$EventOperationOutcomeRelation" exact="diplomacy.event.{$EventID}.option.{$OutcomeID}.relation"/>

                    <!-- Check to see if the Agent needs to roll for risk -->
                    <do_if value="$PlayerOptionID?">
                      <set_value name="$Risk" exact="diplomacy.event.{$EventID}.option.{$PlayerOptionID}.agent.risk"/>

                      <do_if value="$OutcomeID == $PlayerOptionID">
                        <set_value name="stat.diplomacy_event_influenced" operation="add"/>
                      </do_if>

                      <do_if value="$OutcomeID != $PlayerOptionID and $Risk != agentrisk.none">
                        <run_actions ref="Risk_EvaluateOutcome" result="$AgentOutcome">
                          <param name="AgentOutcome" value="$AgentOutcome"/>
                          <param name="Agent" value="$AssignedAgent"/>
                        </run_actions>
                      </do_if>
                      <do_else>
                        <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                      </do_else>

                      <do_if value="$AgentOutcome == agentresult.survived">
                        <run_actions ref="AgentExperience_RewardEvaluation">
                          <param name="Risk" value="$Risk"/>
                          <param name="Agent" value="$AssignedAgent"/>
                        </run_actions>
                        <!-- Then return the agent back to the HQ-->
                        <signal_cue_instantly cue="md.NPC_Agent.Update_AgentPlacement" param="[$AssignedAgent, ['hq_available']]"/>
                      </do_if>
                    </do_if>
                    <do_else>
                      <!-- No Agent was involved -->
                      <set_value name="$AgentOutcome" exact="agentresult.survived"/>
                    </do_else>

                    <!-- Apply the effects of the Outcome (if there are any) -->
                    <do_if value="$Faction1.doesrelationrangechange.{$Faction1.relationto.{$Faction2}}.{$EventOperationOutcomeRelation}">
                      <set_value name="$relations_changed"/>
                      <unlock_achievement name="DIPLOMACY_EVENT" chance="if ($OutcomeID == @$PlayerOptionID) then 100 else 0"/>
                      <set_faction_relation faction="$Faction1" otherfaction="$Faction2" value="$EventOperationOutcomeRelation" reason="relationchangereason.missioncompleted"/>
                    </do_if>

                    <!-- Check for police factions and release them if the factions are policing each other and their relations fall below Friend
                    This just changes the police factions. Potential jobs are activated in faction_relations.xml -->
                    <do_if value="($Faction1.policefaction == $Faction2 or $Faction2.policefaction == $Faction1)
                                  and not $Faction1.hasrelation.friend.{$Faction2}">
                      <do_if value="$Faction1.policefaction != $Faction1">
                        <set_faction_police faction="$Faction1" policefaction="$Faction1"/>
                      </do_if>
                      <do_if value="$Faction2.policefaction != $Faction2">
                        <set_faction_police faction="$Faction2" policefaction="$Faction2"/>
                      </do_if>
                    </do_if>

                    <!-- Check if the conditions for the "The Core of Soft Power" achievement has been met
                         (turning former enemies into allies or vice versa) -->
                    <do_if value="($Faction1.defaultrelationto.{$Faction2} le -0.01 and $EventOperationOutcomeRelation ge 0.1)
                                  or ($Faction1.defaultrelationto.{$Faction2} ge 0.1 and $EventOperationOutcomeRelation le -0.01)">
                      <unlock_achievement name="CHANGE_RELATIONS"/>
                    </do_if>

                    <complete_diplomacy_event_operation operation="$EventOperation" outcome="$OutcomeID" agentresult="$AgentOutcome"/>

                    <!-- Create a logbook entry and notification for the event concluding -->
                    <set_value name="$title" exact="{20236,1001}"/>
                    <set_value name="$notificationtext" exact="$title"/>

                    <set_value name="$logtext" exact="[]" />

                    <!-- Event name -->
                    <set_value name="$logtext.{1}" operation="insert" exact="$EventOperation.event.name" />
                    <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>

                    <!-- Agent success -->
                    <do_if value="$PlayerOptionID?">
                      <do_if value="$OutcomeID == $PlayerOptionID ">
                        <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="{20236,1011}" />
                        <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                        <set_value name="$notificationtext" exact="$notificationtext + '\n' + {20236,1011}"/>
                      </do_if>
                      <do_else>
                        <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="{20236,1012}" />
                        <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                        <set_value name="$notificationtext" exact="$notificationtext + '\n' + {20236,1012}"/>
                      </do_else>
                    </do_if>
                    <do_else>
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="{20236,1013}" />
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                      <set_value name="$notificationtext" exact="$notificationtext + '\n' + {20236,1013}"/>
                    </do_else>

                    <!-- Relation change -->
                    <do_if value="$relations_changed?">
                      <do_if value="$Faction1.hasrelation.enemy.{$Faction2}">
                        <set_value name="$RelationRangeText" exact="if $Faction1.hasrelation.kill.{$Faction2} then {1001,5212}
                                                                  else {20218,601}"/>
                      </do_if>
                      <do_elseif value="$Faction1.hasrelation.friend.{$Faction2}">
                        <!-- We already trigger the ally event for member relations -->
                        <set_value name="$RelationRangeText" exact="if $Faction1.hasrelation.member.{$Faction2} then {20218,401}
                                                                  else {20218,301}"/>
                      </do_elseif>
                      <do_else>
                        <set_value name="$RelationRangeText" exact="{20218,201}"/>
                      </do_else>

                      <substitute_text text="$FactionRelationsText" source="{20236,1021}">
                        <replace string="'$SHORTFACTION1$'" with="$Faction1.shortname"/>
                        <replace string="'$SHORTFACTION2$'" with="$Faction2.shortname"/>
                        <replace string="'$RELATIONRANGE$'" with="$RelationRangeText"/>
                      </substitute_text>
                    </do_if>
                    <do_else>
                      <substitute_text text="$FactionRelationsText" source="{20236,1022}">
                        <replace string="'$SHORTFACTION1$'" with="$Faction1.shortname"/>
                        <replace string="'$SHORTFACTION2$'" with="$Faction2.shortname"/>
                      </substitute_text>
                    </do_else>
                    <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="$FactionRelationsText" />
                    <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                    <set_value name="$notificationtext" exact="$notificationtext + '\n' + $FactionRelationsText"/>

                    <!-- Agent Status -->
                    <do_if value="$PlayerOptionID?">
                      <do_if value="$AgentOutcome == agentresult.survived">
                        <substitute_text text="$AgentReturnText" source="{20235,1017}">
                          <replace string="'$AGENT$'" with="$AssignedAgent.name"/>
                        </substitute_text>
                      </do_if>
                      <do_elseif value="$AgentOutcome == agentresult.injured">
                        <substitute_text text="$AgentReturnText" source="{20236,1033}">
                          <replace string="'$AGENT$'" with="$AssignedAgent.name"/>
                        </substitute_text>
                      </do_elseif>
                      <do_else>
                        <substitute_text text="$AgentReturnText" source="{20236,1031}">
                          <replace string="'$AGENT$'" with="$AssignedAgent.name"/>
                        </substitute_text>
                      </do_else>
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="$AgentReturnText" />
                      <set_value name="$logtext.{$logtext.count + 1}" operation="insert" exact="''"/>
                      <set_value name="$notificationtext" exact="$notificationtext + '\n' + $AgentReturnText"/>
                    </do_if>

                    <show_notification text="$notificationtext"/>
                    <write_to_logbook category="diplomacy" title="$title" text="$logtext"/>

                    <cancel_cue cue="parent"/>
                  </actions>
                </cue>

              </cues>
            </cue>


            <!-- ### Handling for dynamic interference events ("Protocol Null") ###-->
            <cue name="ProtocolNull">
              <actions>
                <set_value name="$Interval" exact="0s" comment="The interval between event completion and the next potential event generations, starts as 0 so that the first event triggers immediately"/>
                <set_value name="$LastEventPlayerAge" exact="player.age"/>

                <set_value name="$ProtocolNullActive" exact="false"/>
              </actions>
              <cues>

                <cue name="ProtocolNull_Researched">
                  <conditions>
                    <event_player_production_finished research="true"/>
                    <check_value value="event.param2 == ware.research_interference_network "/>
                  </conditions>
                  <actions>
                    <!-- unhide the enable_protocol_null action for the first time -->
                    <set_diplomacy_action_hidden action="'enable_protocol_null'" hidden="false"/>

                    <!-- Dal lets the player know the research was done -->
                    <signal_cue_instantly cue="md.NPC_UseCases.UseCase" param="table[
                                                                      $caller = this, $preset = '$plotlike', $actors = $MissionActors, $debugchance = $DeepDebugChance,
                                                                      $script = [
                                                                                table[ $actor = '$DalBusta', $speak = 302960235, $recipient = 'player', $comment = 'Hello. The Protocol Null research has concluded - congratulations! Now you can send an agent to put it into action.'],
                                                                                table[ $actor = '$DalBusta', $speak = 302960236, $recipient = 'player', $comment = 'And dont worry, partner - if things start getting out of hand, you can always pull the plug.'],
                                                                                ],
                                                                      ]" />
                    <!-- Set userdata -->
                    <set_userdata storystate="'story_protocol_null'" value="1"/>
                  </actions>
                </cue>

                <cue name="ProtocolNull_Start" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <set_diplomacy_action_hidden action="'enable_protocol_null'" hidden="true"/>
                    <set_diplomacy_action_hidden action="'disable_protocol_null'" hidden="false"/>
                    <set_value name="$ProtocolNullActive"/>
                    <set_value name="$TempAgent" exact="event.param"/>
                  </actions>
                </cue>

                <cue name="ProtocolNull_Stop" instantiate="true">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <set_diplomacy_action_hidden action="'enable_protocol_null'" hidden="false"/>
                    <set_diplomacy_action_hidden action="'disable_protocol_null'" hidden="true"/>
                    <set_value name="$ProtocolNullActive" exact="false"/>
                  </actions>
                </cue>

                <!-- Reset the event whenever an associated event was finished -->
                <cue name="ProtocoltNull_GenerateEvent" checkinterval="60s">
                  <conditions>
                    <check_value value="@$ProtocolNullActive"/>
                    <check_value value="player.age ge ($LastEventPlayerAge + $Interval)"/>
                  </conditions>
                  <actions>
                    <!-- Create a list of all factions that are currently eligble for Diplomatic Events -->
                    <set_value name="$EligableFactionList" exact="[]"/>
                    <do_for_each name="$faction" valuename="$value" in="md.Diplomacy.Start.$DiplomacyFactionTable">
                      <do_if value="md.Diplomacy.Start.$DiplomacyFactionTable.{$faction}.$EventCapable == 'yes' and $faction.isactive">
                        <append_to_list name="$EligableFactionList" exact="$faction"/>
                      </do_if>
                    </do_for_each>

                    <!-- Randomly select one of the eligble factions to be Faction1 -->
                    <set_value name="this.$Faction1" exact="$EligableFactionList.random" seed="Start.$Seed"/>
                    <advance_seed seed="Start.$Seed"/>

                    <shuffle_list list="$EligableFactionList" seed="Start.$Seed"/>
                    <advance_seed seed="Start.$Seed"/>

                    <do_for_each name="$PotentialFaction2" in="$EligableFactionList">
                      <do_if value="this.$Faction1 != $PotentialFaction2
                                    and not this.$Faction1.isdiplomacyexcluded.{$PotentialFaction2}">
                        <!-- We found a valid faction pairing -->
                        <set_value name="this.$Faction2" exact="$PotentialFaction2"/>
                        <set_value name="this.$valid"/>
                        <break/>
                      </do_if>
                    </do_for_each>

                    <do_if value="this.$valid?">
                      <debug_text text="this.$Faction1 +'  / ' + this.$Faction2"/>
                      <run_actions ref="GenerateDiplomaticEvent" result="$ProtocolNull_EventOperation">
                        <param name="Faction1"  value="this.$Faction1"/>
                        <param name="Faction2"  value="this.$Faction2"/>
                        <param name="Agent"     value="null"/>
                      </run_actions>
                    </do_if>
                    <do_else>
                      <!-- Currently no Event is possible between these pairings, reset the cue and try again at a later time -->
                      <reset_cue cue="this"/>
                    </do_else>
                  </actions>
                  <cues>

                    <cue name="ProtocolNull_EventOperationEnded">
                      <conditions>
                        <check_any>
                          <check_all>
                            <event_diplomacy_event_operation_completed/>
                            <check_value value="event.param == $ProtocolNull_EventOperation"/>
                          </check_all>
                          <event_cue_signalled/>
                        </check_any>
                      </conditions>
                      <actions>
                        <set_value name="$Interval" exact="[40min, 60min].randominrange"/>
                        <set_value name="$LastEventPlayerAge" exact="player.age"/>
                        <reset_cue cue="parent"/>
                      </actions>
                    </cue>

                  </cues>
                </cue>

              </cues>
            </cue>

          </cues>
        </cue>

      </cues>
    </cue>
  </cues>

</mdscript>
