<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GMC_Supervised_Mining" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--Generic Mission Chain - Supervised Mining-->

    <!--Base Mission information-->
    <!--
      Generic Mission name:    Supervised Mining
      Primary 'missiontype':   missiontype.fight 
      Page: 30234
    -->

    <!-- Variant Table -->
    <cue name="TextOffsets" namespace="this">
      <actions>
        <set_value name="$Cue" exact="md.GMC_Supervised_Mining.GenerateGenericMission"/>
        <append_to_list name="md.GenericMissions.Manager.$StaticGMCues" exact="$Cue" create="true" unique="true"/>
        <set_value name="$Cue.$TextOffsets" exact="table[]" comment="$Cue.$TextOffsets.{$Page}.{$TextOffset}"/>
        <set_value name="$Cue.$TextOffsets.{30234}"
                   exact="table[ {1100} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1200} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1300} = table[$lastoffertime = 0s, $offercounter = 0]]"/>
      </actions>
    </cue>

    <!--
      The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		  This table is 'const' during the mission (the table itself doesn't change anymore after inialization)
	    There are several maintypes of feedback:
        event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
        removed:  The mission offer was removed before acceptance
        success:  The mission was successfully completed by the player
        failure:  The player failed the mission
        error:    Something went wrong with the mission set-up or during the mission
    -->
    <cue name="FeedbackValueManager" namespace="this" version="2">
      <actions>
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED             = table[$type = 'event',    $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED              = table[$type = 'event',    $text = 'Mission accepted'],
                   $MISSION_NO_VARIANT            = table[$type = 'event',    $text = 'No mission variant currently possible'],
                   
                   $OFFER_REMOVED                 = table[$type = 'removed',  $text = 'Offer removed'],
                   $DECLINED_OFFER                = table[$type = 'removed',  $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT           = table[$type = 'removed',  $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED           = table[$type = 'removed',  $text = 'Signal leak offer removed'],
                   
                   $MISSION_SUCCEEDED             = table[$type = 'success',  $text = 'Mission succeeded'],
                   
                   $MISSION_ABORTED               = table[$type = 'failure',  $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP                = table[$type = 'failure',  $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT               = table[$type = 'failure',  $text = 'Mission timeout'],
                   $MISSION_FAILED                = table[$type = 'failure',  $text = 'Mission failure'],
                   $ESCORT_OBJECT_DESTROYED       = table[$type = 'failure',  $text = 'Escort object destroyed'],
                   $TARGET_STATION_DESTROYED       = table[$type = 'failure',  $text = 'Target station destroyed'],
                   $FACTION_RELATIONS_CHANGED     = table[$type = 'failure',  $text = 'Faction relations changed'],
                   
                   $NO_VALID_CLIENT_OWNER         = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE            = table[$type = 'error',    $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET                = table[$type = 'error',    $text = 'No TextOffset set'],
                   $INVALID_STARTOBJECT_PARAM     = table[$type = 'error',    $text = 'Invalid StartObject param'],
                   $INVALID_INTERIOR_PARAMS       = table[$type = 'error',    $text = 'Invalid delivery room params. Either InteriorRoomMacro, InteriorCorridorMacro, Doors or InteriorName'],
                   $INVALID_DELIVERYITEM_PARAM    = table[$type = 'error',    $text = 'Invalid DeliveryItem param'],
                   $INVALID_FORCE_CLEANUP         = table[$type = 'error',    $text = 'ForceCleanup cue invalid']
                   ]"/>
      </actions>
      <patch sinceversion="2">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternatively, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!-- Register unknown TextOffsets to the TextOffsets table -->
        <run_actions ref="md.GenericMissions.RegisterMissionVariant">
          <param name="StaticGMCue" value="md.GMC_Supervised_Mining.GenerateGenericMission"/>
          <param name="Page"        value="$Page"/>
          <param name="TextOffset"  value="$TextOffset"/>
        </run_actions>

        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description
        4 = $TextTable.$logbook
        5 = $TextTable.$description0      Description for the optional Deliver_Items objective -->

        <!-- MISSION NAME -->
        <set_value name="$TextTable.$missionname"    exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/>

        <!-- MISSION BRIEFING -->
        <set_value name="$TextTable.$description"   exact="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description2? then 0 else 100"/>

        <do_if value="not $TextTable.$resourceyield?">
          <set_value name="$YieldDensity" exact="$ResourceYieldList.{1} / (64*64*64)" comment="in 1/kmÂ³"/>
          <set_value name="$TextTable.$resourceyield" exact="'%.2s'.[$YieldDensity] + ' / ' + readtext.{1001}.{114}"/>
        </do_if>

        <!-- Find Ressource objective-->
        <substitute_text text="$TextTable.$offer_findobjective"        source="readtext.{$Page}.{201}" chance="if $TextTable.$offer_findobjective? then 0 else 100">
          <replace string="'$WARE$'"       with="$ResourceList.{1}"/>
          <replace string="'$SPACE$'"      with="$FindResourcesSpace.knownname"/>
          <replace string="'$YIELD$'"      with="$TextTable.$resourceyield"/>
        </substitute_text>

        <!-- Mining Ship objective -->
        <do_if value="not $TextTable.$offer_protect_miningship?">
          <set_value name="$TextTable.$offer_protect_miningship" exact="readtext.{$Page}.{202}" />
        </do_if>

        <do_if value="not $TextTable.$offer_escort_miningship?">
          <set_value name="$TextTable.$offer_escort_miningship" exact="readtext.{$Page}.{203}" />
        </do_if>

        <!--
        ***miscellaneous mission text***
        401 = $TextTable.$ticker_insufficient      Text used for the insufficient resources notification: "Insufficient resource levels detected by probe: $WARENAME$"
        402 = $TextTable.$ticker_sufficient        Text used for the sufficient resources notification: Parameter required by RML_Find_Resources, but unused-->

        <substitute_text text="$TextTable.$ticker_insufficient"   source="readtext.{$Page}.{401}" chance="if $TextTable.$ticker_insufficient? then 0 else 100">
          <replace string="'$WARENAME$'" with="$ResourceList.{1}"/>
        </substitute_text>

        <set_value name="$TextTable.$ticker_sufficient"            exact="readtext.{$Page}.{402}" chance="if $TextTable.$ticker_sufficient? then 0 else 100"/>

        <!-- LOGBOOK -->
        <do_if value="readtext.{$Page}.{$TextOffset + 3}?">
          <substitute_text text="$TextTable.$logbook" source="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$logbook? then 0 else 100">
            <replace string="'$FACTION$'" with="$Faction"/>
          </substitute_text>
        </do_if>


      </actions>
    </library>

    <library name="GenerateVoiceTable">
      <actions>
        <run_actions ref="md.LIB_Generic.GenerateGenericVoiceTable" result="$VoiceTable">
          <param name="VoiceTable" value="$VoiceTable"/>
        </run_actions>
      </actions>
    </library>

    <library name="Start" version="2">
      <params>
        <!-- Generic Parameters -->
        <param name="OfferObject"             default="null"  comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client"                  default="null"  comment="Pre-existing client"/>
        <param name="ClientOwner"             default="null"  comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue"              default="null"  comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread"           default="null"  comment="Mission thread for the offer and mission"/>

        <param name="Faction"                 default="null"  comment="Faction"/>
        <param name="GenerateReward"          default="true"  comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr"                default="null"  comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj"               default="null"  comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety"         default="null"/>
        <param name="RewardText"              default="null"  comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj." />
        <param name="MissionDuration"         default="null"/>
        <param name="MissionType"             default="missiontype.fight" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"            default="1"/>
        <param name="Difficulty"              default="level.medium"/>
        <param name="EnemyStrength"           default="6"/>

        <!--Offer location and conversation-->
        <param name="WithoutOffer"            default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue"     default="null"  comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="DeclineButton"           default="true"  comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer"              default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer"       default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue"  default="null"  comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance"        default="null"/>
        <param name="HideFromBBS"             default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange"    default="true"/>
        <param name="OfferDistance"           default="50km"  comment="Distance to the offer location before it becomes visible on the map or BBS (unless otherwise hidden)"/>

        <!--BBS only params-->
        <param name="BBSObject"               default="null"/>
        <param name="BBSDistance"             default="null"/>
        <param name="BBSTimeoutMin"           default="null"/>
        <param name="BBSTimeoutMax"           default="null"/>
        <param name="BBSSpace"                default="null"/>

        <!--Find Resources Mission-->
        <param name="FindResourcesSpace"      comment="Space (e.g. sector) the player has to find resources in"/>
        <param name="ResourceList"            comment="List of resources to find (currently any will do)"/>
        <param name="ResourceYieldList"       comment="Minimum Yield we are looking for"/>

        <!--Mission text-->
        <param name="Page"                        comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset"                  comment="The text offset for this variant's text on the page."/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'
               Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>
        <param name="VoiceTable" default="table[]" comment="Table, usually populated by the mission, keys can have a value of 0 (=stay silent)
               .$SignalLeakVoiceLine = The line that should be used for signal leak introductions to this mission"/>

        <param name="ReportSignalCue"       default="null"  comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue"        default="null"  comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup"          default="null"  comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance"           default="0"/>
      </params>
      <actions>
        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GMC_Supervised_Mining.FeedbackValueManager"/>

        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)"
                text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
          </do_else>
        </do_if>
      </actions>
      <patch sinceversion="2">
        <set_value name="$VoiceTable" exact="table[]"/>
        <include_actions ref="GenerateVoiceTable"/>
      </patch>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>

            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <create_cue_actor cue="Start" name="$Client">
                <select faction="$ClientOwner" tags="tag.crew"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>
                <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied"/>
              </do_if>
              <do_if value="not $RewardObj">
                <run_actions ref="md.LIB_Reward_Balancing.DetermineAdditionalReward" result="$AdditionalReward">
                  <param name="RewardModWeight" value="$RewardModWeight"/>
                  <param name="RewardSeminarWeight" value="$RewardSeminarWeight"/>
                </run_actions>
                <do_if value="$AdditionalReward != null">
                  <set_value name="$RewardObj" exact="$AdditionalReward"/>
                  <set_value name="$RewardText" exact="$RewardObj.name"/>
                </do_if>
              </do_if>

              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>

            <include_actions ref="GenerateTextTable"/>
            <include_actions ref="GenerateVoiceTable"/>

            <do_if value="$ReportSignalCue">
              <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <cues>

            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <cues>
                <!--Cue which creates the offer, when signalled. To be signalled from the GenericMissions.OfferMission library, referenced below-->
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">
                      <!-- Briefing details -->
                      <create_offer cue="$MissionCue" location="$OfferObject" distance="$OfferDistance" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client"
                                  faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS" space="$BBSSpace">
                        <briefing>
                          <objective step="1"   action="objective.find"     text="$TextTable.$offer_findobjective"/>
                          <objective step="2"   action="objective.custom"   customaction="$TextTable.$offer_protect_miningship"/>
                          <objective step="3"   action="objective.escort"   text="$TextTable.$offer_escort_miningship"/>
                        </briefing>
                      </create_offer>
                      <!-- Offers might be outside the $OfferDistance (default 50km) and not seen by players but still count up -->
                      <run_actions ref="md.GenericMissions.UpdateTextOffsetsTable">
                        <param name="StaticGMCue" value="md.GMC_Supervised_Mining.GenerateGenericMission"/>
                        <param name="Page"        value="$Page"/>
                        <param name="TextOffset"  value="$TextOffset"/>
                      </run_actions>
                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>

                    <do_if value="$OfferObject.isclass.signalleak">
                      <do_if value="readtext.{$Client.page}.{$SignalLeakVoiceLine}?">
                        <update_signal_leak_voice object="$OfferObject" page="$Client.page" lines="$SignalLeakVoiceLine" />
                      </do_if>
                      <do_else>
                        <set_value name="$Feedback" exact="'$INVALID_SIGNALLEAKVOICELINE_PARAM'" />
                        <signal_cue cue="CleanUp" />
                      </do_else>
                    </do_if>
                  </actions>
                </cue>

                <!--The majority of the offer logic is within this library. The parameters we pass down below, specify in which way this mission is going to be offered to the player (i.e. BBS, Signal-Leak, ...)
                Some of the mission specific handling is still contained in this file but triggered via the library via a signal e.g. setting up the briefing details via the 'CreateOffer' cue above.-->
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"        value="$OfferType"/>
                  <param name="OfferCue"         value="$MissionCue"/>
                  <param name="CleanupCue"       value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"      value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue"   value="$CancelOfferCue"/>

                  <!--Object based params (offered by Station/Ship/Signal-leak)-->
                  <param name="TimeoutMin"           value="8min" comment="Minimum time the offer remains valid"/>
                  <param name="TimeoutMax"           value="12min"/>
                  <param name="MaxDistance"          value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject"   value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="VoiceTable"             value="$VoiceTable"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <!--Cue signalled when the offer library is finished-->
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the cases where a mission is automatically accepted on creation-->
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted" />
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="$MissionCue"/>
                  <event_briefing_submission_selected cue="$MissionCue"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>

                <set_value name="$BriefingCutsceneStarted" />
                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>

                <cue name="DisplayCutscene" onfail="cancel">
                  <conditions>
                    <check_value value="$BriefingCutsceneStarted?"/>
                  </conditions>
                  <actions>
                    <set_value name="$CutsceneObject" exact="$NPCContact" />
                    <set_value name="$CutsceneKey" exact="'ShowCharacter'" />
                    <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                      <param name="npcref" object="$CutsceneObject" />
                    </play_cutscene>
                  </actions>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="$MissionCue"/>
                      <event_briefing_submission_unselected cue="$MissionCue"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                    <do_if value="$BriefingCutsceneStarted?">
                      <remove_value name="$BriefingCutsceneStarted"/>
                      <stop_cutscene key="$CutsceneKey"/>
                    </do_if>

                    <debug_text text="'Briefing cancelled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--This cue creates the mission itself, either from scratch or via an existing mission offer-->
            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>
                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="if $TextTable.$description0? then $TextTable.$description0 else $TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_else>
                  </do_if>

                  <update_mission cue="$MissionCue">
                    <briefing>
                      <objective step="1"   action="objective.find"     text="$TextTable.$offer_findobjective"/>
                      <objective step="2"   action="objective.custom"   customaction="$TextTable.$offer_protect_miningship"/>
                      <objective step="3"   action="objective.escort"   text="$TextTable.$offer_escort_miningship"/>
                    </briefing>
                  </update_mission>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <set_value name="$MissionStep" exact="1"/>
                    <create_group groupname="$KhaakGroup"/>
                    <create_group groupname="$MiningShips"/>
                  </actions>
                  <cues>

                    <!--At this point, the mission is accepted and activated, ready for objectives to be set.
                    These are usually done by triggering a RML, but there could also be other objectives until then e.g. talk to mission actor.-->
                    <cue name="Initialise_Mission">
                      <actions>
                        <!-- Set start steps according to mission variant -->

                        <!-- Create variables which are set later -->
                        <set_value name="$PassengerShip" exact="null" comment="set by Passenger_Transport, used by Harvest_Resources"/>

                        <signal_cue cue="Find_Resources"/>
                      </actions>
                    </cue>

                    <cue name="Find_Resources">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <set_value name="$RML_ResultTable" exact="table[]"/>
                      </actions>
                      <cues>
                        <cue name="Find_Resources_Ref" ref="md.RML_Find_Resources.FindResources">
                          <param name="EndSignalCue"              value="Find_Resources_End"/>
                          <param name="MissionCue"                value="$MissionCue"/>
                          <param name="StartStep"                 value="$MissionStep" comment="Briefing step to start the mission on"/>
                          <param name="UpdateBriefing"            value="true" comment="Update the briefing objective step when the objective is updated"/>

                          <param name="Space"                     value="$FindResourcesSpace"/>
                          <param name="ResourceList"              value="$ResourceList"/>
                          <param name="ResourceYieldList"         value="$ResourceYieldList"/>
                          <param name="Text_Ticker_Insufficient"  value="$TextTable.$ticker_insufficient"/>
                          <param name="Text_Ticker_Sufficient"    value="$TextTable.$ticker_sufficient"/>

                          <param name="ResultTable"               value="$RML_ResultTable"/>

                          <param name="DebugChance"               value="$DebugChance"/>
                        </cue>
                        <cue name="Find_Resources_End">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <!-- Failure case -->
                            <do_if value="this.$EndFeedbackValue" max="0">
                              <do_if value="this.$EndFeedbackValue le -100">
                                <set_value name="$Feedback" exact="'$RML_ERROR'"/>
                              </do_if>
                              <do_else>
                                <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                              </do_else>
                              <debug_text text="'This mission has failed. RML Feedback: ' + this.$EndFeedbackValue" chance="$DebugChance"/>
                              <speak actor="$Client" line="1000403" comment="(failed mission)" />
                              <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>

                              <remove_mission cue="$MissionCue" type="failed" reason="@MissionEnded.$EndFeedbackText"/>
                              <signal_cue cue="CleanUp" />
                            </do_if>

                            <!-- Success case -->
                            <do_else>
                              <!-- Pass along location of the probe -->
                              <set_value name="$MissionCue.$FindResourcesResultTable" exact="$RML_ResultTable" comment="$ResultTable[ $ware = [$Sector = $Probe.sector, $Offset = $ProbePosition, $Probe = $Probe] ]"/>
                              <!--Signal the next stage of the mission-->
                              <do_for_each name="$ware" valuename="$table" in="$RML_ResultTable">
                                <set_value name="$Probe" exact="$table.$Probe"/>
                                <set_value name="$MiningWare" exact="$ware"/>
                                <add_to_group groupname="$Probes" object="$Probe"/>
                                <!--<set_owner object="$Probe" faction="$Faction"/>-->
                              </do_for_each>
                              <signal_cue cue="ProtectShips"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="ProtectShips">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <create_position name="$SpawnPos" object="$Probe" space="$Probe.sector" min="45km" max="75km"/>
                        <do_all exact="3" counter="$i">
                          <set_value name="$MiningShip" exact="false"/>
                          <set_value name="$SpawningInternalDock" exact="false"/>

                          <find_ship_by_true_owner name="$MiningShip" faction="$Faction" space="$Probe.sector" tag="tag.solid" class="class.ship_m" commandeerable="true" excluded="$MiningShips">
                            <match_distance object="$Probe" space="$Probe.sector" max="30km"/>
                          </find_ship_by_true_owner>

                          <do_if value="$MiningShip.isoperational">
                            <!-- Make sure the ship has enough cargo space to go mining now -->
                            <do_for_each name="$CargoWare" valuename="$CargoAmount" in="$MiningShip.cargo.table">
                              <commandeer_object object="$MiningShip"/>
                              <remove_cargo object="$MiningShip" ware="$CargoWare" exact="$CargoAmount"/>
                            </do_for_each>
                          </do_if>
                          <do_else>
                            <debug_text text="'Creating Escort Ship'" chance="$DebugChance"/>
                            <find_station name="$SpawningStation" space="$Probe.sector" sortbydistanceto="$Probe">
                              <match_content class="class.dockarea"/>
                              <match_distance object="$Probe" space="$Probe.sector" max="70km"/>
                              <match_relation_to faction="$Faction" comparison="ge" relation="dock"/>
                            </find_station>

                            <get_ship_definition reference="$TargetShipDef" size="class.ship_m" faction="$Faction" tags="tag.solid"/>
                            <do_if value="$SpawningStation">
                              <find_dockingbay name="$SpawningInternalDock" object="$SpawningStation">
                                <match_dock storage="true" size="tag.dock_m" free="true"/>
                              </find_dockingbay>
                              <do_if value="$SpawningInternalDock">
                                <create_ship name="$MiningShip" ref="$TargetShipDef" sector="$Probe.sector" capturable="false" commandeerable="false" dock="$SpawningInternalDock" groupname="$CreatedShips">
                                  <owner exact="$Faction" overridenpc="true" />
                                  <pilot>
                                    <select faction="$Faction" tags="[tag.commander]"/>
                                  </pilot>
                                  <loadout>
                                    <level exact="0.8"/>
                                  </loadout>
                                </create_ship>
                              </do_if>
                            </do_if>

                            <do_if value="not $MiningShip">
                              <create_ship name="$MiningShip" ref="$TargetShipDef" sector="$Probe.sector" capturable="false" commandeerable="false" groupname="$CreatedShips">
                                <owner exact="$Faction" overridenpc="true" />
                                <pilot>
                                  <select faction="$Faction" tags="[tag.commander]"/>
                                </pilot>
                                <loadout>
                                  <level exact="0.8"/>
                                </loadout>
                                <safepos value="$SpawnPos" min="3km" max="15km" radius="10km"/>
                              </create_ship>
                            </do_if>

                            <do_if value="$i == 1">
                              <set_value name="$Pilot1" exact="$MiningShip.pilot"/>
                            </do_if>
                            <do_elseif value="$i == 2">
                              <set_value name="$Pilot2" exact="$MiningShip.pilot"/>
                            </do_elseif>
                          </do_else>

                          <create_position name="$sectorpos" space="$Probe.sector" object="$Probe"/>
                          <cancel_all_orders object="$MiningShip"/>
                          <set_value name="$MiningShip.pilot.$noattackresponse" exact="true"/>
                          <create_order object="$MiningShip" id="'MiningCollect'">
                            <param name="destination" value="[$Probe.sector, $sectorpos]" />
                            <param name="ware" value="$MiningWare" />
                          </create_order>
                          <add_to_group groupname="$MiningShips" object="$MiningShip"/>
                        </do_all>

                        <do_if value="$MiningShips.count">
                          <create_list name="$FinishedMining"/>

                          <!-- Update objective and briefing -->
                          <set_value name="$MissionStep" operation="add" exact="1"/>
                          <set_objective cue="$MissionCue" step="$MissionStep" action="objective.custom" group="$MiningShips" customaction="$TextTable.$offer_protect_miningship" updatebriefing="true"/>

                          <signal_cue cue="MiningShipsDestroyed"/>

                          <!-- Trigger Voice Line to acknowledge change in objectives -->
                          <set_value name="$RandomLine" exact="[11702,11705].random"/>
                          <run_actions ref="md.LIB_Dialog.Speak_Actors_Run">
                            <param name="Actor"             value="[$Pilot1, $Pilot2]"/>
                            <param name="Cutscene"          value="[true, false]"/>
                            <param name="DelayInitial"      value="[30s, 2s]"/>
                            <param name="Lines"             value="[[[$RandomLine]],
                                                                 [[2103],[5031]]]"/>
                            <param name="MissionCue"        value="$MissionCue"/>
                            <param name="EndSignalCue"      value="[null, null]"/>

                            <!--
                            
                          <t id="11702">Preparing to collect resources.</t>  
                          <t id="11705">We're to mine this region.</t>
                          
                          <t id="2103">(formal acknowledgement)Affirmative.</t>
                          <t id="5031">Keep an eye on sensors.</t>
                          
                          -->

                          </run_actions>
                        </do_if>
                        <do_else>
                          <!-- Fallback: For some reason the mission was not able to create Mining Ships, so we fail the mission -->
                          <signal_cue cue="MissionFailed"/>
                        </do_else>
                      </actions>
                      <delay exact="[90s, 120s].randominrange"/>
                      <actions>
                        <run_actions ref="md.LIB_Dialog.Speak_Actor_Run">
                          <param name="Actor"             value="[$Pilot1,$Pilot2].random"/>
                          <param name="Lines"             value="[[4008]]"/>
                          <param name="MissionCue"        value="$MissionCue"/>
                          <param name="EndSignalCue"      value="null"/>

                          <!--
                            <t id="4008">Stay sharp.</t>
                          -->
                        </run_actions>

                        <set_value name="$RandomDelay" exact="[60s,90s].randominrange"/>
                        <signal_cue cue="Khaak_AttackHandling"/>
                      </actions>
                      <cues>

                        <cue name="MiningShips_CollectionUpdate" instantiate="true">
                          <conditions>
                            <event_object_picked_up_object group="$MiningShips"/>
                          </conditions>
                          <actions>
                            <do_if value="event.object.cargo.{$MiningWare}.free le (event.object.cargo.{$MiningWare}.max / 1.5)i">
                              <append_to_list name="$FinishedMining" exact="event.object"/>
                              <do_if value="$FinishedMining.count ge $MiningShips.count">
                                <!-- All ships have collected enough resources -->
                                <cancel_cue cue="Progress_Force"/>
                                <signal_cue cue="EscortShips"/>
                              </do_if>
                              <do_else>
                                <debug_text text="'Waiting with ' + event.object.knownname"/>
                                <cancel_all_orders object="event.object"/>
                                <create_order object="event.object" id="'Wait'">
                                  <param name="fidget" value="true"/>
                                </create_order>
                              </do_else>
                            </do_if>
                          </actions>
                        </cue>

                        <!-- In case the ships cannot find enough required resources, progress after a set amount of time -->
                        <cue name="Progress_Force">
                          <delay exact="15min"/>
                          <actions>
                            <signal_cue cue="EscortShips"/>
                          </actions>
                        </cue>


                      </cues>
                    </cue>

                    <cue name="MiningShipsDestroyed">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <cues>

                        <cue name="MiningShipsDestroyed_Listener" instantiate="true">
                          <conditions>
                            <event_object_destroyed group="$MiningShips"/>
                          </conditions>
                          <delay exact="1s"/>
                          <actions>
                            <do_if value="$MiningShips.count == 0">
                              <!-- No more ships to escort, fail the mission -->
                              <set_value name="$Feedback" exact="'$ESCORT_OBJECT_DESTROYED'"/>
                              <signal_cue cue="MissionFailed"/>
                            </do_if>
                            <do_else>
                              <do_if value="EscortShips.state == cuestate.waiting">
                                <set_value name="$WaitingShips" exact="0"/>
                                <do_for_each name="$ship" in="$MiningShips">
                                  <do_if value="$ship.isoperational">
                                    <do_if value="$ship.order.id == 'Wait'">
                                      <set_value name="$WaitingShips" operation="add" exact="1"/>
                                    </do_if>
                                  </do_if>
                                </do_for_each>
                                <do_if value="$WaitingShips ge $MiningShips.count">
                                  <cancel_cue cue="Progress_Force"/>
                                  <signal_cue cue="EscortShips"/>
                                </do_if>
                              </do_if>
                              <do_else>
                                <!-- Check to see if all other ships have parked at the TargetLocation -->
                                <do_if value="$ShipsDocked?">
                                  <do_if value="$MiningShips.count ge $ShipsDocked">
                                    <signal_cue cue="All_TransfersCompleted"/>
                                  </do_if>
                                </do_if>
                              </do_else>
                            </do_else>
                          </actions>
                        </cue>

                      </cues>
                    </cue>

                    <cue name="EscortShips">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!-- Trigger Voice Line to acknowledge change in objectives -->
                        <run_actions ref="md.LIB_Dialog.Speak_Actor_Run">
                          <param name="Actor"             value="[$Pilot1,$Pilot2].random"/>
                          <param name="Lines"             value="[[10306],[10906]]"/>
                          <param name="MissionCue"        value="$MissionCue"/>
                          <param name="EndSignalCue"      value="null"/>

                          <!--
                            <t id="10306">Task complete.</t>
                            <t id="10906">Tell that station we are on our way.</t>
                            -->
                        </run_actions>

                        <cancel_cue cue="ProtectShips"/>
                        <set_value name="$MissionStep" operation="add" exact="1"/>
                        <set_objective cue="$MissionCue" step="$MissionStep" action="objective.escort" group="$MiningShips" updatebriefing="true"/>

                        <find_sector_in_range name="$locsectors" multiple="true" object="$MiningShips.{1}" maxdistance="1"/>
                        <sort_list list="$locsectors" sortbyvalue="$MiningShips.{1}.gatedistance.{loop.element}"/>
                        <do_all exact="$locsectors.count" counter="$i">
                          <find_buy_offer wares="$MiningWare" space="$locsectors.{$i}" result="$buyoffers" multiple="true"/>
                          <do_if value="$buyoffers.count">
                            <break/>
                          </do_if>
                        </do_all>

                        <set_value name="$LowestTravelTime" exact="2h"/>
                        <do_if value="not $buyoffers.count">
                          <!-- Find another station nearby -->
                          <find_station name="$PotentialStations" multiple="true" space="player.galaxy" sortbygatedistanceto="$MiningShips.{1}" sortlimit="10">
                            <match_relation_to faction="$Faction" relation="dock" comparison="ge"/>
                          </find_station>
                          <do_all exact="$PotentialStations.count" counter="$i">
                            <estimate_travel_time result="$EstimatedTravelTime" start="$MiningShips.{1}" ship="$MiningShips.{1}" target="$PotentialStations.{$i}"/>
                            <do_if value="$EstimatedTravelTime lt $LowestTravelTime">
                              <set_value name="$TargetLocation" exact="$PotentialStations.{$i}"/>
                              <set_value name="$LowestTravelTime" exact="$EstimatedTravelTime"/>
                              <debug_text text="'shortest travel time: ' +  $LowestTravelTime + ' Station: ' + $TargetLocation"/>
                            </do_if>
                          </do_all>
                        </do_if>
                        <do_else>
                          <do_all exact="$buyoffers.count" counter="$i">
                            <estimate_travel_time result="$EstimatedTravelTime" start="$buyoffers.{$i}.owner" ship="$MiningShips.{1}" target="$MiningShips.{1}"/>
                            <do_if value="$EstimatedTravelTime lt $LowestTravelTime">
                              <set_value name="$TargetLocation" exact="$buyoffers.{$i}.owner"/>
                              <set_value name="$LowestTravelTime" exact="$EstimatedTravelTime"/>
                              <debug_text text="'shortest travel time: ' +  $LowestTravelTime + ' Station: ' + $TargetLocation"/>
                            </do_if>
                          </do_all>
                        </do_else>

                        <do_for_each name="$ship" in="$MiningShips">
                          <debug_text text="'Give order to ' + $ship.knownname"/>
                          <cancel_all_orders object="$ship"/>
                          <create_order object="$ship" id="'DockAndWait'" name="$dockorder" default="true">
                            <param name="destination" value="$TargetLocation"/>
                          </create_order>
                          <create_order object="$ship" id="'MoveGeneric'" name="$moveorder" immediate="true">
                            <param name="destination" value="$TargetLocation"/>
                            <param name="uselocalhighways" value="false"/>
                            <param name="debugchance" value="$DebugChance"/>
                          </create_order>
                        </do_for_each>

                      </actions>
                      <cues>
                        <cue name="OneTime_FactionRelationCheck" onfail="cancel">
                          <conditions>
                            <check_value value="$Faction != faction.criminal and $Faction != faction.civilian
                                            and $TargetLocation.trueowner != faction.criminal and $TargetLocation.trueowner != faction.civilian"/>
                            <check_value value="not $Faction.hasrelation.dock.{$TargetLocation.trueowner}"/>
                          </conditions>
                          <actions>
                            <signal_cue cue="FactionRelations_Changed"/>
                          </actions>
                        </cue>
                        
                        <cue name="FactionRelations_Changed">
                          <conditions>
                            <check_any>
                              <event_cue_signalled/>
                              <check_all>
                                <event_faction_relation_changed faction="$Faction" otherfaction="$TargetLocation.owner"/>
                                <check_value value="$Faction != faction.criminal and $Faction != faction.civilian
                                                and $TargetLocation.trueowner != faction.criminal and $TargetLocation.trueowner != faction.civilian"/>
                                <check_value value="not $Faction.hasrelation.dock.{$TargetLocation.trueowner}"/>
                              </check_all>
                            </check_any>
                          </conditions>
                          <actions>
                            <set_value name="$Feedback" exact="'$FACTION_RELATIONS_CHANGED'"/>
                            <signal_cue cue="MissionFailed"/>
                          </actions>
                        </cue>
                        
                        <cue name="StationDestroyed">
                          <conditions>
                            <event_object_destroyed object="$TargetLocation"/>
                          </conditions>
                          <actions>
                            <set_value name="$Feedback" exact="'$TARGET_STATION_DESTROYED'"/>
                            <signal_cue cue="MissionFailed"/>
                          </actions>
                        </cue>

                        <cue name="ShipDockedAtTargetStation" instantiate="true">
                          <conditions>
                            <event_object_docked group="$MiningShips"/>
                          </conditions>
                          <actions>
                            <set_value name="$ShipsDocked" operation="add" exact="1"/>
                            <do_if value="$ShipsDocked ge $MiningShips.count">
                              <signal_cue cue="All_TransfersCompleted"/>
                            </do_if>
                          </actions>
                        </cue>

                        <cue name="All_TransfersCompleted">
                          <conditions>
                            <event_cue_signalled/>
                          </conditions>
                          <actions>
                            <!-- Trigger Voice Line to acknowledge change in objectives -->
                            <run_actions ref="md.LIB_Dialog.Speak_Actor_Run">
                              <param name="Actor"             value="$MiningShips.{1}.pilot"/>
                              <param name="Lines"             value="[[6005],[10036]]"/>
                              <param name="MissionCue"        value="$MissionCue"/>
                              <param name="Cutscene"          value="true"/>
                              <param name="WaitForFullscreen" value="false"/>
                              <param name="EndSignalCue"      value="MissionEnded"/>

                              <!--
                              <t id="6005">Ware transfer's been completed.</t>
                              <t id="10036">(relief line)I'm so glad that's over.</t>
                              -->
                            </run_actions>
                          </actions>
                        </cue>

                      </cues>
                    </cue>

                    <cue name="Khaak_AttackHandling">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <cues>

                        <cue name="KhaakSpawn" checkinterval="30s">
                          <conditions>
                            <check_value value="$KhaakGroup.count lt $EnemyStrength"/>
                          </conditions>
                          <delay exact="$RandomDelay"/>
                          <actions>
                            <set_value name="$ActivateTime" exact="[3s,5s].random"/>
                            <get_safe_pos result="$TargetPos" sector="$MiningShips.{1}.sector"  object="$MiningShips.{1}" min="20km" max="35km" radius="10km" allowyaxis="false"/>
                            <create_ship name="$Ship" sector="$MiningShips.{1}.sector" commandeerable="true" groupname="$KhaakGroup">
                              <select faction="faction.khaak" size="class.ship_m"/>
                              <owner exact="faction.khaak"/>
                              <pilot actor="null"/>
                              <safepos value="$TargetPos"/>
                            </create_ship>
                            <do_if value="$Ship.exists">
                              <debug_text text="'Created Khaak ship ' + $Ship + ' ' + $Ship.knownname + ' in sector ' + $MiningShips.{1}.sector.knownname" chance="$DebugChance"/>

                              <find_object_component name="$Engines" multiple="true" object="$Ship" class="class.engine"/>
                              <do_for_each name="$Engine" in="$Engines">
                                <set_object_hacked object="$Engine" duration="$ActivateTime"/>
                              </do_for_each>

                              <do_if value="$KhaakGroup.count lt $EnemyStrength">
                                <do_all min="2" max="($EnemyStrength*0.3)i">
                                  <create_ship name="$Follower" sector="$MiningShips.{1}.sector" commandeerable="true" groupname="$KhaakGroup">
                                    <select faction="faction.khaak" size="class.ship_s"/>
                                    <owner exact="faction.khaak"/>
                                    <pilot>
                                      <select faction="faction.khaak" tags="tag.aipilot"/>
                                    </pilot>
                                    <!--TODO @Owen better spawning position for subordinates-->
                                    <safepos object="$Ship"/>
                                  </create_ship>
                                  <set_object_commander object="$Follower" commander="$Ship"/>
                                  <create_order object="$Follower" id="'Escort'" default="true">
                                    <param name="formation" value="formationshape.halfcircle"/>
                                    <!--ship width-->
                                    <param name="formationparam" value="32.6274m"/>
                                    <param name="rollformation" value="true"/>
                                    <param name="overrideformationskill" value="true"/>
                                  </create_order>
                                </do_all>
                              </do_if>

                              <add_effect object="$Ship.zone" effect="'jump_jumpin_khaak'">
                                <position object="$Ship"/>
                              </add_effect>
                            </do_if>
                            <do_else>
                              <cancel_cue cue="this"/>
                            </do_else>
                          </actions>
                          <delay exact="$ActivateTime"/>
                          <actions>
                            <do_if value="$Ship.isoperational">
                              <create_cue_actor cue="this" name="$Pilot">
                                <select faction="faction.khaak" tags="tag.aipilot"/>
                              </create_cue_actor>
                              <assign_control_entity object="$Ship" actor="$Pilot" post="controlpost.aipilot" transfer="true"/>
                              <!-- Create some unpredictability (khaak will either attack Miner, player, or patrol-->
                              <do_any>
                                <do_all>
                                  <create_order object="$Ship" id="'Attack'">
                                    <param name="primarytarget" value="$MiningShips.random"/>
                                    <param name="secondarytargets" value="$MiningShips"/>
                                    <param name="pursuetargets" value="true"/>
                                  </create_order>
                                  <create_order object="$Ship" id="'Patrol'" default="true">
                                    <param name="space" value="$Ship.sector"/>
                                  </create_order>
                                </do_all>
                                <do_all>
                                  <create_order object="$Ship" id="'Attack'">
                                    <param name="primarytarget" value="player.ship"/>
                                    <param name="secondarytargets" value="$MiningShips"/>
                                    <param name="pursuetargets" value="true"/>
                                  </create_order>
                                  <create_order object="$Ship" id="'Patrol'" default="true">
                                    <param name="space" value="$Ship.sector"/>
                                  </create_order>
                                </do_all>
                                <create_order object="$Ship" id="'Patrol'" default="true">
                                  <param name="space" value="$Ship.sector"/>
                                </create_order>
                              </do_any>
                            </do_if>
                            <set_value name="$RandomDelay" exact="[45s,90s].randominrange"/>
                            <reset_cue cue="KhaakSpawn"/>
                          </actions>
                        </cue>

                        <cue name="KhaakInitiateAttack">
                          <conditions>
                            <event_object_enemy_found group="$MiningShips"/>
                            <check_value value="event.param.owner == faction.khaak"/>
                          </conditions>
                          <actions>
                            <!-- Trigger Voice Line to acknowledge change in objectives -->
                            <run_actions ref="md.LIB_Dialog.Speak_Actor_Run">
                              <param name="Actor"             value="event.object.pilot"/>
                              <param name="Lines"             value="[[10053]]"/>
                              <param name="MissionCue"        value="$MissionCue"/>
                              <param name="EndSignalCue"      value="null"/>

                              <!--<t id="10053">Kha'ak spotted!</t>-->

                            </run_actions>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="Aborted">
                      <conditions>
                        <event_mission_aborted cue="$MissionCue"/>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                        <remove_mission cue="$MissionCue" type="aborted"/>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="MissionFailed">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <remove_mission cue="$MissionCue" type="failed"/>
                        <signal_cue_instantly cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="MissionEnded">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <do_if value="$RewardNotoriety and $ClientOwner">
                          <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                          <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                          <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                        </do_if>

                        <do_if value="$RewardCr">
                          <reward_player money="$RewardCr" />
                        </do_if>
                        <do_if value="$RewardObj">
                          <do_if value="typeof $RewardObj == datatype.ware and $RewardObj.isinventory">
                            <add_inventory entity="player.entity" ware="$RewardObj" />
                            <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                          </do_if>
                          <do_elseif value="$RewardObj.isclass.npc and $RewardObj.isshadyguy">
                            <set_entity_traits entity="$RewardObj" tradesvisible="true"/>
                            <unlock_achievement name="BLACK_MARKET"/>
                          </do_elseif>
                        </do_if>
                        <set_value name="stat.missions_completed" operation="add"/>
                        <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                        <!--<speak actor="$Client" line="1000401" comment="(successful mission)" comment="TODO @Lennart: Overlaps with docking announcement"/>-->
                        <do_if value="$TextTable.$logbook?">
                          <write_to_logbook category="missions" title="$TextTable.$missionname" text="$TextTable.$logbook" entity="$Client" money="$RewardCr" />
                        </do_if>
                        <do_else>
                          <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>
                        </do_else>

                        <run_actions ref="md.GenericMissions.UpdateTextOffsetsTable_completedcounter">
                          <param name="StaticGMCue" value="md.GMC_Supervised_Mining.GenerateGenericMission"/>
                          <param name="Page"        value="$Page"/>
                          <param name="TextOffset"  value="$TextOffset"/>
                        </run_actions>

                        <remove_mission cue="$MissionCue" type="completed" activate="next" />

                        <signal_cue_instantly cue="CleanUp" />
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!-- Clean up the ones that were created for the mission and release the rest -->
            <do_if value="$CreatedShips?">
              <do_for_each name="$ship" in="$CreatedShips">
                <remove_from_group group="$MiningShips" object="$ship"/>
                <cancel_all_orders object="$ship"/>
                <create_order id="'MoveDie'" object="$ship" immediate="true">
                  <param name="mintime" value="120s" comment="stay alive for specified time, after it docks"/>
                </create_order>
              </do_for_each>
            </do_if>

            <do_if value="$MiningShips?">
              <do_for_each name="$ship" in="$MiningShips">
                <release_commandeered_object object="$ship"/>
                <set_value name="$ship.pilot.$noattackresponse" exact="false"/>
              </do_for_each>
            </do_if>

            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>

              <do_if value="@$CutsceneCluster.exists">
                <destroy_object object="$CutsceneCluster"/>
              </do_if>
              <do_if value="$CutsceneShip.exists">
                <destroy_object object="$CutsceneShip"/>
              </do_if>
            </do_if>
            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>


            <!--***Cleanup objects***-->
            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <signal_cue_instantly cue="md.GenericMissions.CleanupActor" param="[$Client]" />
            </do_if>

            <!--***Evaluate result***-->
            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']" comment="feedback = id, type and error-text from the above FeedbackValues-table"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue" comment ="The cue which called us">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData" comment="return feedback-data to calling cue"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </library>

    <!--GENERIC MISSION VARIANTS-->

    <cue name="Force_Generic_Var_1" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 1, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_SupervisedMining_Var_1" />
    </cue>

    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateGenericMission" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Sector"           exact="event.param.$Sector"/>
        <set_value name="$ReportSignalCue"  exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant"   exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnSectorChange?">
          <set_value name="$RemoveOnSectorChange" exact="event.param.$RemoveOnSectorChange"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnSectorChange" exact="true"/>
        </do_else>

        <set_value name="$DebugChance"      exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>

        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>

        <debug_text text="'Attempting to generate a generic mission'" chance="$DebugChance"/>
      </actions>
      <cues>
        <cue name="GenerateGenericMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>

            <!--Set up some common variables first so that the variants don't have to do things multiple times-->

            <!--Find potential offer stations in the sector-->
            <create_list name="$PotentialOfferStations"/>
            <do_if value="player.exists">
              <find_station name="$PotentialOfferStations" excluded="md.GenericMissions.Manager.$ExcludedOfferObjects" space="$Sector" multiple="true">
                <match owner="md.GenericMissions.Manager.$DefaultExcludedOfferFactions" negate="true"/>
                <match_relation_to object="player.entity" comparison="not" relation="enemy" />
              </find_station>
            </do_if>

            <do_if value="$PotentialOfferStations.count">

              <do_if value="$MissionVariant">
                <!--A specific MissionVariant ID was requested-->
                <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
                <do_if value="$MissionVariant == 1">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Lennart]'"/>
                </do_else>
              </do_if>
              <do_else>
                <!--Attempt to a mission variant at random-->
                <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
              </do_else>
            </do_if>

            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateGenericMission"/>
            </do_else>
          </actions>
        </cue>

        <!-- VARIANT 1: Protect Mining Operations
        Find Resources, Protect, Escort -->
        <cue name="GenerateGenericMission_Variant_1" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>

            <set_value name="$Valid" exact="null"/>

            <find_cluster_in_range name="$ProximityClusters" object="$Sector" maxdistance="1" multiple="true"/>

            <find_station name="$KhaakPresence" owner="faction.khaak" space="$ProximityClusters"/>
            <do_if value="$KhaakPresence">

              <set_value name="$OfferStation" exact="$OfferStations.random" />
              <set_value name="$Faction" exact="$OfferStation.owner"/>
              <set_value name="$TextOffset" exact="null"/>
              <set_value name="$HarvestWaresTable" exact="table[]" comment="Wares for main objective"/>
              <set_value name="$DeliveryItemsTable" exact="table[]" comment="Wares for delivery in prologue"/>

              <set_value name="$Difficulty" exact="level.medium"/>

              <set_value name="$ValidOffsets" exact="[1100, 1200, 1300]"/>

              <!-- SelectMissionVariant library (weighted choice and $lastoffertime tracking) -->
              <run_actions ref="md.GenericMissions.SelectMissionVariant" result="$TextOffset_Table">
                <param name="StaticGMCue"    value="md.GMC_Supervised_Mining.GenerateGenericMission"/>
                <param name="ValidOffsets"   value="table[{30234} = $ValidOffsets]"/>
              </run_actions>
              <remove_value name="$ValidOffsets" comment="prevent accidental usage to select a different offset"/>
              <set_value name="$Page"         exact="$TextOffset_Table.keys.last"/>
              <set_value name="$TextOffset"   exact="$TextOffset_Table.{$Page}"/>

              <!-- Ore -->
              <do_if value="$TextOffset == 1100">
                <set_value name="$TryResource" exact="ware.ore"/>
                <set_value name="$EnemyStrength" exact="6"/>
              </do_if>
              <!-- Silicon -->
              <do_elseif value="$TextOffset == 1200">
                <set_value name="$TryResource" exact="ware.silicon"/>
                <set_value name="$MissionLevel" operation="add" comment="Silicon is slightly more rare."/>
                <set_value name="$EnemyStrength" exact="9"/>
              </do_elseif>
              <!-- NVIDIUM -->
              <do_elseif value="$TextOffset == 1300">
                <set_value name="$TryResource" exact="ware.nividium"/>
                <set_value name="$MissionLevel" operation="add" exact="3" comment="Nividium is slightly more rare and attracts more Kha'ak."/>
                <set_value name="$EnemyStrength" exact="12"/>
              </do_elseif>

              <!-- Set the smallest solid storage capacity of miners as maximum for collection -->
              <get_ship_definition macro="$MiningShips" multiple="true" size="class.ship_m" tags="[tag.miner, tag.solid]" faction="$Faction"/>
              <do_for_each name="$MiningShip" in="$MiningShips">
                <do_if value="$MiningShip.cargo.capacity.solid gt 0">
                  <set_value name="$SmallestStorage" exact="if $SmallestStorage? then [$SmallestStorage, $MiningShip.cargo.capacity.solid].min else $MiningShip.cargo.capacity.solid"/>
                </do_if>
              </do_for_each>
              <do_if value="$SmallestStorage?">
                <set_value name="$HarvestWaresTable.{$TryResource}" min="$SmallestStorage / $TryResource.volume * 0.5" max="$SmallestStorage / $TryResource.volume * 0.8"/>
                <set_value name="$HarvestWaresTable.{$TryResource}" exact="($HarvestWaresTable.{$TryResource})L / 10 * 10" comment="round"/>
                <remove_value name="$SmallestStorage"/>

                <!-- Search for resource deposit -->
                <create_list name="$ResourceTryList"/>
                <do_all exact="$HarvestWaresTable.keys.count" counter="$HWTcounter">
                  <append_to_list name="$ResourceTryList" exact="$HarvestWaresTable.keys.{$HWTcounter}"/>
                </do_all>
                <find_sector_in_range name="$SurroundingKhaakSystems" object="$KhaakPresence" maxdistance="1" multiple="true"/>
                <shuffle_list list="$SurroundingKhaakSystems"/>
                <do_all exact="$SurroundingKhaakSystems.count" counter="$i">
                  <set_value name="$Space" exact="$SurroundingKhaakSystems.{$i}"/>
                  <include_actions ref="md.GM_Find_Resources.Check_Space" comment ="input: $MissionLevel (optional), $ResourceTryList, $Space; output: $MissionLevel, $ResourceList, $ResourceYieldList, $Valid == 2"/>
                  <do_if value="$Valid == 2">
                    <set_value name="$FindResourcesSpace" exact="$Space"/>
                    <remove_value name="$Space" comment="Generic variable name, might be reused elsewhere"/>
                    <remove_value name="$ResourceTryList"/>
                    <break/>
                  </do_if>
                </do_all>
              </do_if>
            </do_if>
            <!-- Report that variant is valid -->
            <do_if value="$Valid == 2">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_1_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_1_Ref" ref="Start">

                  <param name="Faction"       value="$Faction"/>
                  <param name="OfferObject"   value="$OfferStation"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"          value="$Page"/>
                  <param name="TextOffset"    value="$TextOffset"/>

                  <!--************************* Mission specific params *************************-->
                  <!--Find Resources Mission-->
                  <param name="FindResourcesSpace"    value="$FindResourcesSpace"     comment="Space (e.g. sector) the player has to find resources in"/>
                  <param name="ResourceList"          value="$ResourceList"           comment="List of resources to find (currently any will do)"/>
                  <param name="ResourceYieldList"     value="$ResourceYieldList"      comment="Minimum Yield we are looking for"/>
                  <param name="EnemyStrength"         value="$EnemyStrength"          comment="Determines how many enemies can actively engage at once"/>

                  <param name="ReportSignalCue"       value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"           value="@GenerateGenericMission.$DebugChance"/>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

  </cues>

</mdscript>
