<?xml version="1.0" encoding="utf-8" ?>
<mdscript name="CinematicCamera" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>
    <!--
    When active the GalaxyObserver checks objects of the next channel to see if action is happening around them.
    The CinematicCameraManager will then check if a valid cutscene is available for any of these objects
    -->
    <cue name="GalaxyObserver">
      <actions>
        <create_group groupname="$ObservedObjects"/>
        <create_group groupname="$InterestingObjects"/>
      </actions>
      <cues>
        <library name="Activate_GalaxyObserver" purpose="run_actions">
          <actions>
            <set_value name="$ObservedObjects" exact="md.CinematicCamera.GalaxyObserver.$ObservedObjects"/>
            <set_value name="$InterestingObjects" exact="md.CinematicCamera.GalaxyObserver.$InterestingObjects"/>
            <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
            <clear_group group="$ObservedObjects"/>
            <clear_group group="$InterestingObjects"/>

            <do_if value="not $Manager.$StickyTarget">
              <set_value name="$MilitaryChannel" exact="false"/>
              <set_value name="$Channel" exact="faction.player"/>
              <do_if value="not $Manager.$NextTarget and not $Manager.$ChannelLock">
                <set_value name="$MilitaryChannel" exact="[0,1].random"/>
                <set_value name="$Channel" exact="$Manager.$Channels.random"/>
              </do_if>
              <do_else>
                <set_value name="$Target" exact="if $Manager.$NextTarget then $Manager.$NextTarget else $Manager.$CurrentTarget"/>
                <run_actions ref="IsMilitaryObject" result="$MilitaryChannel">
                  <param name="Object" value="$Target"/>
                </run_actions>
                <set_value name="$Channel" exact="if ($Target.trueowner == null or $Target.trueowner == faction.ownerless) then $Target.sector.trueowner else $Target.trueowner"/>
              </do_else>

              <run_actions ref="FindPotentialObjects" result="$PotentialObjects">
                <param name="Sector" value="player.galaxy"/>
                <param name="Channel" value="$Channel"/>
                <param name="MilitaryChannel" value="$MilitaryChannel"/>
              </run_actions>

              <remove_from_list name="$PotentialObjects" list="$Manager.$PreviousObjects"/>
              <add_to_group groupname="$ObservedObjects" list="$PotentialObjects"/>

              <debug_text text="'GalaxyObserver now active for ' + $Channel + if $MilitaryChannel then ' (Military)' else ' (Civilian)'" chance="$Manager.$DebugChance"/>
            </do_if>
          </actions>
        </library>
        <library name="Deactivate_GalaxyObserver" purpose="run_actions">
          <actions>
            <set_value name="$ObservedObjects" exact="md.CinematicCamera.GalaxyObserver.$ObservedObjects"/>
            <set_value name="$InterestingObjects" exact="md.CinematicCamera.GalaxyObserver.$InterestingObjects"/>
            <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
            <debug_text text="'GalaxyObserver deactivated'" chance="$Manager.$DebugChance"/>
            <clear_group group="$InterestingObjects"/>
            <clear_group group="$ObservedObjects"/>
          </actions>
        </library>
        <cue name="ObservedObject_Event" instantiate="true">
          <conditions>
            <check_any>
              <event_object_miningdrones_armed group="$ObservedObjects"/>
              <event_object_attacked_object group="$ObservedObjects"/>
              <event_object_attacked group="$ObservedObjects"/>
            </check_any>
          </conditions>
          <actions>
            <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
            <debug_text text="event.name + ': ' + event.object.knownname + ' (' + event.object.idcode + ')'" chance="$Manager.$DebugChance"/>
            <add_to_group groupname="$InterestingObjects" object="event.object"/>
            <remove_from_group group="$ObservedObjects" object="event.object"/>
            <do_if value="event.name == 'event_object_attacked_object' and event.param.isclass.asteroid or event.name == 'event_object_miningdrones_armed'">
              <debug_text text="'Mining event found: ' + event.object.knownname + ' (' + event.object.idcode + ')'" chance="$Manager.$DebugChance"/>
            </do_if>
          </actions>
        </cue>
        <cue name="InterestingObject_Destroyed" instantiate="true">
          <conditions>
            <event_object_destroyed group="$InterestingObjects"/>
          </conditions>
          <actions>
            <remove_from_group group="$InterestingObjects" object="event.object"/>
          </actions>
        </cue>
      </cues>
    </cue>

    <cue name="CinematicCameraManager_PersistentData">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$LastTarget" exact="CinematicCameraManager.$CurrentTarget"/>
        <do_if value="$LastTarget == player.container">
          <set_value name="$LastTarget" exact="null"/>
        </do_if>
      </actions>
    </cue>
    <cue name="CinematicCameraManager">
      <conditions>
        <check_any>
          <event_conversation_finished outcome="cStationManager_liveStream"/>
          <event_conversation_finished outcome="cFactionRepresentative_liveStream"/>
          <event_object_signalled object="player.entity" param="'activate_cinematic_camera'"/>
          <event_object_signalled object="player.entity" param="'activate_liveStream_Map'"/>
        </check_any>
      </conditions>
      <actions>
        <set_value name="$DebugChance" exact="0"/>
        <set_value name="$HomeSystems" exact="[
                   table[$Owner = faction.alliance, $System = macro.cluster_23_macro, $RaceSystem = false],
                   table[$Owner = faction.antigone, $System = macro.cluster_28_macro, $RaceSystem = false],
                   table[$Owner = faction.argon, $System = macro.cluster_14_macro, $RaceSystem = true],
                   table[$Owner = faction.buccaneers, $System = macro.cluster_35_macro, $RaceSystem = false],
                   table[$Owner = faction.hatikvah, $System = macro.cluster_29_macro, $RaceSystem = false],
                   table[$Owner = faction.holyorder, $System = macro.cluster_24_macro, $RaceSystem = false], 
                   table[$Owner = faction.paranid, $System = macro.cluster_18_macro, $RaceSystem = false],
                   table[$Owner = faction.paranid, $System = macro.cluster_47_macro, $RaceSystem = false],
                   table[$Owner = faction.teladi, $System = macro.cluster_15_macro, $RaceSystem = true],
                   table[$Owner = faction.trinity, $System = macro.cluster_18_macro, $RaceSystem = false],
                   table[$Owner = faction.trinity, $System = macro.cluster_47_macro, $RaceSystem = false],
                   ]"/>

        <do_if value="@$HomeSystemsPatchMarker">
        </do_if>

        <set_value name="$CheatMode" exact="false"/>
        <set_value name="$Channels" exact="[faction.player]"/>
        <set_value name="$FriendFactions" exact="[]"/>
        <get_factions_by_relation faction="faction.player" relation="friend" result="$FriendFactions"/>
        <remove_from_list name="$FriendFactions" exact="faction.player"/>
        <append_list_elements name="$Channels" other="$FriendFactions"/>
        <debug_text text="'Available Channels: ' + $Channels" chance="$DebugChance"/>

        <set_value name="$ChannelIndex" exact="1"/>
        <set_value name="$MilitaryChannel" exact="false"/>

        <set_value name="$LastModeChange" exact="player.age"/>

        <set_value name="$CurrentCutscene" exact="null"/>
        <set_value name="$LastCutsceneStartTime" exact="0s"/>
        <set_value name="$LastCutsceneCue" exact="null"/>
        <set_value name="$ResetOnInterrupt" exact="false"/>
        <set_value name="$FadeDuration" exact="2s"/>

        <!--Set an initial fade trigger. Set to -1s afterwards until another cutscene requests a fadeout-->
        <set_value name="$FadeoutTriggerTime" exact="player.age"/>

        <set_value name="$SuitabilityCheckLibraries" exact="[
                   StationPeaceful_Check,
                   ShipPeaceful_Check,
                   FighterBattle_Check,
                   Gate_Check,
                   CapitalShip_Check,
                   ShipBattle_Station_Check,
                   Gravidar_Check,
                   Venture_Check
                ]"/>

        <set_value name="$StickyTarget" exact="if @md.CinematicCamera.CinematicCameraManager_PersistentData.$LastTarget != null then md.CinematicCamera.CinematicCameraManager_PersistentData.$LastTarget else null"/>

        <do_if value="event.param == 'activate_liveStream_Map' and event.param2 != null and (not event.param2.isclass.ship_xs or event.param2.isclass.spacesuit)">
          <set_value name="$StickyTarget" exact="event.param2"/>
        </do_if>
        <set_value name="$CurrentTarget" exact="null"/>

        <do_if value="$StickyTarget">
          <run_actions ref="ValidateChannel">
            <param name="Target" value="$StickyTarget"/>
          </run_actions>
        </do_if>

        <do_if value="($StickyTarget and $StickyTarget.sector) or player.container.sector">
          <set_value name="$Sectors" exact="if $StickyTarget then [$StickyTarget.sector] else [player.container.sector]"/>
        </do_if>
        <do_else>
          <set_value name="$Sectors" exact="[]"/>
        </do_else>

        <find_sector name="$Sectors" knownto="$Channels.{$ChannelIndex}" multiple="true" excluded="$Sectors" append="true" sortbydistanceto="if $StickyTarget then $StickyTarget else player.container"/>
        <set_value name="$PreviousSectors" exact="[]"/>
        <set_value name="$PreviousObjects" exact="[]"/>

        <set_value name="$NextTarget" exact="null"/>
        <set_value name="$NextCutsceneCue" exact="null"/>

        <set_value name="$TriggeredByConversation" exact="false"/>

        <set_value name="$ObservedObject" exact="null"/>

        <set_value name="$ChannelLock" exact="false"/>

        <do_if value="not $StickyTarget" comment="If in channel mode start camera at player object">
          <do_if value="event.name == 'event_conversation_finished'">
            <set_value name="$TriggeredByConversation" exact="true"/>
            <set_value name="$Channels" exact="[event.object.trueowner]"/>
            <do_if value="event.object.station != null">
              <set_value name="$PotentialObjects" exact="[event.object.station]"/>
              <include_actions ref="GetNextCutscene"/>
              <set_value name="$ChannelLock" exact="true"/>
              <debug_text text="'Live Stream View activated via conversation'" chance="$DebugChance"/>
            </do_if>
          </do_if>
          <do_else>
            <do_if value="player.spacesuit != null">
              <set_value name="$PotentialObjects" exact="[player.spacesuit]"/>
            </do_if>
            <do_else>
              <set_value name="$PotentialObjects" exact="[player.container]"/>
              <do_if value="player.container.trueowner == $Channels.{$ChannelIndex}">
                <run_actions ref="IsMilitaryObject" result="$MilitaryChannel">
                  <param name="Object" value="player.container"/>
                </run_actions>
              </do_if>
            </do_else>
            <include_actions ref="GetNextCutscene"/>
          </do_else>
        </do_if>
        <reset_cue cue="CinematicCameraManager_PersistentData"/>
      </actions>
      <cues>
        <cue name="ToggleCheatMode" instantiate="true">
          <conditions>
            <event_object_signalled object="player.entity" param="'cinematic_camera_toggle_cheatmode'"/>
          </conditions>
          <actions>
            <do_if value="event.param2">
              <set_value name="$CheatMode" exact="true"/>
              <debug_text text="'Cheats enabled'" chance="$DebugChance"/>
              <set_value name="$Channels" exact="[faction.player]"/>

              <set_value name="$NextTarget" exact="null"/>
              <set_value name="$NextCutsceneCue" exact="null"/>
              <reset_cue cue="CinematicCamera_ShowEnvironment"/>

              <get_factions_by_relation faction="faction.player" relation="enemy" result="$EnemyFactions"/>
              <get_factions_by_relation faction="faction.player" relation="killmilitary" result="$KillMilitaryFactions"/>
              <get_factions_by_relation faction="faction.player" relation="kill" result="$KillFactions"/>
              <get_factions_by_relation faction="faction.player" relation="nemesis" result="$NemesisFactions"/>
              <remove_from_list name="$EnemyFactions" list="$KillMilitaryFactions"/>
              <remove_from_list name="$EnemyFactions" list="$KillFactions"/>
              <remove_from_list name="$EnemyFactions" list="$NemesisFactions"/>

              <get_factions_by_relation faction="faction.player" relation="neutral" result="$NeutralFactions"/>

              <set_value name="$AllFactions" exact="[]"/>
              <append_list_elements name="$AllFactions" other="$EnemyFactions"/>
              <append_list_elements name="$AllFactions" other="$NeutralFactions"/>

              <get_factions_by_tag result="$HiddenFactions" tag="tag.hidden"/>
              <remove_from_list name="$AllFactions" list="$HiddenFactions"/>
              <remove_from_list name="$AllFactions" exact="faction.player"/>

              <do_for_each name="$Faction" in="$AllFactions" reverse="true">
                <do_if value="not $Faction.isactive">
                  <remove_from_list name="$AllFactions" exact="$Faction"/>
                </do_if>
              </do_for_each>

              <sort_list list="$AllFactions" sortbyvalue="loop.element.id"/>
              <append_list_elements name="$Channels" other="$AllFactions"/>
            </do_if>
            <do_else>
              <debug_text text="'Cheats disabled'" chance="$DebugChance"/>
              <set_value name="$CheatMode" exact="false"/>
              <set_value name="$Channels" exact="[faction.player]"/>
              <set_value name="$PostiveFactions" exact="[]"/>
              <get_factions_by_relation faction="faction.player" relation="friend" result="$FriendFactions"/>
              <get_factions_by_relation faction="faction.player" relation="ally" result="$AllyFactions"/>
              <get_factions_by_relation faction="faction.player" relation="member" result="$MemberFactions"/>
              <append_list_elements name="$PostiveFactions" other="$FriendFactions"/>
              <append_list_elements name="$PostiveFactions" other="$AllyFactions"/>
              <append_list_elements name="$PostiveFactions" other="$MemberFactions"/>
              <remove_from_list name="$PostiveFactions" exact="faction.player"/>
              <append_list_elements name="$Channels" other="$PostiveFactions"/>
              <set_value name="$ChannelIndex" exact="1"/>
              <set_value name="$StickyTarget" exact="null"/>
              <set_value name="$NextTarget" exact="null"/>
              <set_value name="$NextCutsceneCue" exact="null"/>
              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
            </do_else>
          </actions>
        </cue>

        <cue name="UpdateFactionRelations" instantiate="true">
          <conditions>
            <event_faction_relation_changed faction="faction.player"/>
          </conditions>
          <actions>
            <do_if value="not $TriggeredByConversation">
              <set_value name="$UpdatedFaction" exact="event.param2"/>
              <set_value name="$NewRelationLevel" exact="event.param3.{1}"/>
              <set_value name="$OldRelationLevel" exact="event.param3.{2}"/>

              <debug_text text="'Player faction relation to ' + $UpdatedFaction + ' has changed! ' + $OldRelationLevel + ' -> ' + $NewRelationLevel" chance="$DebugChance"/>

              <set_value name="$FactionChannelIndex" exact="-1"/>

              <do_for_each name="$Channel" in="$Channels" counter="$Index">
                <do_if value="$Channel == $UpdatedFaction">
                  <set_value name="$FactionChannelIndex" exact="$Index"/>
                  <break/>
                </do_if>
              </do_for_each>
              <do_if value="$FactionChannelIndex gt -1">
                <do_if value="$NewRelationLevel lt 0.01 and $OldRelationLevel ge 0.01">
                  <do_if value="$Channels.{$ChannelIndex} == $UpdatedFaction or $ChannelIndex == 1">
                    <set_value name="$ChannelIndex" exact="1"/>
                    <set_value name="$NextTarget" exact="null"/>
                    <set_value name="$NextCutsceneCue" exact="null"/>
                  </do_if>
                  <do_elseif value="$ChannelIndex gt $FactionChannelIndex">
                    <set_value name="$ChannelIndex" operation="subtract"/>
                  </do_elseif>
                  <do_else>
                    <set_value name="$ChannelIndex" operation="add"/>
                  </do_else>
                  <remove_value name="$Channels.{$FactionChannelIndex}"/>
                  <debug_text text="'Removed ' + $UpdatedFaction" chance="$DebugChance"/>
                </do_if>
              </do_if>
              <do_elseif value="$NewRelationLevel ge 0.01 and $OldRelationLevel lt 0.01">
                <debug_text text="'Added ' + $UpdatedFaction" chance="$DebugChance"/>
                <append_to_list name="$Channels" exact="$UpdatedFaction"/>
              </do_elseif>
            </do_if>
          </actions>
        </cue>

        <cue name="OpenMap" instantiate="true">
          <conditions>
            <event_object_signalled object="player.entity" param="'cinematic_camera_open_map'"/>
          </conditions>
          <actions>
            <do_if value="$CurrentTarget.isinliveview">
              <open_menu menu="MapMenu" param="[0, 0, true, $CurrentTarget]" />
            </do_if>
          </actions>
        </cue>

        <cue name="SwitchChannel" instantiate="true">
          <conditions>
            <event_object_signalled object="player.entity" param="'cinematic_camera_switch_channel'"/>
          </conditions>
          <actions>
            <run_actions ref="Deactivate_GalaxyObserver"/>

            <set_value name="$WasLocked" exact="$ChannelLock"/>

            <do_if value="$Channels.count > 1 or (faction.player.hasrelation.ally.{$Channels.{$ChannelIndex}} and $ChannelLock)">
              <set_value name="$ChannelLock" exact="true"/>
              <set_value name="$CurrentTarget" exact="null"/>
              <set_value name="$StickyTarget" exact="null"/>

              <set_value name="$NextTarget" exact="null"/>
              <set_value name="$NextCutsceneCue" exact="null"/>

              <clear_list list="$PreviousObjects"/>
              <clear_list list="$PreviousSectors"/>

              <do_if value="not $MilitaryChannel and (faction.player.hasrelation.ally.{$Channels.{$ChannelIndex}} or $Channels.{$ChannelIndex} == faction.player)">
                <set_value name="$MilitaryChannel" exact="true"/>
              </do_if>
              <do_else>
                <set_value name="$MilitaryChannel" exact="false"/>
                <do_if value="$ChannelIndex + 1 gt $Channels.count">
                  <set_value name="$ChannelIndex" exact="1"/>
                </do_if>
                <do_else>
                  <set_value name="$ChannelIndex" operation="add"/>
                </do_else>
                <find_sector name="$Sectors" knownto="$Channels.{$ChannelIndex}" multiple="true"/>
                <debug_text text="'Current Channel: ' + $Channels.{$ChannelIndex} + ' - Military: ' + $MilitaryChannel" chance="$DebugChance"/>
              </do_else>
              <do_if value="player.timewarp.factor gt 0">
                <signal_cue cue="SceneTransition"/>
              </do_if>
              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
            </do_if>
          </actions>
          <delay exact="1s"/>
          <actions>
            <set_value name="$ChannelLock" exact="$WasLocked"/>
            <do_if value="not $ChannelLock">
              <include_actions ref="GetRandomCutscene"/>
            </do_if>
            <run_actions ref="ShowOverlay"/>
          </actions>
        </cue>

        <cue name="ChangeTarget" instantiate="true">
          <conditions>
            <event_object_signalled object="player.entity" param="'cinematic_camera_change_target'"/>
          </conditions>
          <actions>
            <run_actions ref="Deactivate_GalaxyObserver"/>
            <set_value name="$Direction" exact="event.param2"/>
            <do_if value="$Direction == 1">
              <append_to_list name="$PreviousObjects" exact="$CurrentTarget"/>
              <set_value name="$StickyTarget" exact="null"/>
            </do_if>
            <do_elseif value="$Direction == -1 and $PreviousObjects.count > 0">
              <remove_value name="$PreviousObjects.{$PreviousObjects.count}"/>
              <do_if value="$PreviousObjects.count ge 1">
                <set_value name="$StickyTarget" exact="$PreviousObjects.{$PreviousObjects.count}"/>
              </do_if>
            </do_elseif>
            <do_else>
              <set_value name="$StickyTarget" exact="null"/>
              <set_value name="$ChannelLock" exact="false"/>
            </do_else>
            <set_value name="$NextTarget" exact="null"/>
            <set_value name="$NextCutsceneCue" exact="null"/>
            <do_if value="player.timewarp.factor gt 0">
              <signal_cue cue="SceneTransition"/>
            </do_if>
            <reset_cue cue="CinematicCamera_ShowEnvironment"/>
          </actions>
          <delay exact="1s"/>
          <actions>
            <do_if value="$Direction == 1 and $ChannelLock">
              <set_value name="$StickyTarget" exact="$CurrentTarget"/>
            </do_if>
            <do_else>
              <set_value name="$StickyTarget" exact="null"/>
            </do_else>
            <run_actions ref="ShowOverlay"/>
          </actions>
        </cue>

        <cue name="ChangeLocation" instantiate="true">
          <conditions>
            <check_all>
              <event_object_signalled object="player.entity" param="'cinematic_camera_change_location'"/>
              <check_value value="$ChannelLock"/>
            </check_all>
          </conditions>
          <actions>
            <run_actions ref="Deactivate_GalaxyObserver"/>
            <clear_list list="$PreviousObjects"/>
            <set_value name="$Direction" exact="event.param2"/>
            <do_if value="$Direction == 1">
              <append_to_list name="$PreviousSectors" exact="$CurrentTarget.sector"/>
            </do_if>
            <do_elseif value="$Direction == -1 and $PreviousSectors.count > 0">
              <remove_value name="$PreviousSectors.{$PreviousSectors.count}"/>
            </do_elseif>
            <set_value name="$StickyTarget" exact="null"/>
            <set_value name="$NextTarget" exact="null"/>
            <set_value name="$NextCutsceneCue" exact="null"/>

            <do_if value="player.timewarp.factor gt 0">
              <signal_cue cue="SceneTransition"/>
            </do_if>
            <reset_cue cue="CinematicCamera_ShowEnvironment"/>
          </actions>
        </cue>

        <cue name="SceneTransition" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <fade_screen fadeout="0s" fadein="$FadeDuration" color="black"/>
            <muffle_sound strength="0.5" duration="$FadeDuration / 2"/>
          </actions>
          <delay exact="$FadeDuration / 2"/>
          <actions>
            <muffle_sound strength="0" duration="$FadeDuration / 2"/>
          </actions>
        </cue>

        <cue name="LockChannel" instantiate="true">
          <conditions>
            <event_object_signalled object="player.entity" param="'cinematic_camera_lock_channel'"/>
          </conditions>
          <actions>
            <run_actions ref="Deactivate_GalaxyObserver"/>
            <set_value name="$NextTarget" exact="null"/>
            <set_value name="$NextCutsceneCue" exact="null"/>
            <set_value name="$ChannelLock" exact="not $ChannelLock"/>
            <run_actions ref="ShowOverlay"/>
          </actions>
        </cue>

        <cue name="LockTarget" instantiate="true">
          <conditions>
            <event_object_signalled object="player.entity" param="'cinematic_camera_lock_target'"/>
          </conditions>
          <actions>
            <run_actions ref="Deactivate_GalaxyObserver"/>
            <do_if value="$StickyTarget and ($StickyTarget == $CurrentTarget)">
              <set_value name="$StickyTarget" exact="null"/>
              <set_value name="$NextTarget" exact="null"/>
              <set_value name="$NextCutsceneCue" exact="null"/>
              <debug_text text="'Sticky target disabled'" chance="$DebugChance"/>
              <run_actions ref="ShowOverlay"/>
            </do_if>
            <do_else>
              <set_value name="$StickyTarget" exact="$CurrentTarget"/>
              <set_value name="$NextTarget" exact="null"/>
              <set_value name="$NextCutsceneCue" exact="null"/>
              <debug_text text="'Sticky target is now: ' + $StickyTarget.name" chance="$DebugChance"/>
              <run_actions ref="ShowOverlay"/>
            </do_else>
          </actions>
        </cue>

        <cue name="Deactivate">
          <conditions>
            <check_any>
              <event_object_signalled object="player.entity" param="'deactivate_cinematic_camera'"/>
              <event_cue_signalled/>
            </check_any>
          </conditions>
          <actions>
            <muffle_sound strength="0" duration="0s"/>
            <run_actions ref="Deactivate_GalaxyObserver"/>
            <debug_text text="'Deactivate cinematic cutscene manager'" chance="$DebugChance"/>
            <do_if value="$CurrentCutscene">
              <stop_cutscene cutscene="$CurrentCutscene"/>
              <do_if value="player.timewarp.factor gt 0">
                <fade_screen fadeout="0s" fadein="$FadeDuration" color="black" realtime="true"/>
              </do_if>
              <precache_hint target="player.container" includechildren="true"/>
              <remove_overlay_text force="true"/>
            </do_if>
            <do_if value="event.param2 == true">
              <signal_cue_instantly cue="md.CinematicCamera.CinematicCameraManager_PersistentData"/>
            </do_if>
            <reset_cue cue="CinematicCameraManager"/>
          </actions>
        </cue>

        <library name="IsMilitaryObject" purpose="run_actions">
          <params>
            <param name="Object"/>
          </params>
          <actions>
            <!--Make sure to keep in sync with menu_interactmenu.lua-->
            <do_if value="$Object.isclass.ship and ($Object.primarypurpose == purpose.fight or player.container.primarypurpose == purpose.auxiliary) or $Object.isclass.station and ($Object.iswharf or $Object.isshipyard or $Object.isdefencestation) and not $Object.istradestation">
              <return value="true"/>
            </do_if>
            <do_else>
              <return value="false"/>
            </do_else>
          </actions>
        </library>

        <library name="RegisterStartedCutscene" purpose="run_actions">
          <params>
            <param name="CutsceneID"/>
            <param name="CallerCue"/>
            <param name="ResetOnInterrupt" default="true" comment="Reset caller cue if a new fullscreen cutscene starts, handling event cutscene interrupts"/>
            <param name="FadeoutTriggerTime" default="null" comment="Gametime at which to fade out."/>
          </params>
          <actions>
            <do_if value="$CutsceneID == null">
              <debug_text text="'Aborting Live Stream View. A cutscene could not be started. Called by: ' + $CallerCue"/>
              <signal_cue_instantly cue="Deactivate"/>
            </do_if>
            <do_else>
              <do_if value="$FadeoutTriggerTime gt -1s">
                <run_actions ref="Activate_GalaxyObserver"/>
              </do_if>
              <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
              <debug_text text="'Registering new cutscene ' + $CutsceneID + ' by cue ' + $CallerCue" chance="$Manager.$DebugChance"/>
              <do_if value="$Manager.$ResetOnInterrupt and $Manager.$LastCutsceneCue.exists and ($Manager.$LastCutsceneCue.state == cuestate.active or $Manager.$LastCutsceneCue.state == cuestate.complete)">
                <debug_text text="$Manager.$LastCutsceneCue.state" chance="$Manager.$DebugChance"/>
                <debug_text text="'Resetting ' + $Manager.$LastCutsceneCue + ' as it was interrupted'" chance="$Manager.$DebugChance"/>
                <reset_cue cue="$Manager.$LastCutsceneCue"/>
              </do_if>

              <set_value name="$Manager.$LastCutsceneStartTime" exact="player.age"/>
              <set_value name="$Manager.$CurrentCutscene" exact="$CutsceneID"/>
              <set_value name="$Manager.$LastCutsceneCue" exact="$CallerCue"/>
              <set_value name="$Manager.$ResetOnInterrupt" exact="$ResetOnInterrupt"/>
              <do_if value="$FadeoutTriggerTime ge player.age">
                <set_value name="$Manager.$FadeoutTriggerTime" exact="$FadeoutTriggerTime"/>
              </do_if>
              <do_else>
                <set_value name="$Manager.$FadeoutTriggerTime" exact="-1s"/>
              </do_else>
            </do_else>
          </actions>
        </library>

        <library name="StopCurrentCutscene" purpose="run_actions" comment="Using its own namespace just to be cleaner">
          <actions>
            <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
            <do_if value="$Manager.$CurrentCutscene">
              <debug_text text="'Stopping cutscene: ' + $Manager.$CurrentCutscene" chance="$Manager.$DebugChance"/>
              <stop_cutscene cutscene="$Manager.$CurrentCutscene"/>
              <set_value name="$CurrentTarget" exact="null"/>
            </do_if>
          </actions>
        </library>

        <cue name="Check_Fadeout" instantiate="true" checkinterval="1ms">
          <conditions>
            <check_value value="$FadeoutTriggerTime gt 0 and player.age gt $FadeoutTriggerTime"/>
          </conditions>
          <actions>
            <do_if value="player.timewarp.factor gt 0">
              <fade_screen fadeout="if $LastModeChange ge player.age - 1s then 0s else $FadeDuration" fadein="$FadeDuration * [player.timewarp.factor, 1].min" color="black"/>
            </do_if>
            <set_value name="$FadeoutTriggerTime" exact="-1s"/>
          </actions>
        </cue>

        <library name="ValidateChannel" purpose="run_actions">
          <params>
            <param name="Target" default="md.CinematicCamera.CinematicCameraManager.$CurrentTarget"/>
          </params>
          <actions>
            <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
            <run_actions ref="IsMilitaryObject" result="$MilitaryChannel">
              <param name="Object" value="$Target"/>
            </run_actions>
            <do_if value="$Target.isclass.gate or $Target.isclass.satellite">
              <set_value name="$MilitaryChannel" exact="$Manager.$MilitaryChannel"/>
            </do_if>
            <do_if value="(($Target.trueowner == null or $Target.trueowner == faction.ownerless) or $Manager.$CheatMode or ($MilitaryChannel and faction.player.hasrelation.ally.{$Target.trueowner}) or (not $MilitaryChannel and faction.player.hasrelation.friend.{$Target.trueowner})) and not ($Target == player.container and $Manager.$Channels.{$Manager.$ChannelIndex} == faction.player)">
              <do_for_each name="$Channel" in="$Manager.$Channels" counter="$Index">
                <do_if value="$Channel == $Target.trueowner or (($Target.trueowner == null or $Target.trueowner == faction.ownerless) and $Target.sector and $Target.sector.owner == $Channel)">
                  <set_value name="$Manager.$ChannelIndex" exact="$Index"/>
                  <set_value name="$Manager.$MilitaryChannel" exact="$MilitaryChannel"/>
                  <break/>
                </do_if>
              </do_for_each>
              <do_if value="$Manager.$Channels.{$Manager.$ChannelIndex} == faction.player and $Target.trueowner != faction.player">
                <set_value name="$Manager.$MilitaryChannel" exact="false"/>
              </do_if>
            </do_if>
            <do_else>
              <set_value name="$Manager.$ChannelIndex" exact="1"/>
              <find_sector name="$Manager.$Sectors" knownto="$Manager.$Channels.{$Manager.$ChannelIndex}" multiple="true" sortbydistanceto="$Target"/>
              <set_value name="$Manager.$MilitaryChannel" exact="if $Target.trueowner == faction.player then $MilitaryChannel else false"/>
            </do_else>
          </actions>
        </library>

        <library name="ShowOverlay" purpose="run_actions">
          <actions>
            <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
            <set_value name="$CurrentTarget" exact="$Manager.$CurrentTarget"/>
            <set_value name="$TargetName" exact="$CurrentTarget.knownname"/>
            <do_if value="$CurrentTarget != null and $CurrentTarget.exists">
              <do_if value="$CurrentTarget.isclass.gate">
                <set_value name="$Faction" exact="$Manager.$Channels.{$Manager.$ChannelIndex}"/>
              </do_if>
              <do_elseif value="$CurrentTarget.isvisitor">
                <set_value name="$Faction" exact="$CurrentTarget.trueowner"/>
              </do_elseif>
              <do_else>
                <set_value name="$Faction" exact="$Manager.$Channels.{$Manager.$ChannelIndex}"/>
              </do_else>
              <set_value name="$Order" exact="if ($CurrentTarget.trueowner and $CurrentTarget.trueowner.hasrelation.ally.{$Manager.$Channels.{$Manager.$ChannelIndex}} and $CurrentTarget.isclass.controllable) then $CurrentTarget.order else null"/>
              <set_value name="$StatusText" exact="null"/>
              <do_if value="$Order">
                <do_if value="$Order.id == 'DockAt'">
                  <set_value name="$StatusText" exact="$Order.name + {1001,120} + ' ' + $Order.$destination.knownname"/>
                </do_if>
                <do_elseif value="$Order.id == 'Attack' and $Order.$primarytarget.isoperational">
                  <!-- NB: $Order.$primarytarget in this case can be null. -->
                  <set_value name="$StatusText" exact="$Order.name + {1001,120} + ' ' + (if $Order.$primarytarget.isclass.object then  $Order.$primarytarget.knownname else $Order.$primarytarget.container.knownname)"/>
                </do_elseif>
                <do_elseif value="$Order.id == 'Escort'">
                  <set_value name="$StatusText" exact="$Order.name + {1001,120} + ' ' + $Order.$target.knownname"/>
                </do_elseif>
                <do_elseif value="$Order.id == 'MiningCollect'">
                  <set_value name="$StatusText" exact="$Order.name + {1001,120} + ' ' + $Order.$ware.name"/>
                </do_elseif>
                <do_elseif value="$Order.id == 'SingleTrade' or $Order.id == 'SingleBuy' or $Order.id == 'SingleSell'">
                  <set_value name="$StatusText" exact="$Order.name + {1001,120} + ' ' + $Order.$ware.name"/>
                </do_elseif>
                <do_elseif value="$Order.id == 'TradeRoutine' or $Order.id == 'TradeRoutine_Expert' or $Order.id == 'TradeRoutine_Basic' or $Order.id == 'TradeRoutine_Advanced'">
                  <set_value name="$Wares" exact="''"/>
                  <do_if value="$Order.$warebasket.count gt 0">
                    <do_for_each name="$Ware" in="$Order.$warebasket" counter="$Index">
                      <do_if value="$Index lt $Order.$warebasket.count">
                        <set_value name="$Wares" exact="$Wares + '%s, '.[$Ware]"/>
                      </do_if>
                      <do_else>
                        <set_value name="$Wares" exact="$Wares + '%s'.[$Ware]"/>
                      </do_else>
                    </do_for_each>
                    <set_value name="$StatusText" exact="$Order.name + {1001,120} + ' ' + $Wares"/>
                  </do_if>
                  <do_else>
                    <set_value name="$StatusText" exact="$Order.name"/>
                  </do_else>
                </do_elseif>
                <do_elseif value="$Order.id == 'MiningRoutine' or $Order.id == 'MiningRoutine_Expert' or $Order.id == 'MiningRoutine_Basic' or $Order.id == 'MiningRoutine_Advanced'">
                  <set_value name="$Wares" exact="''"/>
                  <do_if value="not @$Order.$warebasket.count">
                    <set_value name="$Wares" exact="$Order.$warebasket"/>
                  </do_if>
                  <do_if value="@$Order.$warebasket.count and $Order.$warebasket.count gt 0">
                    <do_for_each name="$Ware" in="$Order.$warebasket" counter="$Index">
                      <do_if value="$Index lt $Order.$warebasket.count">
                        <set_value name="$Wares" exact="$Wares + '%s, '.[$Ware]"/>
                      </do_if>
                      <do_else>
                        <set_value name="$Wares" exact="$Wares + '%s'.[$Ware]"/>
                      </do_else>
                    </do_for_each>
                  </do_if>
                  <do_if value="$Wares != ''">
                    <set_value name="$StatusText" exact="$Order.name + {1001,120} + ' ' + $Wares"/>
                  </do_if>
                  <do_else>
                    <set_value name="$StatusText" exact="$Order.name"/>
                  </do_else>
                </do_elseif>
                <do_else>
                  <set_value name="$StatusText" exact="$Order.name"/>
                </do_else>
              </do_if>
              <do_if value="$Manager.$ObservedObject">
                <do_if value="$Manager.$ObservedObject.isvisitor">
                  <set_value name="$StatusText" exact="{1001,12203} + {1001,120} + ' %s (%s)'.[$Manager.$ObservedObject.venturename, $Manager.$ObservedObject.trueowner.name]"/>
                </do_if>
                <do_else>
                  <set_value name="$StatusText" exact="{1001,12203} + {1001,120} + ' ' + $Manager.$ObservedObject.knownname"/>
                </do_else>
              </do_if>
              <do_if value="$CurrentTarget.trueowner != $Manager.$Channels.{$Manager.$ChannelIndex} and $CurrentTarget == player.container">
                <set_value name="$StatusText" exact="{1001,12210}"/>
              </do_if>

              <do_if value="@$CurrentTarget.sector">
                <set_value name="$SectorName" exact="$CurrentTarget.sector.knownname"/>
                <set_value name="$SectorOwner" exact="$CurrentTarget.sector.trueowner"/>
                <set_value name="$SpaceOwner" exact="$SectorOwner"/>
                <set_value name="$SpaceName" exact="if $SectorOwner == faction.player then $SpaceOwner.name else {20006,401}"/>
                <do_if value="$SectorOwner != faction.player and $SectorOwner != faction.ownerless">
                  <do_for_each name="$HomeSystem" in="$Manager.$HomeSystems">
                    <do_if value="not ($HomeSystem.$Owner == faction.holyorder and faction.trinity.isactive) and not ($HomeSystem.$Owner == faction.paranid and faction.trinity.isactive) and (($HomeSystem.$Owner == $SectorOwner or not $SectorOwner.mayattack.{$HomeSystem.$Owner}) and $CurrentTarget.cluster.macro.id == $HomeSystem.$System.id)">
                      <set_value name="$SpaceOwner" exact="$HomeSystem.$Owner"/>
                      <do_if value="$CurrentTarget.sector.isknown">
                        <set_value name="$SpaceName" exact="if $HomeSystem.$RaceSystem then $SectorOwner.primaryrace.homespacename else $HomeSystem.$Owner.homespacename"/>
                      </do_if>
                      <do_else>
                        <set_value name="$SpaceName" exact="{20006,101}"/>
                      </do_else>
                      <break/>
                    </do_if>
                  </do_for_each>
                  <do_if value="$SpaceName == {20006,401} and $SectorOwner != faction.ownerless">
                    <set_value name="$SpaceName" exact="if $CurrentTarget.sector.isknown then $SectorOwner.spacename else {20006,701}"/>
                  </do_if>
                </do_if>
              </do_if>
              <do_else>
                <set_value name="$SpaceName" exact="{20006,601}"/>
                <set_value name="$SectorName" exact="if $CurrentTarget.zone.isclass.highway and $CurrentTarget.zone.issuperhighway then {20001,601} else {20006,601}"/>
                <set_value name="$SpaceOwner" exact="faction.ownerless"/>
              </do_else>

              <set_value name="$ControlsConfigured" exact="table[
                         $SwitchChannel = player.input.ismapped.INPUT_ACTION_CINEMATIC_CAMERA_SWITCH_CHANNEL,
                         $LockChannel = player.input.ismapped.INPUT_ACTION_CINEMATIC_CAMERA_LOCK_CHANNEL,
                         $PrevObject = player.input.ismapped.INPUT_ACTION_CINEMATIC_CAMERA_PREV_OBJECT,
                         $NextObject = player.input.ismapped.INPUT_ACTION_CINEMATIC_CAMERA_NEXT_OBJECT,
                         $PrevLocation = player.input.ismapped.INPUT_ACTION_CINEMATIC_CAMERA_PREV_LOCATION,
                         $NextLocation = player.input.ismapped.INPUT_ACTION_CINEMATIC_CAMERA_NEXT_LOCATION,
                         $LockTarget = player.input.ismapped.INPUT_ACTION_CINEMATIC_CAMERA_LOCK_TARGET,
                         $ToggleLetterbox = player.input.ismapped.INPUT_ACTION_CINEMATIC_CAMERA_TOGGLE_LETTERBOX,
                         $ToggleHUD = player.input.ismapped.INPUT_ACTION_TOGGLE_HUD,
                         ]"/>
              <do_if value="$Manager.$MilitaryChannel">
                <set_value name="$ChannelText" exact="{1001,12216}"/>
              </do_if>
              <do_else>
                <set_value name="$ChannelText" exact="{1001,12215}"/>
              </do_else>
              <set_value name="$ControlsText" exact="
                         (if $ControlsConfigured.$SwitchChannel and $Manager.$Channels.count > 1 or $Manager.$ChannelLock and faction.player.hasrelation.ally.{$Manager.$Channels.{$Manager.$ChannelIndex}} then 
                         '%1%2 %3'.[{1005,361}, {1001,120}, '$INPUT_ACTION_CINEMATIC_CAMERA_SWITCH_CHANNEL$']
                         else '')
                         + (if $ControlsConfigured.$PrevObject and $ControlsConfigured.$NextObject then 
                         '\n' + {1005,357} + ' / ' + {1005,358} + {1001,120} + ' $INPUT_ACTION_CINEMATIC_CAMERA_PREV_OBJECT$ / $INPUT_ACTION_CINEMATIC_CAMERA_NEXT_OBJECT$'
                         else '')
                         + (if $Manager.$ChannelLock and $ControlsConfigured.$PrevLocation and $ControlsConfigured.$NextLocation then 
                         '\n' + {1005,359} + ' / ' + {1005,360} + {1001,120} + ' $INPUT_ACTION_CINEMATIC_CAMERA_PREV_LOCATION$ / $INPUT_ACTION_CINEMATIC_CAMERA_NEXT_LOCATION$'
                         else '')
                         + (if $ControlsConfigured.$LockChannel then
                         '\n%1%2 %3'.[{1005,362}, {1001,120}, '$INPUT_ACTION_CINEMATIC_CAMERA_LOCK_CHANNEL$']
                         else '') 
                         + (if $ControlsConfigured.$LockTarget then 
                         '\n%1%2 %3'.[{1005,355}, {1001,120}, '$INPUT_ACTION_CINEMATIC_CAMERA_LOCK_TARGET$']
                         else '')
                         + (if $ControlsConfigured.$ToggleLetterbox then 
                         '\n%1%2 %3'.[{1005,356}, {1001,120}, '$INPUT_ACTION_CINEMATIC_CAMERA_TOGGLE_LETTERBOX$']
                         else '') 
                         + (if $ControlsConfigured.$ToggleHUD then 
                         '\n%1%2 %3'.[{1005,223}, {1001,120}, '$INPUT_ACTION_TOGGLE_HUD$'] 
                         else '')
                         "/>
              <show_overlay_text relwidth="1.0" reloffsetx="0.0" reloffsety="0.0" fadein="$Manager.$FadeDuration" fadeout="$Manager.$FadeDuration * 0.5f">
                <row fromtop="true" reloffsety="0.008">
                  <col idx="1" text="$SectorName" bgcolor="'livestreamview_text_background'" fontsize="26" halign="left" offsetx="20" colspan="4" valign="top"/>
                  <col idx="5" textcolor="'livestreamview_text_controls'" text="$ControlsText" bgcolor="'livestreamview_text_background'" fontsize="8" halign="right" offsetx="20" colspan="3" valign="bottom"/>
                </row>
                <row fromtop="true" reloffsety="0.06">
                  <col idx="1" text="'\033[%1] %2'.[if $SpaceOwner == faction.player then player.icon else if @$CurrentTarget.sector.isknown then $SpaceOwner.icon else faction.ownerless.icon, $SpaceName]" fontsize="20" halign="left" offsetx="20" valign="top" colspan="7" bgcolor="'livestreamview_text_background_transparent'"/>
                </row>
                <row fromtop="true" reloffsety="0.150">
                  <col idx="7" icon="(if $Faction == faction.player then player.icon else $Faction.icon)" iconcolor="'livestreamview_channel_icon'" iconheight="80" iconwidth="80" halign="right" offsetx="20" bgcolor="'livestreamview_text_background_transparent'"/>
                </row>
                <row reloffsety="0.008">
                  <col idx="1" text="(if $Manager.$ChannelLock then '(%s)'.[{1001,12218}] else '')" fontsize="12" halign="left" offsetx="20" typewritereffect="true" colspan="3" bgcolor="'livestreamview_text_background_transparent'"/>
                  <col idx="4" text="(if $Manager.$StickyTarget then '(%s)'.[{1001,12209}] else '')" fontsize="12" halign="right" offsetx="20" typewritereffect="true" colspan="4" bgcolor="'livestreamview_text_background_transparent'"/>
                </row>
                <row>
                  <col idx="1" text="'%s \033#livestreamview_recording#\033[widget_circle_01]\033X'.[{1001,12201}]" bgcolor="'livestreamview_text_background'" fontsize="16" offsetx="20" valign="bottom" halign="left" colspan="4"/>
                  <col idx="5" text="$TargetName" bgcolor="'livestreamview_text_background'" fontsize="16" halign="right" offsetx="20" colspan="3"/>
                </row>
                <row>
                  <col idx="1" text="$Faction.name" bgcolor="'livestreamview_text_background'" fontsize="14" offsetx="20" halign="left" colspan="4" valign="top"/>
                  <col idx="5" text="'[%s]'.[$CurrentTarget.idcode]" bgcolor="'livestreamview_text_background'" fontsize="14" halign="right" offsetx="20" colspan="3"/>
                </row>
                <row>
                  <col idx="1" text="$ChannelText" bgcolor="'livestreamview_text_background'" fontsize="12" offsetx="20" halign="left" colspan="4" valign="top"/>
                  <col idx="5" text="if $StatusText then $StatusText else ' '" bgcolor="'livestreamview_text_background'" fontsize="12" halign="right" offsetx="20" colspan="3" wordwrap="false"/>
                </row>
              </show_overlay_text>
            </do_if>
            <do_else>
              <remove_overlay_text force="true"/>
            </do_else>
          </actions>
        </library>

        <library name="FindPotentialObjects" purpose="run_actions">
          <params>
            <param name="Sector" default="player.container.sector"/>
            <param name="Channel" default="faction.player"/>
            <param name="MilitaryChannel" default="md.CinematicCamera.CinematicCameraManager.$MilitaryChannel"/>
          </params>
          <actions>
            <set_value name="$PotentialObjects" exact="[]"/>
            <do_if value="player.container.sector == $Sector and $Channel == faction.player and not $MilitaryChannel">
              <set_value name="$PotentialObjects" exact="[player.container]"/>
            </do_if>
            <do_if value="$Sector.owner == $Channel">
              <find_gate name="$PotentialObjects" space="$Sector" multiple="true" append="true"/>
            </do_if>
            <do_if value="$MilitaryChannel">
              <find_ship_by_true_owner name="$PotentialObjects" faction="$Channel" space="$Sector" multiple="true" append="true" knownto="$Channel" class="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl]" canbelivestreamed="true">
                <match_any>
                  <match primarypurpose="purpose.fight"/>
                  <match primarypurpose="purpose.auxiliary"/>
                </match_any>
              </find_ship_by_true_owner>
              <find_station_by_true_owner name="$PotentialObjects" faction="$Channel" space="$Sector" multiple="true" append="true" knownto="$Channel" canbelivestreamed="true">
                <match_any>
                  <match defencestation="true"/>
                  <match wharf="true"/>
                  <match shipyard="true"/>
                </match_any>
              </find_station_by_true_owner>
            </do_if>
            <do_else>
              <find_ship_by_true_owner name="$PotentialObjects" faction="$Channel" space="$Sector" multiple="true" append="true" knownto="$Channel" class="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl]" canbelivestreamed="true">
                <match_any negate="true">
                  <match primarypurpose="purpose.fight"/>
                  <match primarypurpose="purpose.auxiliary"/>
                </match_any>
              </find_ship_by_true_owner>
              <find_station_by_true_owner name="$PotentialObjects" faction="$Channel" space="$Sector" multiple="true" append="true" knownto="$Channel" canbelivestreamed="true" defencestation="false" wharf="false" shipyard="false"/>
            </do_else>

            <!-- Only one satellite is added per sector to reduce the frequency of the currently only available cutscene for satellites.-->
            <find_object name="$PotentialObjects" exactclass="class.satellite" owner="$Channel" space="$Sector" multiple="false" append="true" knownto="$Channel"/>
            <debug_text text="'Found potential objects: ' + $PotentialObjects" chance="md.CinematicCamera.CinematicCameraManager.$DebugChance"/>
            <return value="$PotentialObjects"/>
          </actions>
        </library>

        <library name="GetRandomCutscene" purpose="include_actions">
          <actions>
            <set_value name="$ChannelList" exact="[]"/>
            <append_list_elements name="$ChannelList" other="$Channels"/>
            <shuffle_list list="$ChannelList"/>
            <do_for_each name="$Channel" in="$ChannelList">
              <find_sector name="$SectorPool" knownto="$Channel" multiple="true"/>
              <shuffle_list list="$SectorPool"/>
              <do_for_each name="$Sector" in="$SectorPool">
                <set_value name="$PotentialObjects" exact="[]"/>
                <do_if value="$CheatMode or faction.player.hasrelation.ally.{$Channel} or $Channel == faction.player">
                  <do_any>
                    <set_value name="$MilitaryObjects" exact="true"/>
                    <set_value name="$MilitaryObjects" exact="false"/>
                  </do_any>
                </do_if>
                <do_else>
                  <set_value name="$MilitaryObjects" exact="false"/>
                </do_else>
                <run_actions ref="FindPotentialObjects" result="$PotentialObjects">
                  <param name="Sector" value="$Sector"/>
                  <param name="Channel" value="$Channel"/>
                  <param name="MilitaryChannel" value="$MilitaryObjects"/>
                </run_actions>
                <do_if value="$PotentialObjects">
                  <shuffle_list list="$PotentialObjects"/>
                  <include_actions ref="GetNextCutscene"/>
                  <do_if value="$NextCutsceneCue">
                    <break/>
                  </do_if>
                </do_if>
              </do_for_each>
              <do_if value="$NextCutsceneCue">
                <break/>
              </do_if>
            </do_for_each>
            <do_if value="$NextCutsceneCue == null">
              <debug_text text="'Failed generating a random cutscene. Falling back to player container'" chance="$DebugChance"/>
              <set_value name="$ChannelIndex" exact="1"/>
              <run_actions ref="IsMilitaryObject" result="$MilitaryChannel">
                <param name="Object" value="player.container"/>
              </run_actions>
              <set_value name="$PotentialObjects" exact="[player.container]"/>
              <include_actions ref="GetNextCutscene"/>
            </do_if>
          </actions>
        </library>

        <library name="GetNextCutscene" purpose="include_actions">
          <actions>
            <set_value name="$SuitableCutsceneCue" exact="null"/>
            <shuffle_list list="$SuitabilityCheckLibraries"/>
            <do_for_each name="$SuitabilityCheckLibrary" in="$SuitabilityCheckLibraries">
              <debug_text text="'Checking ' + $SuitabilityCheckLibrary" chance="$DebugChance"/>
              <do_for_each name="$PotentialObject" in="$PotentialObjects">
                <run_actions ref="$SuitabilityCheckLibrary" result="$SuitableCutsceneCue">
                  <param name="Object" value="$PotentialObject"/>
                </run_actions>
                <do_if value="$SuitableCutsceneCue and $PotentialObject.exists">
                  <debug_text text="'Suitable cutscene selected: ' + $SuitableCutsceneCue" chance="$DebugChance"/>
                  <set_value name="$NextTarget" exact="$PotentialObject"/>
                  <set_value name="$NextCutsceneCue" exact="$SuitableCutsceneCue"/>
                  <precache_hint target="$NextTarget.cluster" includechildren="false"/>
                  <precache_hint target="$NextTarget.zone" includechildren="false"/>
                  <precache_hint target="$NextTarget"  includechildren="true" highquality="true"/>
                  <find_object_component name="$NPCs" object="$NextTarget" class="[class.player, class.npc]" multiple="true"/>
                  <do_for_each name="$NPC" in="$NPCs">
                    <precache_hint target="$NPC"  includechildren="true" highquality="true"/>
                  </do_for_each>
                  <find_object name="$ZoneObjects" excluded="$NextTarget" multiple="true" space="$NextTarget.zone"/>
                  <do_for_each name="$ZoneObject" in="$ZoneObjects">
                    <precache_hint target="$ZoneObject" includechildren="false"/>
                  </do_for_each>
                  <break/>
                </do_if>
              </do_for_each>
              <do_if value="$SuitableCutsceneCue">
                <break/>
              </do_if>
            </do_for_each>
          </actions>
        </library>

        <cue name="CinematicCamera_ShowEnvironment">
          <actions>
            <run_actions ref="StopCurrentCutscene"/>
          </actions>
          <cues>
            <cue name="CinematicCamera_SelectEnvironment">
              <actions>
                <set_value name="$PreloadedTarget" exact="null"/>
                <set_value name="$PreloadedCutsceneCue" exact="null"/>
                <set_value name="$ObservedObject" exact="null"/>
                <do_if value="not $StickyTarget.isoperational">
                  <set_value name="$StickyTarget" exact="null"/>
                </do_if>

                <do_if value="$StickyTarget != null">
                  <set_value name="$PotentialObjects" exact="[$StickyTarget]"/>
                  <include_actions ref="GetNextCutscene"/>
                  <run_actions ref="ValidateChannel">
                    <param name="Target" value="$StickyTarget"/>
                  </run_actions>
                  <do_if value="$NextCutsceneCue != null">
                    <signal_cue_instantly cue="$NextCutsceneCue" param="$NextTarget"/>
                  </do_if>
                </do_if>
                <do_else>
                  <set_value name="$InterestingObjects" exact="md.CinematicCamera.GalaxyObserver.$InterestingObjects.list"/>
                  <do_if value="$InterestingObjects.count gt 0" chance="75">
                    <shuffle_list list="$InterestingObjects"/>
                    <set_value name="$PotentialObjects" exact="$InterestingObjects"/>
                    <include_actions ref="GetNextCutscene"/>
                    <do_if value="$NextCutsceneCue">
                      <run_actions ref="ValidateChannel">
                        <param name="Target" value="$NextTarget"/>
                      </run_actions>
                      <debug_text text="'[PRIO] Cutscene found: ' + $NextTarget.name" chance="$DebugChance"/>
                      <append_to_list name="$PreviousObjects" exact="$NextTarget"/>
                      <break/>
                    </do_if>
                  </do_if>
                </do_else>
                <do_if value="$StickyTarget == null or $NextCutsceneCue == null">
                  <do_if value="$NextTarget != null and $NextTarget.isoperational">
                    <set_value name="$PreloadedTarget" exact="$NextTarget"/>
                    <set_value name="$PreloadedCutsceneCue" exact="$NextCutsceneCue"/>
                  </do_if>
                  <set_value name="$NextCutsceneCue" exact="null"/>
                  <do_if value="$ChannelLock">
                    <set_value name="$SectorList" exact="[]"/>
                    <append_list_elements name="$SectorList" other="$Sectors"/>
                    <remove_from_list name="$SectorList" list="$PreviousSectors" multiple="true"/>
                    <do_for_each name="$Sector" in="$SectorList">
                      <run_actions ref="FindPotentialObjects" result="$PotentialObjects">
                        <param name="Sector" value="$Sector"/>
                        <param name="Channel" value="$Channels.{$ChannelIndex}"/>
                      </run_actions>
                      <do_if value="$PreviousObjects.count > 0 and $PotentialObjects.count > 0">
                        <set_value name="$PotentialObjectsCache" exact="[]"/>
                        <append_list_elements name="$PotentialObjectsCache" other="$PotentialObjects"/>
                        <remove_from_list name="$PotentialObjectsCache" list="$PreviousObjects" multiple="true"/>
                        <set_value name="$PotentialObjects" exact="$PotentialObjectsCache"/>
                      </do_if>
                      <include_actions ref="GetNextCutscene"/>
                      <do_if value="$NextCutsceneCue">
                        <break/>
                      </do_if>
                    </do_for_each>
                    <do_if value="$NextCutsceneCue == null and $PreviousObjects.count > 0">
                      <clear_list list="$PreviousObjects"/>
                      <debug_text text="'CLEARING OBJECTS'" chance="$DebugChance"/>
                      <do_for_each name="$Sector" in="$SectorList">
                        <run_actions ref="FindPotentialObjects" result="$PotentialObjects">
                          <param name="Sector" value="$Sector"/>
                          <param name="Channel" value="$Channels.{$ChannelIndex}"/>
                        </run_actions>
                        <include_actions ref="GetNextCutscene"/>
                        <do_if value="$NextCutsceneCue">
                          <break/>
                        </do_if>
                      </do_for_each>
                    </do_if>
                    <do_if value="$NextCutsceneCue == null and $PreviousSectors.count > 0">
                      <clear_list list="$PreviousSectors"/>
                      <debug_text text="'CLEARING SECTORS'" chance="$DebugChance"/>
                      <do_for_each name="$Sector" in="$Sectors">
                        <run_actions ref="FindPotentialObjects" result="$PotentialObjects">
                          <param name="Sector" value="$Sector"/>
                          <param name="Channel" value="$Channels.{$ChannelIndex}"/>
                        </run_actions>
                        <include_actions ref="GetNextCutscene"/>
                        <do_if value="$NextCutsceneCue">
                          <break/>
                        </do_if>
                      </do_for_each>
                    </do_if>
                    <do_if value="$NextCutsceneCue == null">
                      <debug_text text="'Unable to generate cutscene for current channel. Switching!'" chance="$DebugChance"/>
                      <do_if value="not $MilitaryChannel and (faction.player.hasrelation.ally.{$Channels.{$ChannelIndex}})">
                        <set_value name="$MilitaryChannel" exact="true"/>
                        <do_for_each name="$Sector" in="$Sectors">
                          <run_actions ref="FindPotentialObjects" result="$PotentialObjects">
                            <param name="Sector" value="$Sector"/>
                            <param name="Channel" value="$Channels.{$ChannelIndex}"/>
                          </run_actions>
                          <include_actions ref="GetNextCutscene"/>
                          <do_if value="$NextCutsceneCue">
                            <debug_text text="'Switching to military channel due to relation matching condition'" chance="$DebugChance"/>
                            <break/>
                          </do_if>
                        </do_for_each>
                      </do_if>
                      <do_if value="$NextCutsceneCue == null">
                        <do_if value="$ChannelIndex + 1 gt $Channels.count">
                          <set_value name="$ChannelIndex" exact="1"/>
                        </do_if>
                        <do_else>
                          <set_value name="$ChannelIndex" operation="add"/>
                        </do_else>
                        <find_sector name="$Sectors" knownto="$Channels.{$ChannelIndex}" multiple="true"/>
                        <set_value name="$PreviousSectors" exact="[]"/>
                        <set_value name="$PreviousObjects" exact="[]"/>
                        <debug_text text="'Fallback Channel: ' + $Channels.{$ChannelIndex}" chance="$DebugChance"/>

                        <do_for_each name="$Sector" in="$Sectors">
                          <run_actions ref="FindPotentialObjects" result="$PotentialObjects">
                            <param name="Sector" value="$Sector"/>
                            <param name="Channel" value="$Channels.{$ChannelIndex}"/>
                          </run_actions>
                          <include_actions ref="GetNextCutscene"/>
                          <do_if value="$NextCutsceneCue">
                            <break/>
                          </do_if>
                        </do_for_each>
                      </do_if>
                    </do_if>
                  </do_if>
                  <do_else>
                    <include_actions ref="GetRandomCutscene"/>
                  </do_else>
                  <do_if value="$PreloadedTarget and $PreloadedCutsceneCue">
                    <run_actions ref="ValidateChannel">
                      <param name="Target" value="$PreloadedTarget"/>
                    </run_actions>
                    <signal_cue_instantly cue="$PreloadedCutsceneCue" param="$PreloadedTarget"/>
                    <debug_text text="'Cutscene was preloaded. Current Target: ' + $PreloadedTarget.name + ' (' + $PreloadedTarget + ')'" chance="$DebugChance"/>
                    <do_if value="$PreloadedTarget != $StickyTarget">
                      <append_to_list name="$PreviousObjects" exact="$PreloadedTarget"/>
                    </do_if>
                  </do_if>
                  <do_elseif value="$NextTarget and $NextCutsceneCue">
                    <run_actions ref="ValidateChannel">
                      <param name="Target" value="$NextTarget"/>
                    </run_actions>
                    <signal_cue_instantly cue="$NextCutsceneCue" param="$NextTarget"/>
                    <debug_text text="'Current Target: ' + $NextTarget.name + ' (' + $NextTarget + ')'" chance="$DebugChance"/>
                    <do_if value="$NextTarget != $StickyTarget">
                      <append_to_list name="$PreviousObjects" exact="$NextTarget"/>
                    </do_if>
                    <do_if value="not $ChannelLock">
                      <include_actions ref="GetRandomCutscene"/>
                    </do_if>
                    <do_else>
                      <include_actions ref="GetNextCutscene"/>
                    </do_else>
                  </do_elseif>
                  <do_else>
                    <debug_text text="'No valid target was found! Deactivating Cinematic Mode'" chance="$DebugChance"/>
                    <signal_cue_instantly cue="Deactivate"/>
                  </do_else>
                </do_if>
                <run_actions ref="Deactivate_GalaxyObserver"/>
              </actions>
            </cue>

            <!--cues for specific environments / objects / situations-->

            <library name="StationPeaceful_Check" purpose="run_actions">
              <params>
                <param name="Object"/>
                <param name="DebugChance" default="0"/>
              </params>
              <actions>
                <do_if value="$Object.isclass.station">
                  <return value="StationPeaceful"/>
                </do_if>
                <return value="null"/>
              </actions>
            </library>

            <cue name="StationPeaceful" namespace="this">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
                <set_value name="$DebugChance" exact="$Manager.$DebugChance"/>
                <set_value name="$EndTime" min="player.age + 15s" max="player.age + 25s"/>

                <set_value name="$Station" exact="event.param"/>
                <set_value name="$Manager.$CurrentTarget" exact="$Station"/>
                <run_actions ref="ShowOverlay"/>
                <set_value name="$LastView" exact="''"/>
                <!--<do_if value="player.target.isclass.station">
                  <set_value name="$Station" exact="player.target"/>
                </do_if>-->
                <set_value name="$Sector" exact="$Station.sector"/>
                <set_value name="$Cluster" exact="$Sector.cluster"/>
                <set_value name="$PlanetPositions" exact="[]"/>
                <do_for_each name="$Planet" in="$Cluster.planets">
                  <append_to_list name="$PlanetPositions" exact="$Cluster.world.{$Planet}.position.{$Sector}"/>
                </do_for_each>
              
                <set_value name="$HostileEncounter" exact="null"/>
              </actions>
              <cues>
                <cue name="StationPeaceful_HostileEncounter" instantiate="true">
                  <conditions>
                    <check_any>
                      <event_object_attacked object="$Station"/>
                      <event_object_attacked_object object="$Station"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="event.param.isclass.ship or event.param.isclass.station">
                      <set_value name="$HostileEncounter" exact="event.param"/>
                    </do_if>
                  </actions>
                </cue>
                <cue name="StationPeaceful_ShowView">
                  <cues>
                    <cue name="StationPeaceful_SelectView">
                      <actions>
                        <set_value name="$Manager.$ResetOnInterrupt" exact="false"/>

                        <do_if value="player.age gt $EndTime">
                          <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                        </do_if>
                        <do_else>
                          <do_if value="not $Station.iswreck">
                            <find_room name="$Room" object="$Station" walkable="true">
                              <match_parent class="class.navcontext"/>
                              <match roomtype="roomtype.corridor" negate="true"/>
                            </find_room>
                            <find_module name="$DockingArea" class="class.walkablemodule" object="$Station">
                              <match_dock walkable="true"/>
                            </find_module>
                            <find_object_component name="$Ships" object="$Station" class="class.ship" multiple="true" canbelivestreamed="true"/>
                            <set_value name="$Ship" exact="if $Ships.count > 0 then $Ships.random else null"/>

                            <set_value name="$StationZoomParams" exact="table[$Station = $Station, $ValidShots = []]"/>
                            
                            <do_if value="$Station.isphysicsready">
                              <find_ship name="$ShipsInRange" space="$Sector" multiple="true" class="class.ship_s" canbelivestreamed="true" docked="false">
                                <match_distance object="$Station" min="200m" max="2.5km"/>
                              </find_ship>
                              <find_ship name="$ShipsInRange" space="$Sector" append="true" multiple="true" class="class.ship_m" canbelivestreamed="true" docked="false">
                                <match_distance object="$Station" min="200m" max="5km"/>
                              </find_ship>
                              <find_ship name="$ShipsInRange" space="$Sector" append="true" multiple="true" class="class.ship_l" canbelivestreamed="true" docked="false">
                                <match_distance object="$Station" min="200m" max="15km"/>
                              </find_ship>
                              <find_ship name="$ShipsInRange" space="$Sector" append="true" multiple="true" class="class.ship_xl" canbelivestreamed="true" docked="false">
                                <match_distance object="$Station" min="200m" max="25km"/>
                              </find_ship>

                              <set_value name="$ValidShots" exact="[]"/>

                              <do_for_each name="$Ship" in="$ShipsInRange">
                                <find_object_component name="$StationModules" object="$Station" multiple="true" class="class.module" sortbyvalue="loop.element.position.distanceto.{$Ship.position}" sortdescending="true" checkoperational="true">
                                  <match_is_in_view_of object="$Ship" vertical="180deg" horizontal="180deg"/>
                                </find_object_component>
                                <do_for_each name="$StationModule" in="$StationModules">
                                  <find_object_surface posname="$SurfacePos" object="$StationModule" height="20.0" tolerateneighbour="false">
                                    <match surfaceelement="false">
                                      <match class="class.room" negate="true"/>
                                    </match>
                                  </find_object_surface>
                                  <do_if value="$SurfacePos">
                                    <check_line_of_sight name="$InLineOfSight" object="$StationModule" objectoffset="$SurfacePos" target="$Ship" excludeself="false"/>
                                    <do_if value="$InLineOfSight">
                                      <debug_text text="$Ship.name + ' is in line of sight of ' + $StationModule.name" chance="$DebugChance"/>
                                      <append_to_list name="$ValidShots" exact="table[$Anchor = $StationModule, $AnchorOffset = $SurfacePos, $Target = $Ship]"/>
                                      <break/>
                                    </do_if>
                                  </do_if>
                                </do_for_each>
                              </do_for_each>

                              <set_value name="$StationZoomParams.$ValidShots" exact="$ValidShots"/>
                            </do_if>

                            <!--find_random_pos_in_mass_traffic-->
                            <do_any>
                              <do_any weight="if $HostileEncounter and $HostileEncounter.isoperational then 1 else 10">
                                <signal_cue_instantly cue="StationPeaceful_Zoom" param="$StationZoomParams" weight="if $StationZoomParams.$ValidShots.count gt 0 then (if $LastView != 'StationPeaceful_Zoom' then 4 else 1) else 0"/>
                                <signal_cue_instantly cue="StationPeaceful_Station" param="$Station" weight="if $LastView != 'StationPeaceful_Station' or not $DockingArea then 1 else 0"/>
                                <signal_cue_instantly cue="StationPeaceful_Orbit" param="$Station" weight="if $LastView != 'StationPeaceful_Orbit' then 1 else 0"/>
                                <!--<signal_cue_instantly cue="StationPeaceful_Room" param="$Room" weight="if $Room then 1 else 0"/>-->
                                <signal_cue_instantly cue="StationPeaceful_Dockarea" param="$DockingArea" weight="if $LastView != 'StationPeaceful_Dockarea' and $DockingArea and $Ships.count gt 0 then 4 else if $LastView != 'StationPeaceful_Dockarea' and $DockingArea then 1 else 0"/>
                                <!--<signal_cue_instantly cue="StationPeaceful_DockShip" param="$Ship" weight="if $Ship then 1 else 0"/>-->
                                <!--TODO: mass traffic lane, ongoing trade with L ship, animated production module, ...-->
                              </do_any>
                              <do_any weight="if $HostileEncounter and $HostileEncounter.isoperational then 10 else 1">
                                <signal_cue_instantly cue="StationPeaceful_Orbit" param="$Station" weight="if ($LastView != 'StationPeaceful_Orbit' or $StationZoomParams.$ValidShots.count == 0) then 1 else 0"/>
                                <signal_cue_instantly cue="StationPeaceful_Zoom" param="$StationZoomParams" weight="if $StationZoomParams.$ValidShots.count gt 0 then (if $LastView != 'StationPeaceful_Zoom' then 4 else 1) else 0"/>
                              </do_any>
                            </do_any>
                          </do_if>
                          <do_else>
                            <signal_cue_instantly cue="StationPeaceful_Orbit" param="$Station"/>
                          </do_else>
                        </do_else>
                      </actions>
                    </cue>
                    <cue name="StationPeaceful_Station">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Station" exact="event.param"/>
                      </conditions>
                      <actions>
                        <set_value name="$LastView" exact="'StationPeaceful_Station'"/>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <!--$SectorLookatPosition is the direction we look at before turning to the station (or vice-versa if the shot is reversed)
                        By default it is a random position in space, but could be an object or a planet-->
                        <create_position name="$SectorLookatPosition" object="$Station" space="$Sector" exact="100km"/>
                        <do_if value="$PlanetPositions.count" chance="50">
                          <set_value name="$SectorLookatPosition" exact="$PlanetPositions.random"/>
                        </do_if>
                        <do_else>
                          <set_value name="$FindClasses" exact="[class.gate, class.station, class.ship_l, class.ship_xl]"/>
                          <shuffle_list list="$FindClasses"/>
                          <do_for_each name="$FindClass" in="$FindClasses">
                            <find_object name="$PotentialLookatObject" class="$FindClass" excluded="$Station" space="$Sector" known="true"/>
                            <do_if value="$PotentialLookatObject">
                              <create_position name="$SectorLookatPosition" object="$PotentialLookatObject" min="5km" max="10km" space="$Sector"/>
                              <break/>
                            </do_if>
                          </do_for_each>
                        </do_else>

                        <do_if value="$LeftOfStation?">
                          <set_value name="$LeftOfStation" exact="not $LeftOfStation"/>
                        </do_if>
                        <do_else>
                          <set_value name="$LeftOfStation" exact="[true, false].random"/>
                        </do_else>
                        <create_position name="$StationPos" object="$Station" space="$Sector"/>

                        <do_if value="$LeftOfStation">
                          <create_orientation name="$OffsetDirection" orientation="align_right" refposition="$SectorLookatPosition">
                            <position object="$Station" space="$Sector"/>
                          </create_orientation>
                        </do_if>
                        <do_else>
                          <create_orientation name="$OffsetDirection" orientation="align_left" refposition="$SectorLookatPosition">
                            <position object="$Station" space="$Sector"/>
                          </create_orientation>
                        </do_else>
                        <set_value name="$Yaw" min="$OffsetDirection.yaw - 5deg" max="$OffsetDirection.yaw + 5deg"/>

                        <set_value name="$PlacementDist" exact="$Station.size * 0.5f + 1km"/>
                        <get_safe_pos result="$StartPos" sector="$Sector" x="$StationPos.x + sin($Yaw) * $PlacementDist" y="$StationPos.y" z="$StationPos.z + cos($Yaw) * $PlacementDist" allowyaxis="false" radius="300m"/>
                        <create_position name="$SectorLookfromPos" object="$Sector" value="$StartPos" space="$Station.zone"/>
                        <set_value name="$PlacementDist" exact="$Station.size * 0.8f"/>
                        <set_value name="$Yaw" exact="$OffsetDirection.yaw - 20deg"/>
                        <get_safe_pos result="$EndPos" sector="$Sector" x="$StationPos.x + sin($Yaw) * $PlacementDist" y="$StationPos.y" z="$StationPos.z + cos($Yaw) * $PlacementDist" allowyaxis="false" radius="300m"/>
                        <create_position name="$StationLookfromPos" object="$Sector" value="$EndPos" space="$Station.zone"/>
                        <create_orientation name="$SectorLookatRotation" orientation="look_at" refposition="$SectorLookatPosition" maxpitch="60deg">
                          <position object="$Station" space="$Sector"/>
                        </create_orientation>
                        <create_orientation name="$StationRot" orientation="look_at" refobject="$Station">
                          <position value="$StationLookfromPos" object="$Station" space="$Station.zone"/>
                        </create_orientation>
                        <!--Set up cutscene-->
                        <set_value name="$Duration" exact="10s"/>
                        <do_any>
                          <do_all weight="10">
                            <!--From the sector look at position to the station-->
                            <set_value name="$AdditionalPitch" min="-15deg" max="15deg"/>
                            <set_value name="$StartPos" exact="$SectorLookfromPos"/>
                            <set_value name="$EndPos" exact="$StationLookfromPos"/>
                            <set_value name="$StartRot" exact="$SectorLookatRotation"/>
                            <set_value name="$EndRot" exact="$StationRot"/>
                          </do_all>
                          <do_all weight="1">
                            <!--From the station to the sector look at position-->
                            <set_value name="$AdditionalPitch" min="-5deg" max="5deg"/>
                            <set_value name="$StartPos" exact="$StationLookfromPos"/>
                            <set_value name="$EndPos" exact="$SectorLookfromPos"/>
                            <set_value name="$StartRot" exact="$StationRot"/>
                            <set_value name="$EndRot" exact="$SectorLookatRotation"/>
                          </do_all>
                        </do_any>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Angled_Camera_Keyframed_Shot'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$Station.zone"/>
                          <param name="camerapos_x_1" number="$StartPos.x"/>
                          <param name="camerapos_x_2" number="$EndPos.x"/>
                          <param name="camerapos_y_1" number="$StartPos.y"/>
                          <param name="camerapos_y_2" number="$EndPos.y"/>
                          <param name="camerapos_z_1" number="$StartPos.z"/>
                          <param name="camerapos_z_2" number="$EndPos.z"/>
                          <param name="yaw_1" number="($StartRot.yaw * (180 / pi))f"/>
                          <param name="yaw_2" number="($EndRot.yaw * (180 / pi))f"/>
                          <param name="pitch_1" number="(($StartRot.pitch + $AdditionalPitch) * (180 / pi))f"/>
                          <param name="pitch_2" number="($EndRot.pitch * (180 / pi))f"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="StationPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="StationPeaceful_Station_StationDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Station"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="StationPeaceful_Orbit">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Station" exact="event.param"/>
                      </conditions>
                      <actions>
                        <set_value name="$LastView" exact="'StationPeaceful_Orbit'"/>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" min="6s" max="10s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                        <set_value name="$Distance" min="$Station.width * 0.7" max="$Station.width * 1.5"/>
                        <set_value name="$Elevation" min="$Station.height * 0.9" max="$Station.height * 1.4"/>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'OrbitParameterized'">
                          <param name="targetobject" object="$Station"/>
                          <param name="orbitdist" number="$Distance"/>
                          <param name="orbitelevation" number="$Elevation * [-1,1].random" />
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="StationPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="StationPeaceful_Orbit_StationDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Station"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="StationPeaceful_SurfaceElement">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$SurfaceElement" exact="event.param"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" min="3s" max="5s"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Lookat_Target_Keyframed_Shot'">
                          <param name="anchor" object="$SurfaceElement"/>
                          <param name="lookat" object="$SurfaceElement"/>
                          <param name="anchor_x_1" number="-$SurfaceElement.size * 0.4f"/>
                          <param name="anchor_x_2" number="$SurfaceElement.size * 0.4f"/>
                          <param name="anchor_y_1" number="$SurfaceElement.size * 1.5f"/>
                          <param name="anchor_y_2" number="$SurfaceElement.size * 1.7f"/>
                          <param name="anchor_z_1" number="$SurfaceElement.size * 0.8f"/>
                          <param name="anchor_z_2" number="$SurfaceElement.size * 0.9f"/>
                          <param name="lookatpos_x_1" number="0"/>
                          <param name="lookatpos_x_2" number="0"/>
                          <param name="lookatpos_y_1" number="0"/>
                          <param name="lookatpos_y_2" number="0"/>
                          <param name="lookatpos_z_1" number="0"/>
                          <param name="lookatpos_z_2" number="0"/>
                          <param name="duration" number="6s"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="StationPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="StationPeaceful_SurfaceElement_StationDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Station"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="StationPeaceful_Room">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Room" exact="event.param"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" min="3s" max="5s"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Cutscene_pan_behind'">
                          <param name="target_object" object="$Room"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="StationPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="StationPeaceful_Room_StationDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Station"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="StationPeaceful_Dockarea">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$DockingArea" exact="event.param"/>
                      </conditions>
                      <actions>
                        <set_value name="$LastView" exact="'StationPeaceful_Dockarea'"/>
                        <debug_text text="$DockingArea + ' ' + $DockingArea.macro" chance="$DebugChance"/>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <!--Build list of things to potentially look at-->
                        <set_value name="$LookAtTargetTypes" exact="['npc', class.ship_s, 'dockingbay', 'masstraffic']"/>

                        <!--Box bounds per dockarea
                        To get new positions, dock at a dockarea, activate no-clip and use player.entity.relativeposition.{player.entity.module} to sample positions-->
                        <set_value name="$PositionBox" exact="null"/>
                        <do_if value="$DockingArea.macro.ismacro.[macro.dockarea_arg_m_station_01_lowtech_macro, macro.dockarea_arg_m_station_01_macro, macro.dockarea_arg_m_station_01_hightech_macro]">
                          <do_any>
                            <do_all>
                              <set_value name="$PositionBox" exact="table[
                                      $neg_x = -95m,
                                      $pos_x = 95m,
                                      $neg_y = 69m,
                                      $pos_y = 75m,
                                      $neg_z = -96m,
                                      $pos_z = -91m,
                                      ]"/>
                              <set_value name="$LookAtTargetTypes" exact="['npc', class.ship_s, class.ship_m, 'dockingbay', 'masstraffic']"/>
                            </do_all>
                            <do_all>
                              <set_value name="$PositionBox" exact="table[
                                      $neg_x = -43m,
                                      $pos_x = 53m,
                                      $neg_y = 68m,
                                      $pos_y = 76m,
                                      $neg_z = -106m,
                                      $pos_z = -100m,
                                      ]"/>
                              <set_value name="$LookAtTargetTypes" exact="['npc', class.ship_s, class.ship_m, 'dockingbay', 'masstraffic']"/>
                            </do_all>
                          </do_any>
                        </do_if>
                        <do_elseif value="$DockingArea.macro.ismacro.[macro.buildmodule_gen_ships_m_dockarea_01_macro, macro.buildmodule_gen_equip_m_dockarea_01_macro]">
                          <do_any>
                            <do_all>
                              <set_value name="$PositionBox" exact="table[
                                      $neg_x = -202m,
                                      $pos_x = 180m,
                                      $neg_y = -26m,
                                      $pos_y = -12m,
                                      $neg_z = -135m,
                                      $pos_z = -126m,
                                      ]"/>
                              <set_value name="$LookAtTargetTypes" exact="['npc', class.ship_s, class.ship_m, 'dockingbay']"/>
                            </do_all>
                            <do_all>
                              <set_value name="$PositionBox" exact="table[
                                      $neg_x = -11m,
                                      $pos_x = 2m,
                                      $neg_y = -75m,
                                      $pos_y = -61m,
                                      $neg_z = -111m,
                                      $pos_z = 107m,
                                      ]"/>
                              <set_value name="$LookAtTargetTypes" exact="['npc', class.ship_m, 'dockingbay']"/>
                            </do_all>
                          </do_any>
                        </do_elseif>
                        <do_elseif value="$DockingArea.macro.ismacro.[macro.dockarea_arg_m_station_02_lowtech_macro, macro.dockarea_arg_m_station_02_macro, macro.dockarea_arg_m_station_02_hightech_macro]">
                          <do_any>
                            <do_all>
                              <set_value name="$PositionBox" exact="table[
                                      $neg_x = -117m,
                                      $pos_x = -107m,
                                      $neg_y = 69m,
                                      $pos_y = 77m,
                                      $neg_z = -64m,
                                      $pos_z = 57m,
                                      ]"/>
                              <set_value name="$LookAtTargetTypes" exact="['npc', class.ship_s, class.ship_m, 'dockingbay']"/>
                            </do_all>
                            <do_all>
                              <set_value name="$PositionBox" exact="table[
                                      $neg_x = 107m,
                                      $pos_x = 117m,
                                      $neg_y = 69m,
                                      $pos_y = 77m,
                                      $neg_z = -64m,
                                      $pos_z = 62m,
                                      ]"/>
                              <set_value name="$LookAtTargetTypes" exact="['npc', class.ship_s, class.ship_m, 'dockingbay']"/>
                            </do_all>
                          </do_any>
                        </do_elseif>
                        <do_elseif value="$DockingArea.macro.ismacro.[macro.dockarea_arg_m_02_tradestation_01_macro]">
                          <do_any>
                            <do_all>
                              <set_value name="$PositionBox" exact="table[
                                      $neg_x = -267m,
                                      $pos_x = 145m,
                                      $neg_y = 55m,
                                      $pos_y = 66m,
                                      $neg_z = -90m,
                                      $pos_z = -79m,
                                      ]"/>
                              <set_value name="$LookAtTargetTypes" exact="['npc', class.ship_m, 'dockingbay']"/>
                            </do_all>
                          </do_any>
                        </do_elseif>
                        <do_elseif value="$DockingArea.macro.ismacro.[macro.landmarks_tel_tradestation_01_dockarea_m_01_macro]">
                          <do_any>
                            <do_all>
                              <set_value name="$PositionBox" exact="table[
                                      $neg_x = -91m,
                                      $pos_x = -83m,
                                      $neg_y = 6m,
                                      $pos_y = 19m,
                                      $neg_z = -56m,
                                      $pos_z = 51m,
                                      ]"/>
                              <set_value name="$LookAtTargetTypes" exact="['npc', class.ship_s, class.ship_m, 'dockingbay']"/>
                            </do_all>
                            <do_all>
                              <set_value name="$PositionBox" exact="table[
                                      $neg_x = -168m,
                                      $pos_x = -92m,
                                      $neg_y = 5m,
                                      $pos_y = 10m,
                                      $neg_z = -2m,
                                      $pos_z = 4m,
                                      ]"/>
                              <set_value name="$LookAtTargetTypes" exact="['npc', class.ship_s, class.ship_m, 'dockingbay']"/>
                            </do_all>
                          </do_any>
                        </do_elseif>
                        <do_elseif value="@$DockareaMacroPatchMarker">

                        </do_elseif>

                        <do_if value="$PositionBox">
                          <set_value name="$StartX" min="$PositionBox.$neg_x" max="$PositionBox.$pos_x"/>
                          <set_value name="$StartY" min="$PositionBox.$neg_y" max="$PositionBox.$pos_y"/>
                          <set_value name="$StartZ" min="$PositionBox.$neg_z" max="$PositionBox.$pos_z"/>
                          <set_value name="$EndX"   min="[$StartX - 15m, $PositionBox.$neg_x].max" max="[$StartX + 15m, $PositionBox.$pos_x].min"/>
                          <set_value name="$EndY"   min="[$StartY - 5m, $PositionBox.$neg_y].max" max="[$StartY + 5m, $PositionBox.$pos_y].min"/>
                          <set_value name="$EndZ"   min="[$StartZ - 5m, $PositionBox.$neg_z].max" max="[$StartZ + 5m, $PositionBox.$pos_z].min"/>
                        </do_if>
                        <do_else>
                          <set_value name="$StartX" exact="0m"/>
                          <set_value name="$StartY" exact="70m"/>
                          <set_value name="$StartZ" exact="0m"/>
                          <set_value name="$EndX" exact="0m"/>
                          <set_value name="$EndY" exact="70m"/>
                          <set_value name="$EndZ" exact="0m"/>
                        </do_else>

                        <set_value name="$StartRot" exact="null"/>
                        <shuffle_list list="$LookAtTargetTypes"/>
                        <do_for_each name="$LookAtTargetType" in="$LookAtTargetTypes">
                          <do_if value="$LookAtTargetType == 'npc'">
                            <find_object_component name="$NPCs" class="[class.player, class.npc]" object="$DockingArea" sortbyvalue="loop.element.distanceto.[$DockingArea, position.[$StartX, $StartY, $StartZ]]" sortdescending="false" multiple="true"/>
                            <do_if value="$NPCs.count">
                              <set_value name="$NPCIdx" min="1" max="[$NPCs.count, 3].min"/>
                              <set_value name="$NPC" exact="$NPCs.{$NPCIdx}"/>
                              <debug_text text="'Look at ' + $NPC.knownname + ' distance ' + $NPC.distanceto.[$DockingArea, position.[$StartX, $StartY, $StartZ]]" chance="$DebugChance"/>
                              <create_orientation name="$StartRot" orientation="look_at" refobject="$NPC" maxpitch="60deg">
                                <position x="$StartX" y="$StartY" z="$StartZ" object="$DockingArea" space="$DockingArea.zone"/>
                              </create_orientation>
                              <set_value name="$EndYawAddition" min="-40deg" max="40deg"/>
                              <set_value name="$EndPitchAddition" min="0deg" max="50deg"/>
                              <set_value name="$EndRot" exact="rotation.[$StartRot.yaw + $EndYawAddition, $StartRot.pitch + $EndPitchAddition, $StartRot.roll]"/>
                              <break/>
                            </do_if>
                          </do_if>
                          <do_elseif value="@$LookAtTargetType.isclass.ship">
                            <find_object_component name="$DockedShip" object="$DockingArea" class="$LookAtTargetType" docked="true" includeobjects="true" sortbyvalue="loop.element.distanceto.[$DockingArea, position.[$StartX, $StartY, $StartZ]]" sortdescending="false" multiple="false">
                              <match_parent>
                                <match_dock storage="false"/>
                              </match_parent>
                              <match_distance object="$DockingArea" x="$StartX" y="$StartY" z="$StartZ" min="25m"/>
                            </find_object_component>
                            <do_if value="$DockedShip">
                              <debug_text text="'Look at ' + $DockedShip.knownname + ' distance ' + $DockedShip.distanceto.[$DockingArea, position.[$StartX, $StartY, $StartZ]]" chance="$DebugChance"/>
                              <create_orientation name="$StartRot" orientation="look_at" refobject="$DockedShip" maxpitch="60deg">
                                <position x="$StartX" y="$StartY" z="$StartZ" object="$DockingArea" space="$DockingArea.zone"/>
                              </create_orientation>
                              <set_value name="$EndYawAddition" min="-40deg" max="40deg"/>
                              <set_value name="$EndPitchAddition" min="0deg" max="50deg"/>
                              <set_value name="$EndRot" exact="rotation.[$StartRot.yaw + $EndYawAddition, $StartRot.pitch + $EndPitchAddition, $StartRot.roll]"/>
                              <break/>
                            </do_if>
                          </do_elseif>
                          <do_elseif value="$LookAtTargetType == 'dockingbay'">
                            <!--build a list of docksizes of docked ships your allowed to look at, to find docks you can look at-->
                            <set_value name="$DockSizes" exact="[]"/>
                            <do_if value="$LookAtTargetTypes.indexof.{class.ship_s}">
                              <append_to_list name="$DockSizes" exact="tag.dock_s"/>
                            </do_if>
                            <do_elseif value="$LookAtTargetTypes.indexof.{class.ship_m}">
                              <append_to_list name="$DockSizes" exact="tag.dock_m"/>
                            </do_elseif>
                            <find_dockingbay name="$DockingBay" object="$DockingArea" sortbyvalue="loop.element.distanceto.[$DockingArea, position.[$StartX, $StartY, $StartZ]]" sortdescending="false" multiple="false">
                              <match_dock storage="false" size="$DockSizes"/>
                              <match_distance object="$DockingArea" x="$StartX" y="$StartY" z="$StartZ" min="25m"/>
                            </find_dockingbay>
                            <do_if value="$DockingBay">
                              <debug_text text="'Look at ' + $DockingBay.knownname + ' distance ' + $DockingBay.distanceto.[$DockingArea, position.[$StartX, $StartY, $StartZ]]" chance="$DebugChance"/>
                              <create_position name="$RandomLookatPos" object="$DockingBay" y="5m" max="20m" space="$DockingArea.zone"/>
                              <create_orientation name="$StartRot" orientation="look_at" refposition="$RandomLookatPos" maxpitch="60deg">
                                <position x="$StartX" y="$StartY" z="$StartZ" object="$DockingArea" space="$DockingArea.zone"/>
                              </create_orientation>
                              <set_value name="$EndYawAddition" min="-50deg" max="50deg"/>
                              <set_value name="$EndPitchAddition" min="0deg" max="40deg"/>
                              <set_value name="$EndRot" exact="rotation.[$StartRot.yaw + $EndYawAddition, $StartRot.pitch + $EndPitchAddition, $StartRot.roll]"/>
                              <break/>
                            </do_if>
                          </do_elseif>
                          <do_elseif value="$LookAtTargetType == 'masstraffic'">
                            <!--Find the nearest mass traffic to the camera, but disregard any that have recently spawned-->
                            <find_ship name="$MassTraffic" space="$DockingArea.zone" masstraffic="true" sortbyvalue="if loop.element.age lt 2s then 100km else loop.element.distanceto.[$DockingArea, position.[$StartX, $StartY, $StartZ]]" sortdescending="false" multiple="false">
                              <match_distance object="$DockingArea" x="$StartX" y="$StartY" z="$StartZ" min="20m" max="400m"/>
                            </find_ship>
                            <do_if value="$MassTraffic">
                              <debug_text text="'Look at ' + $MassTraffic + ' ' + $MassTraffic.knownname + ' distance ' + $MassTraffic.distanceto.[$DockingArea, position.[$StartX, $StartY, $StartZ]]" chance="$DebugChance"/>
                              <create_orientation name="$StartRot" orientation="look_at" refobject="$MassTraffic" maxpitch="60deg">
                                <position x="$StartX" y="$StartY" z="$StartZ" object="$DockingArea" space="$DockingArea.zone"/>
                              </create_orientation>
                              <!--Look at the forward direction of the ship (can be a bit wibbly)-->
                              <create_position name="$EndLookatPos" object="$MassTraffic" z="300m" exact="5m" space="$DockingArea"/>
                              <create_orientation name="$EndRot" orientation="look_at" refposition="$EndLookatPos" maxpitch="60deg">
                                <position x="$EndX" y="$EndY" z="$EndZ" object="$DockingArea" space="$DockingArea.zone"/>
                              </create_orientation>
                              <break/>
                            </do_if>
                          </do_elseif>
                        </do_for_each>

                        <do_if value="not $StartRot">
                          <set_value name="$StartRot" exact="rotation.[90deg, -30deg, 0deg]"/>
                          <set_value name="$EndYawAddition" min="-40deg" max="40deg"/>
                          <set_value name="$EndPitchAddition" min="0deg" max="80deg"/>
                          <set_value name="$EndRot" exact="rotation.[$StartRot.yaw + $EndYawAddition, $StartRot.pitch + $EndPitchAddition, $StartRot.roll]"/>
                        </do_if>

                        <do_all chance="50">
                          <!--Swap Start-End for variety-->
                          <set_value name="$StartX_Backup" exact="$StartX"/>
                          <set_value name="$StartX" exact="$EndX"/>
                          <set_value name="$EndX" exact="$StartX_Backup"/>
                          <set_value name="$StartY_Backup" exact="$StartY"/>
                          <set_value name="$StartY" exact="$EndY"/>
                          <set_value name="$EndY" exact="$StartY_Backup"/>
                          <set_value name="$StartZ_Backup" exact="$StartZ"/>
                          <set_value name="$StartZ" exact="$EndZ"/>
                          <set_value name="$EndZ" exact="$StartZ_Backup"/>

                          <set_value name="$StartRot_Backup" exact="$StartRot"/>
                          <set_value name="$StartRot" exact="$EndRot"/>
                          <set_value name="$EndRot" exact="$StartRot_Backup"/>
                        </do_all>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" min="7s" max="9s"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Angled_Camera_Keyframed_Shot'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$DockingArea"/>
                          <param name="camerapos_x_1" number="$StartX"/>
                          <param name="camerapos_x_2" number="$EndX"/>
                          <param name="camerapos_y_1" number="$StartY"/>
                          <param name="camerapos_y_2" number="$EndY"/>
                          <param name="camerapos_z_1" number="$StartZ"/>
                          <param name="camerapos_z_2" number="$EndZ"/>
                          <param name="yaw_1" number="($StartRot.yaw * (180 / pi))f"/>
                          <param name="yaw_2" number="($EndRot.yaw * (180 / pi))f"/>
                          <param name="pitch_1" number="($StartRot.pitch * (180 / pi))f"/>
                          <param name="pitch_2" number="($EndRot.pitch * (180 / pi))f"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="StationPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="StationPeaceful_Dockarea_StationDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Station"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="StationPeaceful_DockShip">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Ship" exact="event.param"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" min="3s" max="5s"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Cutscene_pan_behind'">
                          <param name="target_object" object="$Ship"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="StationPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="StationPeaceful_DockShip_StationDestroyed">
                          <conditions>
                            <check_any>
                              <event_object_destroyed object="$Ship"/>
                              <event_object_destroyed object="$Station"/>
                            </check_any>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="StationPeaceful_Zoom">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Station" exact="event.param.$Station"/>
                        <set_value name="$ValidShots" exact="event.param.$ValidShots"/>
                      </conditions>
                      <actions>
                        <create_group groupname="$CutsceneGroup"/>
                        <add_to_group groupname="$CutsceneGroup" object="$Station"/>

                        <set_value name="$LastView" exact="'StationPeaceful_Zoom'"/>

                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" min="6s" max="8s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                        <set_value name="$SelectedShot" exact="$ValidShots.random"/>

                        <set_value name="$Anchor" exact="$SelectedShot.$Anchor"/>
                        <set_value name="$AnchorOffset" exact="$SelectedShot.$AnchorOffset"/>
                        <set_value name="$Target" exact="$SelectedShot.$Target"/>

                        <set_value name="$Manager.$ObservedObject" exact="$Target"/>
                        <run_actions ref="ShowOverlay"/>

                        <add_to_group groupname="$CutsceneGroup" object="$Target"/>

                        <debug_text text="'Selected ship name: ' + $Target.name + ' is in line of sight of ' + $Anchor.name" chance="$DebugChance"/>

                        <set_value name="$Zoom" exact="[0,1].random"/>
                        <do_any>
                          <do_all weight="if ($Target.speed > 10 and not $Target.assigneddock) then 1 else 3">
                            <debug_text text="'Playing static sequence'" chance="$DebugChance"/>
                            <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'LookAt_Breath_Static'">
                              <param name="duration" number="$Duration"/>
                              <param name="anchor" object="$Anchor"/>
                              <param name="target_x" number="$Target.position.x"/>
                              <param name="target_y" number="$Target.position.y"/>
                              <param name="target_z" number="$Target.position.z"/>
                              <param name="anchor_x" number="$AnchorOffset.x"/>
                              <param name="anchor_y" number="$AnchorOffset.y"/>
                              <param name="anchor_z" number="$AnchorOffset.z"/>
                              <param name="zoom_middle" number="if $Zoom then 0.8 else 1"/>
                              <param name="zoom_end" number="if $Zoom then 0.5 else 1"/>
                            </play_cutscene>
                          </do_all>
                          <do_all weight="if ($Target.speed > 10 and not $Target.assigneddock) then 3 else 1">
                            <set_value name="$Duration" min="10s" max="15s"/>
                            <debug_text text="'Playing dynamic sequence'" chance="$DebugChance"/>
                            <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'LookAt_Breath_Follow'">
                              <param name="duration" number="$Duration"/>
                              <param name="anchor" object="$Anchor"/>
                              <param name="target" object="$Target"/>
                              <param name="anchor_x" number="$AnchorOffset.x"/>
                              <param name="anchor_y" number="$AnchorOffset.y"/>
                              <param name="anchor_z" number="$AnchorOffset.z"/>
                              <param name="zoom_middle" number="if $Zoom then 0.8 else 1"/>
                              <param name="zoom_end" number="if $Zoom then 0.5 else 1"/>
                            </play_cutscene>
                          </do_all>
                        </do_any>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <set_value name="$Manager.$ObservedObject" exact="null"/>
                        <run_actions ref="ShowOverlay"/>
                        <reset_cue cue="StationPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="StationPeaceful_Zoom_StationDestroyed">
                          <conditions>
                            <check_any>
                              <event_object_destroyed group="$CutsceneGroup"/>
                            </check_any>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                        <cue name="StationPeaceful_Zoom_VisibilityCheck" checkinterval="1s" instantiate="true">
                          <actions>
                            <check_line_of_sight name="$InLineOfSight" object="$Anchor" objectoffset="$AnchorOffset" target="$Target" excludeself="false"/>
                            <do_if value="not $InLineOfSight">
                              <fade_screen fadeout="0s" fadein="1s * [player.timewarp.factor, 1].min" color="black"/>
                              <set_value name="$Manager.$ObservedObject" exact="null"/>
                              <run_actions ref="ShowOverlay"/>
                              <reset_cue cue="StationPeaceful_ShowView"/>
                            </do_if>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <library name="ShipBattle_Station_Check" purpose="run_actions">
              <params>
                <param name="Object"/>
                <param name="DebugChance" default="0"/>
              </params>
              <actions>
                <do_if value="$Object.isclass.ship and (@$Object.order.id == 'Attack' and $Object.order.$primarytarget.isclass.station and $Object.order.$primarytarget.distanceto.{$Object} lt 15km or @$Object.order.id == 'TacticalOrder' and $Object.order.$selectedtarget.isclass.station)">
                  <do_if value="$Object == md.CinematicCamera.CinematicCameraManager.$StickyTarget">
                    <return value="ShipBattle_Station"/>
                  </do_if>
                  <do_elseif value="($Object.isclass.ship_xs)" comment="MT ships often don't look good, ignore">
                    <return value="null"/>
                  </do_elseif>
                  <return value="ShipBattle_Station"/>
                </do_if>
                <return value="null"/>
              </actions>
            </library>
            <cue name="ShipBattle_Station" namespace="this">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
                <set_value name="$DebugChance" exact="$Manager.$DebugChance"/>
                <set_value name="$EndTime" min="player.age + 20s" max="player.age + 30s"/>
                <set_value name="$LastView" exact="''"/>

                <set_value name="$Ship" exact="event.param"/>
                <set_value name="$Manager.$CurrentTarget" exact="$Ship"/>
                <run_actions ref="ShowOverlay"/>
              </actions>
              <cues>
                <cue name="ShipBattle_Station_ShowView">
                  <cues>
                    <cue name="ShipBattle_Station_SelectView">
                      <actions>
                        <set_value name="$Manager.$ResetOnInterrupt" exact="false"/>

                        <debug_text text="'Selecting the next shot'" chance="$DebugChance"/>
                        <do_if value="player.age gt $EndTime">
                          <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                        </do_if>
                        <do_else>
                          <do_any>
                            <signal_cue_instantly cue="ShipBattle_Station_Scene_Attack" param="$Ship" weight="if $LastView != 'ShipBattle_Station_Scene_Attack' then 1 else 0"/>
                            <signal_cue_instantly cue="ShipBattle_Station_Scene_Orbit" param="$Ship" weight="if $LastView != 'ShipBattle_Station_Scene_Orbit' then 1 else 0"/>
                            <signal_cue_instantly cue="ShipBattle_Station_Scene_FlyTo" param="$Ship" weight="if @$Ship.order.id == 'TacticalOrder' and $LastView != 'ShipBattle_Station_Scene_FlyTo' then 1 else 0"/>
                          </do_any>
                        </do_else>
                      </actions>
                    </cue>
                    <cue name="ShipBattle_Station_Scene_Attack">
                      <conditions>
                        <check_any>
                          <event_cue_signalled/>
                        </check_any>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipBattle_Station_Scene_Attack'"/>

                        <!--Set up cutscene-->
                        <do_if value="@$Ship.order.id == 'Attack'">
                          <set_value name="$Target" exact="$Ship.order.$primarytarget"/>
                        </do_if>
                        <do_elseif value="@$Ship.order.id == 'TacticalOrder'">
                          <set_value name="$Target" exact="$Ship.order.$selectedtarget"/>
                        </do_elseif>
                        <do_else>
                          <set_value name="$Target" exact="$Ship"/>
                        </do_else>

                        <set_value name="$Attacker"   exact="$Ship"/>


                        <set_value name="$Duration" min="6s" max="8s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                        <set_value name="$Distance" min="$Attacker.size * 1.5f" max="3.0f"/>
                        <set_value name="$Anchor" exact="$Attacker"/>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Follow_A_Lookat_B'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$Anchor"/>
                          <param name="target" object="$Target"/>
                          <param name="anchordist" number="-$Distance"/>
                          <param name="anchor_x" number="0"/>
                          <param name="anchor_y" number="$Anchor.height * 1.5f"/>
                          <param name="anchor_z" number="0"/>
                          <param name="target_x" number="0"/>
                          <param name="target_y" number="0"/>
                          <param name="target_z" number="0"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipBattle_Station_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="ShipBattle_Station_Scene_Attack_ObjectSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Ship"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Target changed sector, `event:abort`'" chance="$DebugChance"/>
                            <reset_cue cue="ShipBattle_Station_ShowView"/>
                            <!--cutscene_event key="'Cutscene_flyfromto'" event="'abort'"/-->
                          </actions>
                        </cue>
                        <cue name="ShipBattle_Station_Scene_Attack_ShipDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Ship"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="ShipBattle_Station_ShowView"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="ShipBattle_Station_Scene_FlyTo">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipBattle_Station_Scene_FlyTo'"/>

                        <!--Set up cutscene-->
                        <do_if value="@$Ship.order.id == 'Attack'">
                          <set_value name="$Target" exact="$Ship.order.$primarytarget"/>
                        </do_if>
                        <do_elseif value="@$Ship.order.id == 'TacticalOrder'">
                          <set_value name="$Target" exact="$Ship.order.$selectedtarget"/>
                        </do_elseif>
                        <do_else>
                          <set_value name="$Target" exact="$Ship"/>
                        </do_else>

                        <set_value name="$Anchor" exact="$Ship"/>
                        <set_value name="$LookatTarget" exact="$Target"/>

                        <!-- note: distance/flytodistance in % to object size, not in worldunits! -->
                        <set_value name="$Angles" exact="[
                              table[$anchor         = $Anchor, 
                                    $target         = $LookatTarget, 
                                    $distance       = [125, 200].random, 
                                    $flytodistance  = [125, 200].random, 
                                   ],
                            ]" />
                        <set_value name="$AnglesIndex" min="1" max="$Angles.count"/>

                        <set_value name="$Duration" min="12s" max="15s"/>

                        <debug_text text="'Anchor=`%s` Target=`%s` distance=%s%% flytodistance=%s%% duration=%s'.[$Anchor.knownname, $LookatTarget.knownname, $Angles.{$AnglesIndex}.$distance, $Angles.{$AnglesIndex}.$flytodistance, $Duration]"/>

                        <set_value name="$Orbit2Rotation" min="16" max="360"/>

                        <!-- Warning: Don't modify duration (see cutscene_flyfromto for details -->
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Cutscene_flyfromto'">
                          <param name="source" object="$Angles.{$AnglesIndex}.$anchor"/>
                          <param name="target" object="$Angles.{$AnglesIndex}.$target"/>
                          <param name="abortfocus" object="$Ship"/>
                          <param name="distance" number="$Angles.{$AnglesIndex}.$distance"/>
                          <param name="flytodistance" number="$Angles.{$AnglesIndex}.$flytodistance"/>
                          <param name="orbit1_yaw_start" number="if $Angles.{$AnglesIndex}.$anchor.isclass.{class.ship} then 45 else 1"/>
                          <param name="orbit1_yaw_end" number="if $Angles.{$AnglesIndex}.$anchor.isclass.{class.ship} then 55 else 8"/>
                          <param name="orbit1_elevation" number="15"/>
                          <param name="orbit2_yaw_start" number="$Orbit2Rotation"/>
                          <param name="orbit2_yaw_end" number="$Orbit2Rotation - 16"/>
                          <param name="orbit2_pitch" number="[10, 31, 60].random"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipBattle_Station_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="ShipBattle_Station_Scene_FlyTo_ShipSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Ship"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Target changed sector, `event:abort`'" chance="$DebugChance"/>
                            <reset_cue cue="ShipBattle_Station_ShowView"/>
                            <!--cutscene_event key="'Cutscene_flyfromto'" event="'abort'"/-->
                          </actions>
                        </cue>
                        <cue name="ShipBattle_Station_Scene_FlyTo_ObjectsDestroyed">
                          <conditions>
                            <check_any>
                              <event_object_destroyed object="$Ship"/>
                              <event_object_destroyed object="$Target"/>
                            </check_any>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="ShipBattle_Station_ShowView"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="ShipBattle_Station_Scene_Orbit">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipBattle_Station_Scene_Orbit'"/>

                        <!--Set up cutscene-->
                        <do_if value="@$Ship.order.id == 'Attack'">
                          <set_value name="$Target" exact="$Ship.order.$primarytarget"/>
                        </do_if>
                        <do_elseif value="@$Ship.order.id == 'TacticalOrder'">
                          <set_value name="$Target" exact="$Ship.order.$selectedtarget"/>
                        </do_elseif>
                        <do_else>
                          <set_value name="$Target" exact="$Ship"/>
                        </do_else>

                        <set_value name="$Duration" min="10s" max="15s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                        <set_value name="$Distance" min="$Target.size * 1.2f" max="$Target.size * 2.5f"/>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'OrbitParameterized'">
                          <param name="targetobject" object="$Target"/>
                          <param name="orbitdist" number="$Distance"/>
                          <param name="orbitelevation" number="$Target.size * 0.5 * [-1, 1].random" />
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipBattle_Station_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="ShipBattle_Station_Scene_Orbit_ShipSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Ship"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="ShipBattle_Station_ShowView"/>
                          </actions>
                        </cue>
                        <cue name="ShipBattle_Station_Scene_Orbit_ShipDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Ship"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="ShipBattle_Station_ShowView"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <library name="ShipPeaceful_Check" purpose="run_actions">
              <params>
                <param name="Object"/>
                <param name="DebugChance" default="0"/>
              </params>
              <actions>
                <do_if value="$Object.isclass.ship">
                  <do_if value="$Object == md.CinematicCamera.CinematicCameraManager.$StickyTarget">
                    <return value="ShipPeaceful"/>
                  </do_if>
                  <do_elseif value="($Object.isclass.ship_xs and $Object != player.spacesuit) or ($Object.throttle lt 0.2 and $Object != player.container)" comment="MT ships and ships standing still when panning often don't look good, ignore">
                    <return value="null"/>
                  </do_elseif>
                  <return value="ShipPeaceful"/>
                </do_if>
                <return value="null"/>
              </actions>
            </library>

            <cue name="ShipPeaceful" namespace="this">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
                <set_value name="$DebugChance" exact="$Manager.$DebugChance"/>
                <set_value name="$EndTime" min="player.age + 15s" max="player.age + 25s"/>
                <set_value name="$LastView" exact="''"/>

                <set_value name="$Ship" exact="event.param"/>

                <set_value name="$HostileEncounter" exact="null"/>

                <set_value name="$Manager.$CurrentTarget" exact="$Ship"/>
                <run_actions ref="ShowOverlay"/>
              </actions>
              <cues>
                <cue name="ShipPeaceful_HostileEncounter" instantiate="true">
                  <conditions>
                    <check_any>
                      <event_object_attacked object="$Ship"/>
                      <event_object_attacked_object object="$Ship"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="event.param.isclass.ship or event.param.isclass.station">
                      <set_value name="$HostileEncounter" exact="event.param"/>
                    </do_if>
                  </actions>
                </cue>
                <cue name="ShipPeaceful_ShowView">
                  <cues>
                    <cue name="ShipPeaceful_SelectView">
                      <actions>
                        <set_value name="$Manager.$ResetOnInterrupt" exact="false"/>

                        <debug_text text="'Selecting the next shot'" chance="$DebugChance"/>
                        <do_if value="player.age gt $EndTime">
                          <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                        </do_if>
                        <do_else>
                          <do_if value="not $Ship.iswreck">
                            <find_object_component name="$NPC" object="$Ship" class="[class.player, class.npc]">
                              <match_parent walkable="true"/>
                            </find_object_component>
                            <do_if value="$NPC and $NPC.ishidden">
                              <set_value name="$NPC" exact="null"/>
                            </do_if>
                            <do_if value="@$Ship.dock != null or $Ship.speedlimit != -1">
                              <do_any>
                                <signal_cue_instantly cue="ShipPeaceful_DockPan" param="$Ship" weight="if ($Ship.dock != null) then 1 else 0"/>
                                <signal_cue_instantly cue="ShipPeaceful_Undocking" param="$Ship" weight="if ($Ship.dock == null) then 1 else 0"/>
                                <signal_cue_instantly cue="ShipPeaceful_Docked" param="$Ship" weight="if ($LastView != 'ShipPeaceful_Dock') then 1 else 0"/>
                                <signal_cue_instantly cue="ShipPeaceful_NPC" param="$NPC" weight="if ($NPC and $LastView != 'ShipPeaceful_NPC') then 1 else 0"/>
                              </do_any>
                            </do_if>
                            <do_else>
                              <do_any>
                                <do_any weight="if $HostileEncounter and $HostileEncounter.isoperational then 10 else 1">
                                  <signal_cue_instantly cue="ShipPeaceful_Orbit" param="$Ship" weight="if ($LastView != 'ShipPeaceful_Orbit') then 1 else 0"/>
                                  <signal_cue_instantly cue="ShipPeaceful_LookAt" param="$Ship" weight="if ($LastView != 'ShipPeaceful_LookAt') then 1 else 0"/>
                                </do_any>
                                <do_any weight="if $HostileEncounter and $HostileEncounter.isoperational then 1 else 10">
                                  <signal_cue_instantly cue="ShipPeaceful_Ship" param="$Ship" weight="if ($LastView != 'ShipPeaceful_Ship') then 1 else 0"/>
                                  <signal_cue_instantly cue="ShipPeaceful_ShipFollow" param="$Ship" weight="if ($LastView != 'ShipPeaceful_ShipFollow') then 1 else 0"/>
                                  <signal_cue_instantly cue="ShipPeaceful_NPC" param="$NPC" weight="if ($NPC and $LastView != 'ShipPeaceful_NPC') then 1 else 0"/>
                                </do_any>
                              </do_any>
                            </do_else>
                          </do_if>
                          <do_else>
                            <signal_cue_instantly cue="ShipPeaceful_Ship" param="$Ship"/>
                          </do_else>
                        </do_else>
                      </actions>
                    </cue>
                    <cue name="ShipPeaceful_Orbit">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Ship" exact="event.param"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipPeaceful_Orbit'"/>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" min="6s" max="8s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                        <set_value name="$Distance" min="$Ship.size * 1.2f" max="$Ship.size * 2.5f"/>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'OrbitParameterized'">
                          <param name="targetobject" object="$Ship"/>
                          <param name="orbitdist" number="$Distance"/>
                          <param name="orbitelevation" number="$Ship.size * 0.5 * [-1, 1].random" />
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="ShipPeaceful_Orbit_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Ship"/>
                          </conditions>
                          <actions>
                            <run_actions ref="ShowOverlay"/>
                            <debug_text text="'Target changed sector, `event:abort`'" chance="$DebugChance"/>
                            <reset_cue cue="ShipPeaceful_ShowView"/>
                          </actions>
                        </cue>
                        <cue name="ShipPeaceful_Orbit_TargetDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Ship"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="ShipPeaceful_LookAt">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Ship" exact="event.param"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipPeaceful_LookAt'"/>

                        <create_group groupname="$CutsceneObjects"/>
                        <add_to_group groupname="$CutsceneObjects" object="$Ship"/>

                        <set_value name="$Anchor" exact="$Ship"/>
                        <set_value name="$LookatTarget" exact="if $HostileEncounter then $HostileEncounter else $Ship"/>
                        <do_if value="$HostileEncounter">
                          <add_to_group groupname="$CutsceneObjects" object="$HostileEncounter"/>
                          <set_value name="$Manager.$ObservedObject" exact="$HostileEncounter"/>
                          <run_actions ref="ShowOverlay"/>
                        </do_if>

                        <set_value name="$Duration" min="8s" max="12s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>
                        <set_value name="$Distance" min="$Anchor.size + 50m" max="$Anchor.size + 200m"/>

                        <!--Set up cutscene-->
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Follow_A_Lookat_B'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchordist" number="-$Distance"/>
                          <param name="anchor" object="$Anchor"/>
                          <param name="anchor_x" number="0"/>
                          <param name="anchor_y" number="$Anchor.height * 0.6f"/>
                          <param name="anchor_z" number="if $Anchor == $Ship then $Anchor.length * 0.6f else 0"/>
                          <param name="target" object="$LookatTarget"/>
                          <param name="target_x" number="0"/>
                          <param name="target_y" number="0"/>
                          <param name="target_z" number="0"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="ShipPeaceful_LookAt_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector group="$CutsceneObjects"/>
                          </conditions>
                          <actions>
                            <run_actions ref="ShowOverlay"/>
                            <debug_text text="'Target changed sector, `event:abort`'" chance="$DebugChance"/>
                            <reset_cue cue="ShipPeaceful_ShowView"/>
                          </actions>
                        </cue>
                        <cue name="ShipPeaceful_LookAt_TargetDestroyed">
                          <conditions>
                            <event_object_destroyed group="$CutsceneObjects"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="ShipPeaceful_Docking">
                      <conditions>
                        <check_any>
                          <event_cue_signalled/>
                          <event_object_docking_started object="$Ship"/>
                        </check_any>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipPeaceful_Docking'"/>

                        <!--Set up cutscene-->
                        <do_if value="$Ship.assigneddock != null">
                          <set_value name="$Anchor" exact="$Ship"/>
                          <set_value name="$Target" exact="$Ship.assigneddock"/>
                          <set_value name="$Duration" exact="[9s].random + player.timewarp.factor + 1s"/>
                          <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Follow_A_Lookat_B'">
                            <param name="duration" number="$Duration"/>
                            <param name="anchor" object="$Anchor"/>
                            <param name="target" object="$Target"/>
                            <param name="anchordist" number="0"/>
                            <param name="anchor_x" number="0"/>
                            <param name="anchor_y" number="$Anchor.height * 0.7f"/>
                            <param name="anchor_z" number="-$Anchor.length * 1.5f"/>
                            <param name="target_x" number="0"/>
                            <param name="target_y" number="0"/>
                            <param name="target_z" number="0"/>
                          </play_cutscene>

                          <!--Common post actions-->
                          <run_actions ref="RegisterStartedCutscene">
                            <param name="CutsceneID"  value="this.$Cutscene"/>
                            <param name="CallerCue"   value="this"/>
                            <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                          </run_actions>
                        </do_if>
                        <do_else>
                          <set_value name="$Duration" exact="0s"/>
                        </do_else>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipPeaceful_ShowView"/>
                      </actions>
                    </cue>
                    <cue name="ShipPeaceful_Undocking">
                      <conditions>
                        <check_any>
                          <event_cue_signalled/>
                          <event_object_undocking_started object="$Ship"/>
                        </check_any>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipPeaceful_Undocking'"/>

                        <!--Set up cutscene-->
                        <set_value name="$Anchor" exact="$Ship"/>
                        <set_value name="$Duration" exact="[15s].random + player.timewarp.factor + 1s"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Follow_A_Lookat_B'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$Anchor"/>
                          <param name="target" object="$Anchor"/>
                          <param name="anchordist" number="0"/>
                          <param name="anchor_x" number="0"/>
                          <param name="anchor_y" number="0"/>
                          <param name="anchor_z" number="-$Anchor.length * 1.5f"/>
                          <param name="target_x" number="0"/>
                          <param name="target_y" number="0"/>
                          <param name="target_z" number="0"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipPeaceful_ShowView"/>
                      </actions>
                    </cue>
                    <cue name="ShipPeaceful_Docked">
                      <conditions>
                        <check_any>
                          <event_cue_signalled/>
                        </check_any>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipPeaceful_Docked'"/>

                        <!--Set up cutscene-->
                        <set_value name="$Anchor" exact="$Ship"/>
                        <set_value name="$Duration" exact="[9s].random + player.timewarp.factor + 1s"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Follow_A_Lookat_B'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$Anchor"/>
                          <param name="target" object="$Anchor"/>
                          <param name="anchordist" number="0"/>
                          <param name="anchor_x" number="0"/>
                          <param name="anchor_y" number="$Anchor.height * 1.4f + if $Ship.isclass.ship_s then 30m else 100m"/>
                          <param name="anchor_z" number="0"/>
                          <param name="target_x" number="0"/>
                          <param name="target_y" number="$Anchor.height * 1.2f"/>
                          <param name="target_z" number="$Anchor.length * 0.2f"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipPeaceful_ShowView"/>
                      </actions>
                    </cue>
                    <cue name="ShipPeaceful_DockPan">
                      <conditions>
                        <check_any>
                          <event_cue_signalled/>
                        </check_any>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipPeaceful_DockPan'"/>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" exact="[9s].random + player.timewarp.factor + 1s"/>
                        <create_position name="$StartPos" x="$Ship.width * 0.5f" y="$Ship.height * 1.4f + if $Ship.isclass.ship_s then 30m else 100m" z="0"/>
                        <create_position name="$EndPos" x="$Ship.width * -0.5f" y="$Ship.height * 1.4f + if $Ship.isclass.ship_s then 30m else 100m" z="0"/>
                        <set_value name="$StartYaw" min="0" max="345"/>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Angled_Camera_Keyframed_Shot'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$Ship"/>
                          <param name="camerapos_x_1" number="$StartPos.x"/>
                          <param name="camerapos_x_2" number="$EndPos.x"/>
                          <param name="camerapos_y_1" number="$StartPos.y"/>
                          <param name="camerapos_y_2" number="$EndPos.y"/>
                          <param name="camerapos_z_1" number="$StartPos.z"/>
                          <param name="camerapos_z_2" number="$EndPos.z"/>
                          <param name="yaw_1" number="$StartYaw"/>
                          <param name="yaw_2" number="$StartYaw + 15"/>
                          <param name="pitch_1" number="270"/>
                          <param name="pitch_2" number="270 + 15 * [-1, 1].random"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipPeaceful_ShowView"/>
                      </actions>
                    </cue>
                    <cue name="ShipPeaceful_Ship">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Ship" exact="event.param"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipPeaceful_Ship'"/>

                        <set_value name="$Angles" exact="[
                              table[$elevation  = (if ($Ship.isclass.ship_s) then $Ship.height * [2,3].random else $Ship.height * 1.2) * [-1, 1].random, 
                                    $distance   = (if ($Ship.isclass.ship_s) then 70 + $Ship.size * 1 else 150 + $Ship.size* 1.8),
                                    $panstart   = 25 + $Ship.size / 2, 
                                    $panend     = 25 + $Ship.size / 2,
                                    ],
                              table[$elevation  = (if ($Ship.isclass.ship_s) then $Ship.height * [2,3].random else $Ship.height * 1.2) * [-1, 1].random, 
                                    $distance   = (if ($Ship.isclass.ship_s) then 70 + $Ship.size * 1 else 150 + $Ship.size* 1.8),
                                    $panstart   = 25 + $Ship.size / 2, 
                                    $panend     = $Ship.size / 4,
                                    ],
                            ]" />
                        <set_value name="$AnglesIndex" min="1" max="$Angles.count"/>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" exact="[9s].random + player.timewarp.factor + 1s"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Cutscene_pan_behind_param'">
                          <param name="target_object" object="$Ship"/>
                          <param name="duration"  number="$Duration"/>
                          <param name="elevation" number="$Ship.height * 0.5"/>
                          <param name="distance"  number="$Angles.{$AnglesIndex}.$distance"/>
                          <param name="panstart"  number="$Angles.{$AnglesIndex}.$panstart"/>
                          <param name="panend"    number="$Angles.{$AnglesIndex}.$panend"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="ShipPeaceful_Ship_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Ship"/>
                          </conditions>
                          <actions>
                            <run_actions ref="ShowOverlay"/>
                            <debug_text text="'Target changed sector, `event:abort`'" chance="$DebugChance"/>
                            <reset_cue cue="ShipPeaceful_ShowView"/>
                          </actions>
                        </cue>
                        <cue name="ShipPeaceful_Ship_TargetDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Ship"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="ShipPeaceful_ShipFollow">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Ship" exact="event.param"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipPeaceful_ShipFollow'"/>

                        <set_value name="$Angles" exact="[
                              table[$pitch_start = 20,  $pitch_end = -5, $yaw_start = 210, $yaw_end =   170, $distance_start = [$Ship.size + 250, 250].max, $distance_end = $Ship.size + 25],
                              table[$pitch_start = -5,  $pitch_end = 20, $yaw_start = 210, $yaw_end =   250, $distance_start = [$Ship.size + 250, 250].max, $distance_end = $Ship.size + 25],
                              table[$pitch_start = -15, $pitch_end = 15, $yaw_start = -70, $yaw_end =  -110, $distance_start = [$Ship.size + 250, 250].max, $distance_end = $Ship.size + 25],
                              
                              table[$pitch_start = 40,  $pitch_end = 30, $yaw_start = 210, $yaw_end =   200, $distance_start = [$Ship.size * 1.5 + 250, 150].max, $distance_end = [$Ship.size * 2.3 + 150, 150].max],
                              table[$pitch_start = -5, $pitch_end = 10, $yaw_start = -70, $yaw_end =    -60, $distance_start = [$Ship.size * 1.5 + 250, 150].max, $distance_end = [$Ship.size * 2.3 + 150, 150].max],
                            ]" />
                        <set_value name="$AnglesIndex" min="1" max="$Angles.count"/>

                        <set_value name="$Duration" exact="[7s,9s].random + player.timewarp.factor + 1s"/>
                        <!--Set up cutscene-->
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Cutscene_follow_and_rotate'">
                          <param name="target_object" object="$Ship"/>
                          <param name="duration" number="$Duration"/>
                          <param name="distance_start" number="$Angles.{$AnglesIndex}.$distance_start"/>
                          <param name="distance_end"  number="$Angles.{$AnglesIndex}.$distance_end"/>
                          <param name="pitch_start"   number="$Angles.{$AnglesIndex}.$pitch_start"/>
                          <param name="pitch_end"     number="$Angles.{$AnglesIndex}.$pitch_end"/>
                          <param name="yaw_start"     number="$Angles.{$AnglesIndex}.$yaw_start"/>
                          <param name="yaw_end"       number="$Angles.{$AnglesIndex}.$yaw_end"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipPeaceful_ShowView"/>
                      </actions>

                      <cues>
                        <cue name="ShipPeaceful_ShipFollow_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Ship"/>
                          </conditions>
                          <actions>
                            <run_actions ref="ShowOverlay"/>
                            <debug_text text="'Target changed sector, `event:abort`'" chance="$DebugChance"/>
                            <reset_cue cue="ShipPeaceful_ShowView"/>
                          </actions>
                        </cue>
                        <cue name="ShipPeaceful_ShipFollow_TargetDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Ship"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>

                    </cue>
                    <cue name="ShipPeaceful_NPC">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$NPC" exact="event.param"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'ShipPeaceful_NPC'"/>

                        <!--Set up cutscene-->

                        <!-- 
                          S ships are a lot narrower, so smaller multiplication factors (and smaller numbers)
                          Paranid NPC's are 1.9m tall, so when multiplying you quickly end up above the ceiling (especially in S ships), so hard cap
                          S ships don't necessarily have much space behind the chair (e.g. ship_arg_s_heavyfighter_02_a_macro)
                        -->

                        <set_value name="$Duration" min="10s" max="15s"/>
                        <set_value name="$height" exact="if $NPC.isclass.player then 0m else $NPC.race.height"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'NPC_Keyframed_Shot_2'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$NPC"/>
                          <param name="anchor_x_1" number="if ($NPC.ship.isclass.ship_s) then [-0.3f, .3f].random else [-0.5f, .5f].random "/>
                          <param name="anchor_x_2" number="[-0.2f, .2f].random"/>
                          <param name="anchor_y_1" number="if ($NPC.ship.isclass.ship_s) then [$height *  1.2f, 1.9].min else $height *  1.1f"/>
                          <param name="anchor_y_2" number="if ($NPC.ship.isclass.ship_s) then $height * 0.8f else $height * 0.8f"/>
                          <param name="anchor_z_1" number="if ($NPC.ship.isclass.ship_s) then -1.1f else -3.0f"/>
                          <param name="anchor_z_2" number="if ($NPC.ship.isclass.ship_s) then -0.9f else -2.2f"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="ShipPeaceful_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="ShipPeaceful_NPC_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Ship"/>
                          </conditions>
                          <actions>
                            <run_actions ref="ShowOverlay"/>
                            <debug_text text="'Target changed sector, `event:abort`'" chance="$DebugChance"/>
                            <reset_cue cue="ShipPeaceful_ShowView"/>
                          </actions>
                        </cue>
                        <cue name="ShipPeaceful_NPC_TargetDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Ship"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                        <cue name="ShipPeaceful_NPC_NPC_Killed">
                          <conditions>
                            <event_object_destroyed object="$NPC"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="ShipPeaceful_ShowView"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <library name="FighterBattle_Check" purpose="run_actions">
              <params>
                <param name="Object"/>
                <param name="DebugChance" default="0"/>
              </params>
              <actions>
                <do_if value="$Object.isclass.[class.ship_s, class.ship_m]">
                  <do_if value="@$Object.order.id == 'Attack'">
                    <set_value name="$Target" exact="$Object.order.$primarytarget"/>
                    <do_if value="$Target.exists and not $Target.isclass.object">
                      <set_value name="$Target" exact="$Target.object"/>
                    </do_if>
                    <do_if value="$Target.isoperational and $Target.sector == $Object.sector and $Target.bboxdistanceto.{$Object} lt 5km">
                      <return value="FighterBattle"/>
                    </do_if>
                  </do_if>
                </do_if>
                <return value="null"/>
              </actions>
            </library>

            <cue name="FighterBattle" namespace="this">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
                <set_value name="$DebugChance" exact="$Manager.$DebugChance"/>
                <set_value name="$InterruptTime" exact="2s" comment="Time to have passed since the last cutscene starttime to allow an interrupting event cutscene"/>
                <set_value name="$EndTime" min="player.age + 25s" max="player.age + 30s"/>

                <!--Set up variables necessary for this sequence from the provided parameter-->
                <set_value name="$Ship" exact="event.param"/>

                <do_if value="@$Ship.order.id != 'Attack'">
                  <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                </do_if>
                <do_else>
                  <set_value name="$Manager.$CurrentTarget" exact="$Ship"/>
                  <run_actions ref="ShowOverlay"/>

                  <set_value name="$Sector" exact="$Ship.sector"/>
                  <set_value name="$LeadAttacker" exact="$Ship"/>
                  <do_if value="$Ship.commander.isclass.[class.ship_s, class.ship_m]">
                    <set_value name="$LeadAttacker" exact="$Ship.commander"/>
                  </do_if>
                  <do_else>
                    <set_value name="$LeadAttacker" exact="$Ship"/>
                  </do_else>

                  <create_group groupname="$AttackerFighters"/>
                  <add_to_group groupname="$AttackerFighters" object="$LeadAttacker"/>
                  <add_to_group groupname="$AttackerFighters" list="$LeadAttacker.allsubordinates"/>
                  <!--$PrimaryAttacker is a group for the attacker currently the focus of a cutscene so we can react to events fired on it-->
                  <create_group groupname="$PrimaryAttacker"/>
                  <create_group groupname="$PrimaryAttackerWeapons"/>

                  <create_group groupname="$Defenders"/>
                  <set_value name="$Target" exact="$Ship.order.$primarytarget"/>
                  <do_if value="$Target">
                    <do_if value="not $Target.isclass.object">
                      <set_value name="$Target" exact="$Target.object"/>
                    </do_if>
                    <do_if value="$Target.isoperational">
                      <add_to_group groupname="$Defenders" object="$Target"/>
                    </do_if>
                  </do_if>
                  <!--$PrimaryDefender is a group for the defender currently the focus of a cutscene so we can react to events fired on it-->
                  <create_group groupname="$PrimaryDefender"/>
                </do_else>
              </actions>
              <cues>
                <!--Helper libraries-->

                <!--Requires $Attacker to be set-->
                <library name="FighterBattle_Set_Primary_Attacker" purpose="include_actions">
                  <actions>
                    <clear_group group="$PrimaryAttackerWeapons"/>
                    <add_to_group groupname="$PrimaryAttacker" object="$Attacker" replace="true"/>
                    <find_object_component groupname="$PrimaryAttackerWeapons" class="class.weapon" weapontype="combat" object="$Attacker" multiple="true">
                      <match class="class.turret" negate="true"/>
                    </find_object_component>
                  </actions>
                </library>

                <cue name="FighterBattle_ShowView">
                  <cues>
                    <cue name="FighterBattle_SelectView">
                      <actions>
                        <set_value name="$Manager.$ResetOnInterrupt" exact="false"/>

                        <do_if value="player.age gt $EndTime">
                          <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                        </do_if>
                        <do_else>
                          <set_value name="$ValidShots" exact="[]"/>

                          <!--Check FighterBattle_Shot_Follow_A_Lookat_B-->
                          <do_all>
                            <shuffle_group group="$Defenders"/>
                            <do_for_each name="$Defender" in="$Defenders">
                              <do_if value="$Defender.sector == $Sector">
                                <set_value name="$PotentialAttackers" exact="[]"/>
                                <do_for_each name="$Attacker" in="$AttackerFighters">
                                  <do_if value="$Attacker.sector == $Sector and $Attacker.bboxdistanceto.{$Defender} lt 7km">
                                    <append_to_list name="$PotentialAttackers" exact="$Attacker"/>
                                  </do_if>
                                </do_for_each>
                                <do_if value="$PotentialAttackers.count">
                                  <append_to_list name="$ValidShots" exact="[FighterBattle_Shot_Follow_A_Lookat_B,
                                                  table[
                                                    $attacker = $PotentialAttackers.random,
                                                    $target = $Defender]]"/>
                                  <break/>
                                </do_if>
                              </do_if>
                            </do_for_each>
                          </do_all>

                          <do_if value="$ValidShots.count">
                            <set_value name="$SelectedShot" exact="$ValidShots.random"/>
                            <signal_cue_instantly cue="$SelectedShot.{1}" param="$SelectedShot.{2}"/>
                          </do_if>
                          <do_else>
                            <debug_text text="'No valid shots available'" chance="$DebugChance"/>
                            <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                          </do_else>
                        </do_else>
                      </actions>
                    </cue>

                    <!--event.param = table[$attacker = fighter, $target = attacktarget] or vice-versa-->
                    <cue name="FighterBattle_Shot_Follow_A_Lookat_B">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <!--Set up cutscene-->
                        <set_value name="$Attacker" exact="event.param.$attacker"/>
                        <set_value name="$Target" exact="event.param.$target"/>
                        <include_actions ref="FighterBattle_Set_Primary_Attacker"/>

                        <do_any>
                          <do_all>
                            <set_value name="$Anchor" exact="$Attacker"/>
                            <set_value name="$LookatTarget" exact="$Target"/>
                          </do_all>
                          <do_all weight="if $Target.isclass.station then 0 else 1">
                            <set_value name="$Anchor" exact="$Target"/>
                            <set_value name="$LookatTarget" exact="$Attacker"/>
                          </do_all>
                        </do_any>

                        <set_value name="$Duration" min="3s" max="5s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Follow_A_Lookat_B'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$Anchor"/>
                          <param name="target" object="$LookatTarget"/>
                          <param name="anchordist" number="$Anchor.size * -3.0f"/>
                          <param name="anchor_x" number="0"/>
                          <param name="anchor_y" number="$Anchor.height * 0.5f"/>
                          <param name="anchor_z" number="$Anchor.size * 1.5f"/>
                          <param name="target_x" number="0"/>
                          <param name="target_y" number="0"/>
                          <param name="target_z" number="$LookatTarget.length * 0.4f"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="FighterBattle_ShowView"/>
                      </actions>
                    </cue>

                    <!--Event shots-->
                    <cue name="FighterBattle_EventShot_Attacker_Shooting">
                      <conditions>
                        <event_weapon_fired group="$PrimaryAttackerWeapons"/>
                        <check_value value="player.age ge $Manager.$LastCutsceneStartTime + $InterruptTime"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" min="2s" max="4s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                        <set_value name="$Anchor" exact="event.object"/>
                        <set_value name="$BarrelPos" exact="$Anchor.barrelposition"/>
                        <set_value name="$Front_Z" exact="[$BarrelPos.z, $Anchor.length / 2.0f].max"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Lookat_Target_Keyframed_Shot'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$Anchor"/>
                          <param name="lookat" object="$Anchor"/>
                          <param name="camerapos_x_1" number="$Anchor.width * 0.1f + 1.4m"/>
                          <param name="camerapos_x_2" number="$Anchor.width * 0.2f + 1.4m"/>
                          <param name="camerapos_y_1" number="$Anchor.height * 0.1f - 0.5m"/>
                          <param name="camerapos_y_2" number="$Anchor.height * 0.2f - 0.7m"/>
                          <param name="camerapos_z_1" number="[$Front_Z * 2.4f, 25m].max + 1.5m"/>
                          <param name="camerapos_z_2" number="[$Front_Z * 2.6f, 30m].max + 1.5m"/>
                          <param name="lookatpos_x_1" number="$BarrelPos.x"/>
                          <param name="lookatpos_x_2" number="$BarrelPos.x"/>
                          <param name="lookatpos_y_1" number="$BarrelPos.y"/>
                          <param name="lookatpos_y_2" number="$BarrelPos.y"/>
                          <param name="lookatpos_z_1" number="$Front_Z * 1.4f"/>
                          <param name="lookatpos_z_2" number="$Front_Z * 1.2f"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="FighterBattle_ShowView"/>
                      </actions>
                    </cue>

                    <cue name="FighterBattle_EventShot_Attacker_Killed">
                      <conditions>
                        <event_object_destroyed object="$Ship"/>
                        <check_value value="player.age ge $Manager.$LastCutsceneStartTime + $InterruptTime"/>
                      </conditions>
                      <actions>
                        <do_if value="event.param2 == killmethod.removed">
                          <set_value name="$Duration" exact="1ms"/>
                        </do_if>
                        <do_else>
                          <!--Common preparation actions-->
                          <run_actions ref="StopCurrentCutscene"/>

                          <!--Set up cutscene-->
                          <set_value name="$Duration" min="6s" max="8s"/>
                          <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                          <set_value name="$Distance" min="$Ship.size * 1.2f" max="$Ship.size * 2.5f"/>

                          <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'OrbitParameterized'">
                            <param name="targetobject" object="$Ship"/>
                            <param name="orbitdist" number="$Distance"/>
                            <param name="orbitelevation" number="$Ship.size * 0.5 * [-1, 1].random" />
                          </play_cutscene>

                          <!--Common post actions-->
                          <run_actions ref="RegisterStartedCutscene">
                            <param name="CutsceneID"  value="this.$Cutscene"/>
                            <param name="CallerCue"   value="this"/>
                            <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                          </run_actions>

                          <set_value name="$EndTime" exact="player.age + 1s"/>
                          <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                        </do_else>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                      </actions>
                    </cue>

                    <cue name="FighterBattle_EventShot_Defender_Killed">
                      <conditions>
                        <event_object_destroyed group="$Defenders"/>
                        <check_value value="player.age ge $Manager.$LastCutsceneStartTime + $InterruptTime"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <!--Set up cutscene-->
                        <set_value name="$Anchor" exact="event.object"/>
                        <set_value name="$LookatTarget" exact="null"/>
                        <do_if value="$AttackerFighters.indexof.{event.param}" chance="50">
                          <set_value name="$LookatTarget" exact="event.param"/>
                        </do_if>

                        <do_if value="$LookatTarget">
                          <set_value name="$Duration" min="3s" max="5s"/>
                          <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                          <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Follow_A_Lookat_B'">
                            <param name="duration" number="$Duration"/>
                            <param name="anchor" object="$Anchor"/>
                            <param name="target" object="$LookatTarget"/>
                            <param name="anchordist" number="$Anchor.size * -1.8f"/>
                            <param name="anchor_x" number="0"/>
                            <param name="anchor_y" number="$Anchor.height * 1.3f"/>
                            <param name="anchor_z" number="$Anchor.length * 1.8f"/>
                            <param name="target_x" number="0"/>
                            <param name="target_y" number="0"/>
                            <param name="target_z" number="$LookatTarget.length * 0.4f"/>
                          </play_cutscene>
                        </do_if>
                        <do_else>
                          <set_value name="$Duration" min="3s" max="5s"/>
                          <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                          <get_safe_pos result="$Safepos1" object="$Anchor" zone="$Anchor.zone" min="$Anchor.size" max="$Anchor.size * 2.0f"/>
                          <get_safe_pos result="$Safepos2" value="$Safepos1" zone="$Anchor.zone" exact="$Anchor.size * 0.5f"/>
                          <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Lookat_Target_Keyframed_Shot'">
                            <param name="duration" number="$Duration"/>
                            <param name="anchor" object="$Anchor.zone"/>
                            <param name="lookat" object="$Anchor"/>
                            <param name="camerapos_x_1" number="$Safepos1.x"/>
                            <param name="camerapos_x_2" number="$Safepos2.x"/>
                            <param name="camerapos_y_1" number="$Safepos1.y"/>
                            <param name="camerapos_y_2" number="$Safepos2.y"/>
                            <param name="camerapos_z_1" number="$Safepos1.z"/>
                            <param name="camerapos_z_2" number="$Safepos2.z"/>
                            <param name="lookatpos_x_1" number="0"/>
                            <param name="lookatpos_x_2" number="0"/>
                            <param name="lookatpos_y_1" number="0"/>
                            <param name="lookatpos_y_2" number="0"/>
                            <param name="lookatpos_z_1" number="0"/>
                            <param name="lookatpos_z_2" number="0"/>
                          </play_cutscene>
                        </do_else>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="FighterBattle_ShowView"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <library name="Gate_Check" purpose="run_actions">
              <params>
                <param name="Object"/>
                <param name="DebugChance" default="0"/>
              </params>
              <actions>
                <do_if value="$Object.isclass.gate">
                  <return value="Gate_Environment" comment="cue to signal"/>
                </do_if>
                <return value="null"/>
              </actions>
            </library>

            <cue name="Gate_Environment" namespace="this">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
                <set_value name="$DebugChance" exact="$Manager.$DebugChance"/>
                <set_value name="$EndTime" min="player.age + 15s" max="player.age + 25s"/>
                <set_value name="$LastView" exact="''"/>
                <set_value name="$Gate" exact="event.param"/>
                <set_value name="$Manager.$CurrentTarget" exact="$Gate"/>
              </actions>
              <cues>
                <cue name="Gate_ShowView">
                  <cues>
                    <cue name="Gate_SelectView">
                      <actions>
                        <set_value name="$Manager.$ObservedObject" exact="null"/>
                        <run_actions ref="ShowOverlay"/>
                        <set_value name="$Manager.$ResetOnInterrupt" exact="false"/>

                        <do_if value="player.age gt $EndTime">
                          <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                        </do_if>
                        <do_else>
                          <set_value name="$ValidShots" exact="[]"/>

                          <!-- gate pan scene -->
                          <append_to_list name="$ValidShots" exact="[Gate_Scene, $Gate]"/>

                          <!-- gate ship approach scene -->
                          <find_ship name="$GateShip" space="$Gate.zone">
                            <match_is_in_view_of object="$Gate" vertical="90deg" horizontal="120deg" />
                            <match class="class.ship_xs" negate="true" comment="no lasertowers etc"/>
                            <match_distance object="$Gate" max="20000m" />
                          </find_ship>
                          <do_if value="$GateShip.exists">
                            <debug_text text="'Found Ship %s!'.[$GateShip.knownname]" chance="$DebugChance"/>
                            <clear_list list="$ValidShots" chance="90" comment="The gate/ship cutscenes are much nicer, if these are possible only play 'Gate_Scene' with a small chance"/>
                            <append_to_list name="$ValidShots" exact="[Gate_Follow_A_Lookat_B, table[ $gate = $Gate, $target = $GateShip]]"/>
                            <append_to_list name="$ValidShots" exact="[Gate_Scene2, table[ $gate = $Gate, $target = $GateShip]]"/>

                          </do_if>

                          <do_if value="$ValidShots.count">
                            <set_value name="$SelectedShot" exact="$ValidShots.random"/>
                            <signal_cue_instantly cue="$SelectedShot.{1}" param="$SelectedShot.{2}"/>
                          </do_if>
                          <do_else>
                            <debug_text text="'No valid shots available'" chance="$DebugChance"/>
                            <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                          </do_else>
                        </do_else>
                      </actions>
                    </cue>
                    <cue name="Gate_Scene">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Gate" exact="event.param"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <do_if value="$LastView == 'Gate_Scene'">
                          <!--Stop playing cutscenes from this gate if the cutscene keeps looping (no ships in range)-->
                          <set_value name="$EndTime" exact="player.age - 10s"/>
                        </do_if>

                        <set_value name="$AnglesIndex" exact="if $LastView == 'Gate_Scene' then 2 else 1"/>

                        <set_value name="$LastView" exact="'Gate_Scene'"/>

                        <set_value name="$Angles" exact="[
                              table[$elevation  =   0,  
                                    $distance   = if ($Gate.macro.ismacro.{macro.props_gates_anc_gate_macro}) then [2500,2700,3000].random else [900, 1000, 1100].random,  
                                    $panstart   = 0,   
                                    $panend     = 0,
                                    $duration = 3s,
                                  ],
                                table[$elevation  =   10,  
                                    $distance   = if ($Gate.macro.ismacro.{macro.props_gates_anc_gate_macro}) then [3500,4000,5000].random else [6000,7000,8000].random,  
                                    $panstart   = (25 * [-1,1].random) + $Gate.size / 2, 
                                    $panend     = $Gate.size / 2,
                                    $duration = 8s,
                                  ],  
                            ]" />

                        <!--Set up cutscene-->
                        <set_value name="$Duration" exact="$Angles.{$AnglesIndex}.$duration + player.timewarp.factor + 1s"/>
                        <debug_text text="'Gate=%s $Duration=%s'.[$Gate.knownname, $Duration]" chance="$DebugChance"/>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Cutscene_pan_behind_param'">
                          <param name="target_object" object="$Gate"/>
                          <param name="duration"  number="$Duration"/>
                          <param name="elevation" number="$Angles.{$AnglesIndex}.$elevation"/>
                          <param name="distance"  number="$Angles.{$AnglesIndex}.$distance"/>
                          <param name="panstart"  number="$Angles.{$AnglesIndex}.$panstart"/>
                          <param name="panend"    number="$Angles.{$AnglesIndex}.$panend"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="Gate_ShowView"/>
                      </actions>
                    </cue>

                    <cue name="Gate_Follow_A_Lookat_B">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'Gate_Follow_A_Lookat_B'"/>

                        <!--Set up cutscene-->
                        <set_value name="$Gate"   exact="event.param.$gate"/>
                        <set_value name="$Target" exact="event.param.$target"/>

                        <do_any comment="decide on gate-to-target or target-to-gate">
                          <do_all>
                            <set_value name="$Anchor" exact="$Gate"/>
                            <set_value name="$LookatTarget" exact="$Target"/>
                          </do_all>
                          <do_all>
                            <set_value name="$Anchor" exact="$Target"/>
                            <set_value name="$LookatTarget" exact="$Gate"/>
                          </do_all>
                        </do_any>
                        <set_value name="$Manager.$ObservedObject" exact="$Target"/>
                        <run_actions ref="ShowOverlay"/>

                        <set_value name="$Angles" exact="[
                              table[
                                    $anchordist  = $Anchor.size * -2.0f, 
                                    $anchor_x    = 0,
                                    $anchor_y    = $Anchor.height * 0.5f,
                                    $anchor_z    = $Anchor.size * 0.8f,
                                    $target_x    = 0,
                                    $target_y    = 0,
                                    $target_z    = $LookatTarget.length * 0.4f,
                                   ],
                              table[$anchor      = $Anchor, 
                                    $target      = $LookatTarget, 
                                    $anchordist  = 750, 
                                    $anchor_x    = 0,
                                    $anchor_y    = 250,
                                    $anchor_z    = 0,
                                    $target_x    = 0,
                                    $target_y    = 0,
                                    $target_z    = $LookatTarget.length * 0.4f,
                                   ],
                            ]" />
                        <set_value name="$AnglesIndex" min="1" max="$Angles.count"/>

                        <debug_text text="'Anchor=%s Target=%s anchor(%s %s %s) target(%s =%s %s)'.[$Anchor.knownname, $LookatTarget.knownname, 
                                    $Angles.{$AnglesIndex}.$anchor_x, $Angles.{$AnglesIndex}.$anchor_y, $Angles.{$AnglesIndex}.$anchor_z,
                                    $Angles.{$AnglesIndex}.$target_x, $Angles.{$AnglesIndex}.$target_y, $Angles.{$AnglesIndex}.$target_z]" chance="$DebugChance"/>

                        <set_value name="$Duration" min="5s" max="9s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Follow_A_Lookat_B'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="if $Angles.{$AnglesIndex}.$anchor? then $Angles.{$AnglesIndex}.$anchor else $Anchor"/>
                          <param name="target" object="if $Angles.{$AnglesIndex}.$target? then $Angles.{$AnglesIndex}.$target else $LookatTarget"/>
                          <param name="anchordist" number="$Angles.{$AnglesIndex}.$anchordist"/>
                          <param name="anchor_x" number="$Angles.{$AnglesIndex}.$anchor_x"/>
                          <param name="anchor_y" number="$Angles.{$AnglesIndex}.$anchor_y"/>
                          <param name="anchor_z" number="$Angles.{$AnglesIndex}.$anchor_z"/>
                          <param name="target_x" number="$Angles.{$AnglesIndex}.$target_x"/>
                          <param name="target_y" number="$Angles.{$AnglesIndex}.$target_y"/>
                          <param name="target_z" number="$Angles.{$AnglesIndex}.$target_z"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="Gate_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="Gate_A_B_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Target"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Target changed sector, so the camera will stop moving (not great)'" chance="$DebugChance"/>
                            <reset_cue cue="Gate_ShowView"/>
                          </actions>
                        </cue>
                        <cue name="Gate_A_B_TargetDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Target"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="Gate_ShowView"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                    <cue name="Gate_Scene2">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'Gate_Scene2'"/>

                        <!--Set up cutscene-->
                        <set_value name="$Gate"   exact="event.param.$gate"/>
                        <set_value name="$Target" exact="event.param.$target"/>

                        <do_any comment="decide on gate-to-target or target-to-gate">
                          <do_all>
                            <set_value name="$Anchor" exact="$Gate"/>
                            <set_value name="$LookatTarget" exact="$Target"/>
                          </do_all>
                          <do_all>
                            <set_value name="$Anchor" exact="$Target"/>
                            <set_value name="$LookatTarget" exact="$Gate"/>
                          </do_all>
                        </do_any>

                        <set_value name="$Manager.$ObservedObject" exact="$Target"/>
                        <run_actions ref="ShowOverlay"/>

                        <!-- note: distance/flytodistance in % to object size, not in worldunits! -->
                        <set_value name="$Angles" exact="[
                              table[$anchor         = $Anchor, 
                                    $target         = $LookatTarget, 
                                    $distance       = [125, 200].random, 
                                    $flytodistance  = [125, 200].random, 
                                   ],
                            ]" />
                        <set_value name="$AnglesIndex" min="1" max="$Angles.count"/>

                        <set_value name="$Duration" min="15s" max="15s"/>

                        <debug_text text="'Anchor=`%s` Target=`%s` distance=%s%% flytodistance=%s%% duration=%s'.[$Anchor.knownname, $LookatTarget.knownname, $Angles.{$AnglesIndex}.$distance, $Angles.{$AnglesIndex}.$flytodistance, $Duration]" chance="$DebugChance"/>

                        <set_value name="$Orbit2Rotation" min="16" max="360"/>

                        <!-- Warning: Don't modify duration (see cutscene_flyfromto for details -->
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Cutscene_flyfromto'">
                          <param name="source" object="$Angles.{$AnglesIndex}.$anchor"/>
                          <param name="target" object="$Angles.{$AnglesIndex}.$target"/>
                          <param name="abortfocus" object="$Gate"/>
                          <param name="distance" number="$Angles.{$AnglesIndex}.$distance"/>
                          <param name="flytodistance" number="$Angles.{$AnglesIndex}.$flytodistance"/>
                          <param name="orbit1_yaw_start" number="if $Angles.{$AnglesIndex}.$anchor.isclass.{class.gate} then 45 else 1"/>
                          <param name="orbit1_yaw_end" number="if $Angles.{$AnglesIndex}.$anchor.isclass.{class.gate} then 55 else 8"/>
                          <param name="orbit1_elevation" number="15"/>
                          <param name="orbit2_yaw_start" number="$Orbit2Rotation"/>
                          <param name="orbit2_yaw_end" number="$Orbit2Rotation - 16"/>
                          <param name="orbit2_pitch" number="[10, 31, 60].random"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="Gate_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="Gate_Scene2_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Target"/>
                          </conditions>
                          <actions>
                            <debug_text text="'Target changed sector, `event:abort`'" chance="$DebugChance"/>
                            <reset_cue cue="Gate_ShowView"/>
                            <!--cutscene_event key="'Cutscene_flyfromto'" event="'abort'"/-->
                          </actions>
                        </cue>
                        <cue name="Gate_Scene2_TargetDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Target"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="Gate_ShowView"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <library name="CapitalShip_Check" purpose="run_actions">
              <params>
                <param name="Object"/>
                <param name="DebugChance" default="0"/>
              </params>
              <actions>
                <do_if value="$Object.isclass.ship and $Object.iscapitalship">
                  <return value="CapitalShip_Environment" comment="cue to signal"/>
                </do_if>
                <return value="null"/>
              </actions>
            </library>

            <cue name="CapitalShip_Environment" namespace="this">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
                <set_value name="$DebugChance" exact="$Manager.$DebugChance"/>
                <set_value name="$EndTime" min="player.age + 10s" max="player.age + 15s"/>
                <set_value name="$LastView" exact="''"/>
                <set_value name="$Object" exact="event.param"/>
                <set_value name="$Manager.$CurrentTarget" exact="$Object"/>
              </actions>
              <cues>
                <cue name="CapitalShip_ShowView">
                  <cues>
                    <cue name="CapitalShip_SelectView">
                      <actions>
                        <set_value name="$Manager.$ObservedObject" exact="null"/>
                        <run_actions ref="ShowOverlay"/>
                        <set_value name="$Manager.$ResetOnInterrupt" exact="false"/>
                        <do_if value="player.age gt $EndTime">
                          <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                        </do_if>
                        <do_else>
                          <do_if value="$Object.subordinates.count > 0">
                            <set_value name="$ValidSubordinate" exact="null"/>
                            <set_value name="$Subordinates" exact="$Object.subordinates"/>
                            <shuffle_list list="$Subordinates"/>
                            <do_for_each name="$Subordinate" in="$Subordinates">
                              <do_if value="$Object.bboxdistanceto.{$Subordinate} gt 500m and $Object.bboxdistanceto.{$Subordinate} lt 5km and $Subordinate.dock == null">
                                <do_if value="@$Subordinate.order.id != 'DockAt' or (@$Subordinate.order.$destination != $Object or $Subordinate.bboxdistanceto.{$Object} gt 1km)">
                                  <set_value name="$ValidSubordinate" exact="$Subordinate"/>
                                  <break/>
                                </do_if>
                                <do_elseif value="$Subordinate.order == null">
                                  <set_value name="$ValidSubordinate" exact="$Subordinate"/>
                                  <break/>
                                </do_elseif>
                              </do_if>
                            </do_for_each>
                            <do_any>
                              <signal_cue_instantly cue="CapitalShip_Scene_Subordinates" param="table[ $commander = $Object, $subordinate = $ValidSubordinate]" weight="if ($ValidSubordinate != null and $LastView != 'CapitalShip_Scene_Subordinates') then 10 else 0"/>
                              <signal_cue_instantly cue="CapitalShip_Scene_Orbit" param="$Object" weight="if $LastView != 'CapitalShip_Scene_Orbit' then 1 else 0"/>
                              <signal_cue_instantly cue="CapitalShip_Scene_FlyOver" param="$Object" weight="if $LastView != 'CapitalShip_Scene_FlyOver' then 1 else 0"/>
                            </do_any>
                          </do_if>
                          <do_else>
                            <do_any>
                              <signal_cue_instantly cue="CapitalShip_Scene_Orbit" param="$Object" weight="if $LastView != 'CapitalShip_Scene_Orbit' then 1 else 0"/>
                              <signal_cue_instantly cue="CapitalShip_Scene_FlyOver" param="$Object" weight="if $LastView != 'CapitalShip_Scene_FlyOver' then 1 else 0"/>
                            </do_any>
                          </do_else>
                        </do_else>
                      </actions>
                    </cue>
                    <cue name="CapitalShip_Scene_Orbit">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'CapitalShip_Scene_Orbit'"/>

                        <!--Set up cutscene-->
                        <set_value name="$Commander" exact="event.param"/>
                        <set_value name="$Duration" min="8s" max="12s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                        <set_value name="$Distance" min="$Commander.size * 1.2f" max="$Commander.size * 2.5f"/>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'OrbitParameterized'">
                          <param name="targetobject" object="$Commander"/>
                          <param name="orbitdist" number="$Distance"/>
                          <param name="orbitelevation" number="$Commander.size * 0.5 * [-1, 1].random" />
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="CapitalShip_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="CapitalShip_Scene_Orbit_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Commander"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="CapitalShip_ShowView"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="CapitalShip_Scene_FlyOver">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'CapitalShip_Scene_FlyOver'"/>

                        <!--Set up cutscene-->
                        <set_value name="$Commander" exact="event.param"/>
                        <set_value name="$Duration" min="4s" max="6s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                        <set_value name="$Distance" min="$Commander.height * 2.0f" max="$Commander.height * 4.0f"/>
                        <set_value name="$Direction" exact="[-1,1].random"/>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Lookat_Target_Keyframed_Shot'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$Commander"/>
                          <param name="lookat" object="$Commander"/>
                          <param name="camerapos_x_1" number="$Commander.width * $Direction"/>
                          <param name="camerapos_x_2" number="$Commander.width * -$Direction"/>
                          <param name="camerapos_y_1" number="$Distance"/>
                          <param name="camerapos_y_2" number="$Distance"/>
                          <param name="camerapos_z_1" number="$Commander.length * 0.5f * $Direction"/>
                          <param name="camerapos_z_2" number="($Commander.length * 1.5f + 500m) * $Direction"/>
                          <param name="lookatpos_x_1" number="0"/>
                          <param name="lookatpos_x_2" number="0"/>
                          <param name="lookatpos_y_1" number="0"/>
                          <param name="lookatpos_y_2" number="0"/>
                          <param name="lookatpos_z_1" number="-$Commander.length * 2 * $Direction"/>
                          <param name="lookatpos_z_2" number="-$Commander.length * 2 * $Direction"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="CapitalShip_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="CapitalShip_Scene_FlyOver_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Commander"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="CapitalShip_ShowView"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="CapitalShip_Scene_Subordinates">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'CapitalShip_Scene_Subordinates'"/>

                        <!--Set up cutscene-->
                        <set_value name="$Commander"   exact="event.param.$commander"/>
                        <set_value name="$Subordinate" exact="event.param.$subordinate"/>

                        <set_value name="$Manager.$ObservedObject" exact="$Subordinate"/>
                        <run_actions ref="ShowOverlay"/>

                        <create_group groupname="$Targets"/>
                        <add_to_group groupname="$Targets" object="$Commander"/>
                        <add_to_group groupname="$Targets" object="$Subordinate"/>

                        <set_value name="$Duration" min="8s" max="12s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                        <set_value name="$Distance" min="$Subordinate.size * 1.5f" max="$Subordinate.size * 3.0f"/>

                        <do_if value="$Subordinate.position.y lt $Commander.position.y">
                          <set_value name="$AnchorHeight" exact="$Subordinate.height * 1.5f"/>
                        </do_if>
                        <do_else>
                          <set_value name="$AnchorHeight" exact="-$Subordinate.height * 1.5f"/>
                        </do_else>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Follow_A_Lookat_B'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchor" object="$Subordinate"/>
                          <param name="target" object="$Commander"/>
                          <param name="anchordist" number="-$Distance"/>
                          <param name="anchor_x" number="0"/>
                          <param name="anchor_y" number="$AnchorHeight"/>
                          <param name="anchor_z" number="0"/>
                          <param name="target_x" number="0"/>
                          <param name="target_y" number="0"/>
                          <param name="target_z" number="0"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="CapitalShip_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="CapitalShip_Scene_Subordinates_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector group="$Targets"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="CapitalShip_ShowView"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <library name="Gravidar_Check" purpose="run_actions">
              <params>
                <param name="Object"/>
                <param name="DebugChance" default="0"/>
              </params>
              <actions>
                <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
                <set_value name="$Contacts" exact="[]"/>
                <do_if value="$Object.isclass.station">
                  <return value="null"/>
                </do_if>
                <find_gravidar_contact name="$Contacts" object="$Object" multiple="true" class="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl, class.station, class.gate]" excluded="$Object" trueowner="$Manager.$Channels.{$Manager.$ChannelIndex}" negateownerfilter="true">
                  <match_distance object="$Object" max="15km"/>
                </find_gravidar_contact>
                <do_if value="$Contacts.count > 0 and (($Object.isclass.ship and $Object.dock == null and $Object.speedlimit == -1) or not $Object.isclass.ship)">
                  <return value="Gravidar_Environment" comment="cue to signal" chance="if $Manager.$StickyTarget == $Object and $Object.isclass.satellite then 100 else 10"/>
                </do_if>
                <return value="null"/>
              </actions>
            </library>

            <cue name="Gravidar_Environment" namespace="this">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
                <set_value name="$DebugChance" exact="$Manager.$DebugChance"/>
                <set_value name="$EndTime" exact="player.age + 15s"/>
                <set_value name="$LastView" exact="''"/>
                <set_value name="$Object" exact="event.param"/>
                <set_value name="$Manager.$CurrentTarget" exact="$Object"/>
              </actions>
              <cues>
                <cue name="Gravidar_ShowView">
                  <cues>
                    <cue name="Gravidar_SelectView">
                      <actions>
                        <set_value name="$Manager.$ObservedObject" exact="null"/>
                        <set_value name="$Manager.$ResetOnInterrupt" exact="false"/>

                        <set_value name="$Contacts" exact="null"/>
                        <find_gravidar_contact name="$Contacts" object="$Object" multiple="true" class="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl, class.station, class.gate]" excluded="$Object" trueowner="$Manager.$Channels.{$Manager.$ChannelIndex}" negateownerfilter="true">
                          <match_distance object="$Object" max="15km"/>
                        </find_gravidar_contact>

                        <do_if value="player.age gt $EndTime or $Contacts.count == 0">
                          <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                        </do_if>
                        <do_else>
                          <do_any>
                            <signal_cue_instantly cue="Gravidar_FlyTo" param="table[$Object = $Object, $Contact = $Contacts.random]" weight="if $LastView != 'Gravidar_FlyTo' then 1 else 0"/>
                            <signal_cue_instantly cue="Gravidar_LookAt_Follow" param="table[$Follow = $Object, $LookAt = $Contacts.random]" weight="if $LastView != 'Gravidar_LookAt_Follow' then 1 else 0"/>
                          </do_any>
                        </do_else>
                      </actions>
                    </cue>
                    <cue name="Gravidar_FlyTo">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Object" exact="event.param.$Object"/>
                        <set_value name="$Contact" exact="event.param.$Contact"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'Gravidar_FlyTo'"/>

                        <create_group groupname="$CutsceneObjects"/>
                        <add_to_group groupname="$CutsceneObjects" object="$Object"/>

                        <set_value name="$Anchor" exact="$Object"/>
                        <set_value name="$LookatTarget" exact="$Contact"/>
                        <add_to_group groupname="$CutsceneObjects" object="$LookatTarget"/>

                        <set_value name="$Manager.$ObservedObject" exact="$LookatTarget"/>
                        <run_actions ref="ShowOverlay"/>

                        <set_value name="$Distance" min="200" max="300"/>
                        <set_value name="$FlyToDistance" min="200" max="350"/>
                        <set_value name="$StartYaw" min="0" max="359"/>

                        <set_value name="$Duration" exact="16s"/>

                        <!-- Warning: Don't modify duration (see cutscene_flyfromto for details -->
                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Cutscene_flyfromto'">
                          <param name="source" object="$Anchor"/>
                          <param name="target" object="$LookatTarget"/>
                          <param name="abortfocus" object="$Anchor"/>
                          <param name="distance" number="$Distance"/>
                          <param name="flytodistance" number="$FlyToDistance"/>
                          <param name="orbit1_yaw_start" number="$StartYaw"/>
                          <param name="orbit1_yaw_end" number="$StartYaw"/>
                          <param name="orbit1_elevation" number="15"/>
                          <param name="orbit2_yaw_start" number="30"/>
                          <param name="orbit2_yaw_end" number="-30"/>
                          <param name="orbit2_pitch" number="10"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                        <set_value name="$EndTime" exact="player.age + 1s"/>
                        <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="Gravidar_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="Gravidar_FlyTo_SectorChanged">
                          <conditions>
                            <event_object_changed_sector group="$CutsceneObjects"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="Gravidar_ShowView"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="Gravidar_LookAt_Follow">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Follow" exact="event.param.$Follow"/>
                        <set_value name="$LookAt" exact="event.param.$LookAt"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'Gravidar_LookAt_Follow'"/>

                        <create_group groupname="$CutsceneObjects"/>
                        
                        <set_value name="$Anchor" exact="$Follow"/>
                        <add_to_group groupname="$CutsceneObjects" object="$Anchor"/>

                        <set_value name="$LookatTarget" exact="$LookAt"/>
                        <add_to_group groupname="$CutsceneObjects" object="$LookatTarget"/>

                        <set_value name="$Manager.$ObservedObject" exact="$LookatTarget"/>
                        <run_actions ref="ShowOverlay"/>

                        <set_value name="$Duration" min="8s" max="12s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>
                        <set_value name="$Distance" min="$Anchor.size * 1.5f" max="$Anchor.size * 4.5f"/>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Follow_A_Lookat_B'">
                          <param name="duration" number="$Duration"/>
                          <param name="anchordist" number="-$Distance"/>
                          <param name="anchor" object="$Anchor"/>
                          <param name="anchor_x" number="0"/>
                          <param name="anchor_y" number="$Anchor.height * 0.6f"/>
                          <param name="anchor_z" number="0"/>
                          <param name="target" object="$LookatTarget"/>
                          <param name="target_x" number="0"/>
                          <param name="target_y" number="0"/>
                          <param name="target_z" number="0"/>
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                        <set_value name="$EndTime" exact="player.age + 1s"/>
                        <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="Gravidar_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="Gravidar_LookAt_Follow_SectorChanged">
                          <conditions>
                            <event_object_changed_sector group="$CutsceneObjects"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="Gravidar_ShowView"/>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>

            <library name="Venture_Check" purpose="run_actions">
              <params>
                <param name="Object"/>
                <param name="DebugChance" default="0"/>
              </params>
              <actions>
                <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
                <set_value name="$Contacts" exact="[]"/>
                <find_gravidar_contact name="$Contacts" object="$Object" multiple="true" visitor="true" excluded="$Object" canbelivestreamed="true" class="[class.ship_s, class.ship_m]" docked="false"/>
                <do_if value="$Contacts.count > 0 and $Object.speedlimit == -1">
                  <return value="Venture_Environment" comment="cue to signal"/>
                </do_if>
                <return value="null"/>
              </actions>
            </library>

            <cue name="Venture_Environment" namespace="this">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="$Manager" exact="md.CinematicCamera.CinematicCameraManager"/>
                <set_value name="$DebugChance" exact="$Manager.$DebugChance"/>
                <set_value name="$EndTime" exact="player.age + 15s"/>
                <set_value name="$LastView" exact="''"/>
                <set_value name="$Object" exact="event.param"/>
                <set_value name="$Manager.$CurrentTarget" exact="$Object"/>
              </actions>
              <cues>
                <cue name="Venture_ShowView">
                  <cues>
                    <cue name="Venture_SelectView">
                      <actions>
                        <set_value name="$Manager.$ObservedObject" exact="null"/>
                        <set_value name="$Manager.$ResetOnInterrupt" exact="false"/>
                        <do_if value="player.age gt $EndTime">
                          <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                        </do_if>
                        <do_else>
                          <do_any>
                            <signal_cue_instantly cue="Venture_FlyTo" param="$Object" weight="if $LastView != 'Venture_FlyTo' then 1 else 0"/>
                            <signal_cue_instantly cue="Venture_Orbit" param="$Object" weight="if $LastView != 'Venture_Orbit' then 1 else 0"/>
                          </do_any>
                        </do_else>
                      </actions>
                    </cue>
                    <cue name="Venture_FlyTo">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Object" exact="event.param"/>
                      </conditions>
                      <actions>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>
                        <set_value name="$LastView" exact="'Venture_FlyTo'"/>

                        <set_value name="$Contacts" exact="null"/>
                        <find_gravidar_contact name="$Contacts" object="$Object" multiple="true" visitor="true" excluded="$Object" canbelivestreamed="true" class="[class.ship_s, class.ship_m]" docked="false"/>

                        <do_if value="$Contacts.count > 0">
                          <set_value name="$Anchor" exact="$Object"/>
                          <set_value name="$LookatTarget" exact="$Contacts.random"/>

                          <set_value name="$Manager.$ObservedObject" exact="$LookatTarget"/>
                          <run_actions ref="ShowOverlay"/>

                          <set_value name="$Distance" min="200" max="300"/>
                          <set_value name="$FlyToDistance" min="200" max="350"/>
                          <set_value name="$StartYaw" min="0" max="359"/>

                          <set_value name="$Duration" exact="16s"/>

                          <!-- Warning: Don't modify duration (see cutscene_flyfromto for details -->
                          <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Cutscene_flyfromto'">
                            <param name="source" object="$Anchor"/>
                            <param name="target" object="$LookatTarget"/>
                            <param name="abortfocus" object="$Anchor"/>
                            <param name="distance" number="$Distance"/>
                            <param name="flytodistance" number="$FlyToDistance"/>
                            <param name="orbit1_yaw_start" number="$StartYaw"/>
                            <param name="orbit1_yaw_end" number="$StartYaw"/>
                            <param name="orbit1_elevation" number="15"/>
                            <param name="orbit2_yaw_start" number="30"/>
                            <param name="orbit2_yaw_end" number="-30"/>
                            <param name="orbit2_pitch" number="10"/>
                          </play_cutscene>
                        </do_if>
                        <do_else>
                          <run_actions ref="ShowOverlay"/>

                          <set_value name="$Angles" exact="[
                              table[$elevation  = $Object.height * 20 * [-1, 1].random, 
                                    $distance   = 150,
                                    $panstart   = 25 + $Object.size / 2, 
                                    $panend     = 25 + $Object.size / 2,
                                    ],
                              table[$elevation  = $Object.height * 20 * [-1, 1].random, 
                                    $distance   = 150,
                                    $panstart   = 25 + $Object.size / 2, 
                                    $panend     = $Object.size / 4,
                                    ],
                            ]" />
                          <set_value name="$AnglesIndex" min="1" max="$Angles.count"/>

                          <!--Set up cutscene-->
                          <set_value name="$Duration" exact="[9s].random + player.timewarp.factor + 1s"/>
                          <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'Cutscene_pan_behind_param'">
                            <param name="target_object" object="$Object"/>
                            <param name="duration"  number="$Duration"/>
                            <param name="elevation" number="$Object.height * 0.5"/>
                            <param name="distance"  number="$Angles.{$AnglesIndex}.$distance"/>
                            <param name="panstart"  number="$Angles.{$AnglesIndex}.$panstart"/>
                            <param name="panend"    number="$Angles.{$AnglesIndex}.$panend"/>
                          </play_cutscene>
                        </do_else>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="Venture_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="Venture_FlyTo_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector object="if $LookatTarget then $LookatTarget else $Object"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="Venture_ShowView"/>
                          </actions>
                        </cue>
                        <cue name="Venture_FlyTo_TargetDestroyed">
                          <conditions>
                            <event_object_destroyed object="if $LookatTarget then $LookatTarget else $Object"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>
                    <cue name="Venture_Orbit">
                      <conditions>
                        <event_cue_signalled/>
                        <set_value name="$Object" exact="event.param"/>
                      </conditions>
                      <actions>
                        <set_value name="$LastView" exact="'Venture_Orbit'"/>
                        <!--Common preparation actions-->
                        <run_actions ref="StopCurrentCutscene"/>

                        <set_value name="$Contacts" exact="null"/>
                        <find_gravidar_contact name="$Contacts" object="$Object" multiple="true" visitor="true" excluded="$Object" canbelivestreamed="true" class="[class.ship_s, class.ship_m]" docked="false"/>
                        <set_value name="$Target" exact="$Object"/>

                        <!--Set up cutscene-->
                        <set_value name="$Duration" min="6s" max="8s"/>
                        <set_value name="$Duration" exact="$Duration + player.timewarp.factor + 1s"/>

                        <do_if value="$Contacts.count > 0">
                          <set_value name="$Target" exact="$Contacts.random"/>
                          <set_value name="$Manager.$ObservedObject" exact="$Target"/>
                        </do_if>

                        <run_actions ref="ShowOverlay"/>

                        <play_cutscene cinematicmode="true" result="this.$Cutscene" key="'OrbitParameterized'">
                          <param name="targetobject" object="$Target"/>
                          <param name="orbitdist" number="$Target.size * 1.6"/>
                          <param name="orbitelevation" number="$Target.height * 0.5 * [-1,1].random" />
                        </play_cutscene>

                        <!--Common post actions-->
                        <run_actions ref="RegisterStartedCutscene">
                          <param name="CutsceneID"  value="this.$Cutscene"/>
                          <param name="CallerCue"   value="this"/>
                          <param name="FadeoutTriggerTime" value="if player.age + $Duration gt $EndTime then player.age + $Duration - $Manager.$FadeDuration else -1s"/>
                        </run_actions>
                      </actions>
                      <delay exact="$Duration"/>
                      <actions>
                        <reset_cue cue="Venture_ShowView"/>
                      </actions>
                      <cues>
                        <cue name="Venture_Orbit_TargetSectorChange">
                          <conditions>
                            <event_object_changed_sector object="$Target"/>
                          </conditions>
                          <actions>
                            <reset_cue cue="Venture_ShowView"/>
                          </actions>
                        </cue>
                        <cue name="Venture_Orbit_TargetDestroyed">
                          <conditions>
                            <event_object_destroyed object="$Target"/>
                          </conditions>
                          <actions>
                            <do_if value="event.param2 == killmethod.removed">
                              <reset_cue cue="CinematicCamera_ShowEnvironment"/>
                            </do_if>
                            <do_else>
                              <set_value name="$EndTime" exact="player.age + 1s"/>
                              <set_value name="$FadeoutTriggerTime" exact="player.age - 1s"/>
                            </do_else>
                          </actions>
                        </cue>
                      </cues>
                    </cue>

                  </cues>
                </cue>
              </cues>
            </cue>

          </cues>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>
