<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GM_BarterWares" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--Base Mission information-->
    <!--
      Generic Mission name:    Barter X wares (resources.{$ware}.pure/intermediate.list) for Y wares (not products.{$ware}.intermediate) with station - intended for Master Missions
      Primary 'missiontype':   e.g missiontype.restock
      Page: 30158
      $WareDatasToReceive = mission objective. the station is receiving these wares.
      $WareDatasToGive = mission reward. the station is giving away these wares.
      $UnitPrice in the data is the ".unitprice" of the buy/sell offer at generation. If 0, in cases of hand-picked WareDatasToReceive/Give then ".averageprice" is used (in calculations).
      $WareDatasToReceive/$WareDatasToGive =
      [
        table[$Ware = ware, $Count_Required = number, $Count_Delivered = number, $UnitPrice = Cr],
        ...
      ]
      mission flow:
      1. deliver all wares to station area.
      2. uses rml_barterwares.AwaitConfirmTransferWares to manage transfers from player ships to the station
        2a. identify player ships with the required wares in the station area
        2b. client hails player requiring F-interaction every 15s seconds as long as the mission guidance is active
        2c. client convo for transfer confirmation from which ship with wares and transfer amount
        2d. wares are transfered to station
        2e. loop to 2a until all required wares are delivered to the station
      3. all required wares have been transfered to the station
      4. uses rml_barterwares.AwaitConfirmTransferWares to manage transfers from the station to player ships
        3a. identify player ships that have room for wares to be collected
        3b. client hals player requiring F-interaction
        3c. client convo for transfer confirmation to which ship with wares and transfer amount
        3d. wares are transfered to player ships
        3e. loop to 3a until all wares are transfered to the player
      5. all reward wares have been transfered to the station
      6. complete and remove mission.
      rml_barterwares.AwaitConfirmTransferWares cue allows for multiple ships and multiple deliveries over time.
    -->

    <!-- Variant Table -->
    <cue name="TextOffsets" namespace="this">
      <actions>
        <set_value name="$Cue" exact="md.GM_BarterWares.GenerateGenericMission"/>
        <append_to_list name="md.GenericMissions.Manager.$StaticGMCues" exact="$Cue" create="true" unique="true"/>
        <set_value name="$Cue.$TextOffsets" exact="table[]" comment="$Cue.$TextOffsets.{$Page}.{$TextOffset}"/>
        <set_value name="$Cue.$TextOffsets.{30158}"
                   exact="table[  {1000} = table[$lastoffertime = 0s, $offercounter = 0]]"/>
      </actions>
    </cue>

    <!--
      The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		  This table is 'const' during the mission (the table itself doesn't change anymore after inialization)
	    There are several maintypes of feedback:
        event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
        removed:  The mission offer was removed before acceptance
        success:  The mission was successfully completed by the player
        failure:  The player failed the mission
        error:    Something went wrong with the mission set-up or during the mission
    -->
    <cue name="FeedbackValueManager" namespace="this" version="1">
      <actions>
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED           = table[$type = 'event',   $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED            = table[$type = 'event',   $text = 'Mission accepted'],
                   $MISSION_NO_VARIANT          = table[$type = 'event',   $text = 'No mission variant currently possible'],

                   $OFFER_REMOVED               = table[$type = 'removed', $text = 'Offer removed'],
                   $DECLINED_OFFER              = table[$type = 'removed', $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT         = table[$type = 'removed', $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED         = table[$type = 'removed', $text = 'Signal leak offer removed'],
                   $TARGET_KILLED_EARLY         = table[$type = 'removed', $text = 'Object was destroyed during the offer'],

                   $MISSION_SUCCEEDED           = table[$type = 'success', $text = 'Mission succeeded'],

                   $MISSION_ABORTED             = table[$type = 'failure', $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP              = table[$type = 'failure', $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT             = table[$type = 'failure', $text = 'Mission timeout'],
                   $RML_FAILED                  = table[$type = 'failure', $text = 'RML failure'],

                   $NO_VALID_CLIENT_OWNER       = table[$type = 'error',   $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE          = table[$type = 'error',   $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET              = table[$type = 'error',   $text = 'No TextOffset set'],
                   $INVALID_STATION_PARAM       = table[$type = 'error',   $text = 'Invalid TargetStation param'],
                   $STATION_NO_RESOURCES        = table[$type = 'error',   $text = 'Station has no resource requirements for barter-receive deliveries'],
                   $STATION_NO_PRODUCTS         = table[$type = 'error',   $text = 'Station has no products or tradewares for barter-give rewards'],
                   $INVALID_BARTER_RECEIVE_DATA = table[$type = 'error',   $text = 'Invalid barter-receive data or no barter-receive data was generated'],
                   $INVALID_BARTER_GIVE_DATA    = table[$type = 'error',   $text = 'Invalid barter-give data or no barter-give data or no reward was generated'],
                   $INVALID_FORCE_CLEANUP       = table[$type = 'error',   $text = 'ForceCleanup cue invalid'],
                   $RML_ERROR                   = table[$type = 'error',   $text = 'RML error'],
                   ]"/>
      </actions>
      <patch sinceversion="1">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternatively, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!-- Register unknown TextOffsets to the TextOffsets table -->
        <run_actions ref="md.GenericMissions.RegisterMissionVariant">
          <param name="StaticGMCue" value="md.GM_BarterWares.GenerateGenericMission"/>
          <param name="Page"        value="$Page"/>
          <param name="TextOffset"  value="$TextOffset"/>
        </run_actions>

        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description
        -->
        <!-- <set_value name="$TextTable.$missionname" exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/> -->
        <!--set_value name="$TextTable.$description" exact="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100"/-->
        <set_value name="$TextTable.$missionname" exact="{30158,1001}" />

        <set_value name="$TextTable.$hint" exact="''"/>

        <do_if value="$MissionDuration">
          <set_value name="$TextTable.$hint" exact="{30158,1005}"/>
        </do_if>

        <do_if value="not $TextTable.$description?">
          <!-- <substitute_text text="$TextTable.$description" source="readtext.{$Page}.{$TextOffset + 2}"> -->
          <run_actions ref="GetBarterDescriptionText" result="$TextTable.$description">
            <param name="WareDatasToReceive" value="$WareDatasToReceive" />
            <param name="WareDatasToGive" value="$WareDatasToGive" />
            <param name="ReturnMultiplier" value="$ReturnMultiplier" />
            <param name="RewardValue" value="$RewardValue" />
          </run_actions>

          <set_value name="$TextTable.$station" exact="readtext.{1001}.{3} + readtext.{1001}.{120} + ' ' + $TargetStation.knownname"/>
          <set_value name="$TextTable.$sector" exact="readtext.{1001}.{11284} + readtext.{1001}.{120} + ' ' + $TargetStation.sector.knownname"/>
          <set_value name="$TextTable.$description" exact="$TextTable.$station + '\n' + $TextTable.$sector + '\n\n' + $TextTable.$description"/>
        </do_if>

        <run_actions ref="md.LIB_Generic.GenerateTextTable_BriefingWarning_Call" result="$TextTable.$description">
          <param name="BriefingText" value="$TextTable.$description"/>
          <param name="TargetSpace" value="$TargetStation.sector"/>
        </run_actions>

      </actions>
    </library>

    <library name="GenerateVoiceTable">
      <actions>
        <run_actions ref="md.LIB_Generic.GenerateGenericVoiceTable" result="$VoiceTable">
          <param name="VoiceTable" value="$VoiceTable"/>
        </run_actions>
      </actions>
    </library>

    <library name="Start" version="4">
      <params>
        <!-- Generic Parameters -->
        <param name="OfferObject"               default="null"                comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client"                    default="null"                comment="Pre-existing client"/>
        <param name="ClientOwner"               default="null"                comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue"                default="null"                comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread"             default="null"                comment="Mission thread for the offer and mission"/>

        <param name="GenerateReward"            default="false"               comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr"                  default="null"                comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj"                 default="null"                comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety"           default="null"/>
        <param name="RewardText"                default="null"                comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj." />
        <param name="MissionDuration"           default="null"/>
        <param name="MissionType"               default="missiontype.restock" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>

        <!--Offer location and conversation-->
        <param name="WithoutOffer"              default="false"               comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue"       default="null"                comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="DeclineButton"             default="true"                comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer"                default="false"               comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer"         default="false"               comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue"    default="null"                comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance"          default="null"/>
        <param name="HideFromBBS"               default="false"               comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange"      default="true"/>
        <param name="OfferDistance"             default="50km"                comment="Distance to the offer location before it becomes visible on the map or BBS (unless otherwise hidden)"/>

        <!--BBS only params-->
        <param name="BBSObject"                 default="null"/>
        <param name="BBSDistance"               default="null"/>
        <param name="BBSTimeoutMin"             default="null"/>
        <param name="BBSTimeoutMax"             default="null"/>
        <param name="BBSSpace"                  default="null"/>

        <!--Mission text-->
        <param name="Page"                                                    comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset"                                              comment="The text offset for this variant's text on the page.
                                                                                       Each variant starts at a different offset, but the entries[] within that offset have to match for all variants."/>
        <param name="TextTable"                 default="table[]"             comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'
                                                                                       Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>
        <param name="VoiceTable"                default="table[]"             comment="Table, usually populated by the mission, keys can have a value of 0 (=stay silent)"/>

        <param name="TargetStation"                                           comment="The station to supply"/>
        <!-- Optional mission setup overrides -->
        <param name="WareDatasToReceive"        default="null"                comment="Mission objective. The station is requesting these wares. See notes above re: format of [].
                                                                                       If null, will be generated based on $MaxNumberOfWaresToReceive and $ReturnMultiplier." />
        <param name="WareDatasToGive"           default="null"                comment="Mission reward. The station is giving away these wares. See notes above re: format of [].
                                                                                       If null, will be generated based on $MaxNumberOfWaresToReceive and $ReturnMultiplier." />
        <param name="MaxNumberOfWaresToReceive" default="null"                comment="Number of wares to receive.
                                                                                       If null, will be set based on $WareDatasToReceive." />
        <param name="ReturnMultiplier"          default="null"                comment="Multiplier used to determine count of wares to give as reward for wares to receive.
                                                                                       i.e.: wares-to-receive.unitprice x Multiplier = wares-to-give.unitprice.
                                                                                       Will be set/changed based on $WareDatasToReceive and $WareDatasToGive.

                                                                                       If all 4 of the above are null, they will be set to:
                                                                                       $WareDatasToReceive        = [] then auto-generated,
                                                                                       $WareDatasToGive           = [] then auto-generated,
                                                                                       $MaxNumberOfWaresToReceive = 1,
                                                                                       $ReturnMultiplier          = 2" />

        <param name="ReportSignalCue"           default="null"                comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue"            default="null"                comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup"              default="null"                comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance"               default="0"/>
      </params>
      <actions>
        <!-- set defaults -->
        <set_value name="$MaxNumberOfWaresToReceive" exact="[@$WareDatasToReceive.count, 1].max" />
        <do_if value="@$WareDatasToReceive.count and @$WareDatasToGive.count">
          <run_actions ref="GetOrConfirmReturnMultiplier" result="$ReturnMultiplier">
            <param name="Station"                         value="$TargetStation" />
            <param name="WareDatasToReceive"              value="$WareDatasToReceive" />
            <param name="WareDatasToGive"                 value="$WareDatasToGive" />
            <param name="ReturnMultiplier"                value="$ReturnMultiplier" />
            <param name="DebugChance"                     value="$DebugChance" />
          </run_actions>
        </do_if>
        <do_else>
          <set_value name="$ReturnMultiplier" exact="2" />
        </do_else>
        <!-- $MaxNumberOfWaresToReceive and $ReturnMultiplier already set above -->
        <run_actions ref="GetOrConfirmWareDatasToReceiveGive" result="$WareDatasToReceiveGive">
          <param name="Station"                      value="$TargetStation" />
          <param name="WareDatasToReceive"           value="$WareDatasToReceive" />
          <param name="WareDatasToGive"              value="$WareDatasToGive" />
          <param name="MaxNumberOfWaresToReceive"    value="$MaxNumberOfWaresToReceive" />
          <param name="ReturnMultiplier"             value="$ReturnMultiplier" />
          <param name="DebugChance"                  value="$DebugChance" />
        </run_actions>
        <set_value name="$WareDatasToReceive"        exact="$WareDatasToReceiveGive.$WareDatasToReceive" />
        <set_value name="$Price_WaresToReceive"      exact="$WareDatasToReceiveGive.$Price_WaresToReceive" />
        <set_value name="$IsReceiveFromFakeBuyOffer" exact="$WareDatasToReceiveGive.$IsReceiveFromFakeBuyOffer" />
        <set_value name="$WareDatasToGive"           exact="$WareDatasToReceiveGive.$WareDatasToGive" />
        <set_value name="$Price_WaresToGive"         exact="$WareDatasToReceiveGive.$Price_WaresToGive" />
        <set_value name="$IsGiveFromFakeSellOffer"   exact="$WareDatasToReceiveGive.$IsGiveFromFakeSellOffer" />
        <set_value name="$ReturnMultiplier"          exact="$WareDatasToReceiveGive.$ReturnMultiplier" />

        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_BarterWares.FeedbackValueManager"/>

        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)"
                text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [JoPaul]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [JoPaul]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <do_if value="not $TargetStation.isclass.station">
                <set_value name="$Feedback" exact="'$INVALID_STATION_PARAM'"/>
              </do_if>
              <do_elseif value="not @$WareDatasToReceive.count">
                <do_if value="not $TargetStation.resources.count">
                  <set_value name="$Feedback" exact="'$STATION_NO_RESOURCES'"/>
                </do_if>
                <do_else>
                  <set_value name="$Feedback" exact="'$INVALID_BARTER_RECEIVE_DATA'"/>
                </do_else>
              </do_elseif>
              <do_elseif value="(not $GenerateReward) and (not $RewardCr) and (not $RewardObj) and (not @$WareDatasToGive.count)">
                <do_if value="(not $TargetStation.products.count) and (not $TargetStation.tradewares.count)">
                  <set_value name="$Feedback" exact="'$STATION_NO_PRODUCTS'"/>
                </do_if>
                <do_else>
                  <set_value name="$Feedback" exact="'$INVALID_BARTER_GIVE_DATA'"/>
                </do_else>
              </do_elseif>
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <patch sinceversion="3">
        <do_if value="not md.GM_BarterWares.GenerateGenericMission.$StationsWithBarterMissions?">
          <create_group groupname="md.GM_BarterWares.GenerateGenericMission.$StationsWithBarterMissions" />
        </do_if>
        <add_to_group groupname="md.GM_BarterWares.GenerateGenericMission.$StationsWithBarterMissions" object="$TargetStation" />
      </patch>
      <patch sinceversion="4">
        <!-- ensure only one barter missions at a station -->
        <do_if value="@md.Story_Timelines_Epilogue.Ch3_BarterWares_Ref.state == cuestate.complete and @md.Story_Timelines_Epilogue.Ch3_BarterWares_Ref.$TargetStation.isoperational">
          <debug_text text="'add_to_group $StationsWithBarterMissions ' + $TargetStation.knownname + ' ' + $TargetStation.idcode + ' with a non-generic barter mission'" />
          <add_to_group groupname="md.GM_BarterWares.GenerateGenericMission.$StationsWithBarterMissions" object="md.Story_Timelines_Epilogue.Ch3_BarterWares_Ref.$TargetStation" />
        </do_if>
        <set_value name="$IsGenericMission" exact="parent.namespace.parent.static == md.GM_BarterWares.GenerateGenericMission" />
        <do_if value="$IsGenericMission">
          <do_if value="not md.GM_BarterWares.GenerateGenericMission.$StationsWithBarterMissions.indexof.{$TargetStation}">
            <debug_text text="'add_to_group $StationsWithBarterMissions ' + $TargetStation.knownname + ' ' + $TargetStation.idcode + ' with a generic barter mission'" />
            <add_to_group groupname="md.GM_BarterWares.GenerateGenericMission.$StationsWithBarterMissions" object="$TargetStation" />
          </do_if>
          <do_else>
            <debug_text text="'CleanUp barter mission at ' + $TargetStation.knownname + ' ' + $TargetStation.idcode + ' where one already exists'" />
            <!-- cancel barter missions on stations that already have a barter mission -->
            <set_value name="$DebugChance" exact="100" />
            <set_value name="$Feedback" exact="'$INVALID_STATION_PARAM'"/>
            <signal_cue_instantly cue="CleanUp"/>
          </do_else>
        </do_if>
      </patch>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <debug_text text="event.name" chance="$DebugChance" />
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>
            <debug_text text="'$MissionCue: ' + $MissionCue" chance="$DebugChance" />

            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <!-- This auto-assigns a 'matching' text-page using the metadata (id=0) specified in the text-files. Speak commands for this actor will then refer to the selected text-page-->
              <!-- Possibly we'll need to add additional filters (in case some topics aren't supported by all generic text-pages) -->
              <create_cue_actor cue="Start" name="$Client" comment="temporary cue-actor will be cleaned up in the Cleanup-cue, see destroy_object on $Client">
                <select faction="$ClientOwner" tags="tag.crew"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <set_value name="$RewardValue" exact="0ct" />

            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward" comment="if $GenerateReward is true, then this mission is essentially a deliver X wares for Y Cr + reward object">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied"/>
              </do_if>
              <do_if value="$RewardCr">
                <set_value name="$RewardValue" operation="add" exact="$RewardCr" />
              </do_if>

              <do_if value="not $RewardObj">
                <run_actions ref="md.LIB_Reward_Balancing.DetermineAdditionalReward" result="$AdditionalReward">
                  <param name="RewardModWeight" value="$RewardModWeight"/>
                  <param name="RewardSeminarWeight" value="$RewardSeminarWeight"/>
                </run_actions>
                <do_if value="$AdditionalReward != null">
                  <set_value name="$RewardObj" exact="$AdditionalReward"/>
                  <set_value name="$RewardText" exact="$RewardObj.name"/>
                  <set_value name="$RewardValue" operation="add" exact="$AdditionalReward.price" />
                </do_if>
              </do_if>

              <set_value name="$RewardValue" exact="$RewardValue * 2" comment="for this type of trade, mult reward by 2 so that reasonable requested ware counts are generated." />
            </do_if>
            <do_if value="not $RewardNotoriety">
              <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
              <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
            </do_if>

            <!-- Reward is in $WareDatasToGive - i.e. this is a true barter mission -->
            <do_if value="@$WareDatasToGive.count">
              <set_value name="$RewardValue" exact="$Price_WaresToGive" comment="if @$WareDatasToGive.count, then assume $Price_WaresToGive is also set" />
              <debug_text text="'$RewardValue (Price_WaresToGive): ' + $RewardValue" chance="$DebugChance" />

              <!-- generate reward Cr and text -->
              <do_if value="not $RewardCr">
                <set_value name="$RewardCr" exact="0ct" />
              </do_if>
              <do_if value="(not $RewardText) or $RewardText == ''">
                <set_value name="$ShipRewardCountsByMacro" exact="table[]" />
                <set_value name="$RewardText" exact="''" />
                <do_for_each name="$WareDataToGive" in="$WareDatasToGive" counter="$i">
                  <do_if value="typeof $WareDataToGive.$Ware == datatype.ware">
                    <set_value name="$RewardText" exact="$RewardText + $WareDataToGive.$Count_Required + ' x ' + $WareDataToGive.$Ware.name" />
                  </do_if>
                  <do_elseif value="$WareDataToGive.$Ware.isclass.ship">
                    <do_if value="not $ShipRewardCountsByMacro.{$WareDataToGive.$Ware.macro}?">
                      <set_value name="$ShipRewardCountsByMacro.{$WareDataToGive.$Ware.macro}" exact="$WareDataToGive.$Count_Required" />
                    </do_if>
                    <do_else>
                      <set_value name="$ShipRewardCountsByMacro.{$WareDataToGive.$Ware.macro}" operation="add" exact="$WareDataToGive.$Count_Required" />
                    </do_else>
                  </do_elseif>
                  <do_if value="$i lt $WareDatasToGive.count and typeof $WareDataToGive.$Ware == datatype.ware">
                    <set_value name="$RewardText" exact="$RewardText + '\n'" />
                  </do_if>
                </do_for_each>
                <set_value name="$Counter" exact="0" />
                <do_for_each name="$ShipMacro" valuename="$Count" in="$ShipRewardCountsByMacro">
                  <set_value name="$Counter" operation="add" exact="1" />
                  <set_value name="$RewardText" exact="$RewardText + $Count + ' x ' + $ShipMacro.name" />
                  <do_if value="$Counter lt $ShipRewardCountsByMacro.keys.count">
                    <set_value name="$RewardText" exact="$RewardText + '\n'" />
                  </do_if>
                </do_for_each>
              </do_if>
            </do_if>
            <debug_text text="'$RewardText: ' + $RewardText" chance="$DebugChance" />

            <do_if value="(@$WareDatasToReceive.count) and (@$WareDatasToGive.count)">
              <!-- this is return multiplier formula from ConfigureDifficulty
              <set_value name="$ReturnMultiplier" exact="((0.11111 * $MissionLevel) + 1.8889 + 0.5)i" />
              $ReturnMultiplier = (0.11111 * $MissionLevel) + 1.8889 + 0.5
              $ReturnMultiplier - 0.5 = (0.11111 * $MissionLevel) + 1.8889
              $ReturnMultiplier - 0.5 - 1.8889 = (0.11111 * $MissionLevel)
              ($ReturnMultiplier - 0.5 - 1.8889) / 0.11111 = $MissionLevel
              -->
              <set_value name="$MissionLevel" exact="(($ReturnMultiplier - 0.5 - 1.8889) / 0.11111)i" />
              <debug_text text="'$MissionLevel (re-adjusted based on $ReturnMultiplier): ' + $MissionLevel" chance="$DebugChance" />
              <do_if value="$MissionLevel lt 1">
                <set_value name="$MissionLevel" exact="1" />
                <debug_text text="'$MissionLevel (lt 1, $ReturnMultiplier (to the player) must be below 2): ' + $MissionLevel" chance="$DebugChance" />
              </do_if>
              <set_value name="$Difficulty" exact="null" comment="re-adjust difficulty based on barter-receive from player wares count" />
              <include_actions ref="ConfigureDifficulty" comment="if re-adjusted OR if not, just set final difficulty based on barter-receive wares.count" />

              <do_for_each name="$WareDataToReceive" in="$WareDatasToReceive">
                <set_value name="$Ware" exact="$WareDataToReceive.$Ware" />
                <set_value name="$Count_Required" exact="$WareDataToReceive.$Count_Required" />
                <add_ware_reservation object="$TargetStation" type="buy" ware="$Ware" amount="$Count_Required" reserver="$TargetStation" mission="true" duration="24h" virtual="true" />
              </do_for_each>
              <do_for_each name="$WareDataToGive" in="$WareDatasToGive">
                <set_value name="$Ware" exact="$WareDataToGive.$Ware" />
                <do_if value="typeof $Ware == datatype.ware">
                  <set_value name="$Count_Required" exact="$WareDataToGive.$Count_Required" />
                  <add_ware_reservation object="$TargetStation" type="sell" ware="$Ware" amount="$Count_Required" reserver="$TargetStation" mission="true" duration="24h" virtual="true" />
                </do_if>
              </do_for_each>

              <include_actions ref="GenerateTextTable"/>
              <include_actions ref="GenerateVoiceTable"/>

              <do_if value="$ReportSignalCue">
                <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
                <debug_text text="'signal_cue (MISSION_GENERATED) ' + $ReportSignalCue + ' $MissionCue: ' + $MissionCue" chance="$DebugChance" />
                <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText, $Duration = $MissionDuration]"/>
              </do_if>
            </do_if>
            <do_else>
              <debug_text text="'$WareDatasToReceive: ' + @$WareDatasToReceive" chance="$DebugChance" />
              <debug_text text="'$RewardValue: ' + @$RewardValue" chance="$DebugChance" />
              <debug_text text="'$WareDatasToGive: ' + @$WareDatasToGive" chance="$DebugChance" />
              <do_if value="not @$WareDatasToReceive.count">
                <set_value name="$Feedback" exact="'$INVALID_BARTER_RECEIVE_DATA'"/>
              </do_if>
              <do_elseif value="(not $RewardValue) and (not @$WareDatasToGive.count)">
                <set_value name="$Feedback" exact="'$INVALID_BARTER_GIVE_DATA'"/>
              </do_elseif>
              <signal_cue cue="CleanUp"/>
            </do_else>
          </actions>
          <cues>

            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <cues>
                <!--Cue which creates the offer, when signalled. To be signalled from the GenericMissions.OfferMission library, referenced below-->
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">
                      <!-- Briefing details -->
                      <do_if value="$WareDatasToReceive.count">
                        <create_offer cue="$MissionCue" location="$OfferObject" distance="$OfferDistance" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client"
                                    faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS" space="$BBSSpace"/>
                        <run_actions ref="UpdateObjectives">
                          <param name="MissionCue" value="$MissionCue" />
                          <param name="WareDatasToReceive" value="$WareDatasToReceive" />
                          <param name="WareDatasToGive" value="$WareDatasToGive" />
                          <param name="TargetStation" value="$TargetStation" />
                          <param name="Client" value="$Client" />
                        </run_actions>
                        <set_value name="$OfferCreated" exact="true"/>
                        <!-- Offers might be outside the $OfferDistance (default 50km) and not seen by players but still count up -->
                        <run_actions ref="md.GenericMissions.UpdateTextOffsetsTable">
                          <param name="StaticGMCue" value="md.GM_BarterWares.GenerateGenericMission"/>
                          <param name="Page"        value="$Page"/>
                          <param name="TextOffset"  value="$TextOffset"/>
                        </run_actions>
                      </do_if>
                    </do_if>
                  </actions>
                </cue>

                <!--The majority of the offer logic is within this library. The parameters we pass down below, specify in which way this mission is going to be offered to the player (i.e. BBS, Signal-Leak, ...)
                Some of the mission specific handling is still contained in this file but triggered via the library via a signal e.g. setting up the briefing details via the 'CreateOffer' cue above.-->
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"     value="$OfferType"/>
                  <param name="OfferCue"      value="$MissionCue"/>
                  <param name="CleanupCue"    value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"   value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>

                  <!--Object based params (offered by Station/Ship/Signal-leak)-->
                  <param name="TimeoutMin"  value="8min" comment="Minimum time the offer remains valid"/>
                  <param name="TimeoutMax"  value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="VoiceTable"             value="$VoiceTable"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <!--Cue signalled when the offer library is finished-->
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the cases where a mission is automatically accepted on creation-->
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted" />
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)
            note: play_cutscene action should not be in the actions of the cue with a event_briefing_submission_selected condition. It must be delayed-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="$MissionCue"/>
                  <event_briefing_submission_selected cue="$MissionCue"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>
                <set_value name="$StartBriefingCutscene"/>
                <set_value name="$stationindex" exact="1"/>
                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>
                <cue name="DisplayCutscene" onfail="cancel">
                  <conditions>
                    <check_value value="$StartBriefingCutscene?"/>
                  </conditions>
                  <actions>
                    <set_value name="$BriefingCutsceneStarted"/>
                    <set_value name="$CutsceneKey" exact="'OrbitIndefinitely'"/>
                    <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                      <param name="targetobject" object="$TargetStation"/>
                    </play_cutscene>
                  </actions>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="$MissionCue"/>
                      <event_briefing_submission_unselected cue="$MissionCue"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="$BriefingCutsceneStarted?">
                      <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                      <remove_value name="$BriefingCutsceneStarted"/>
                      <stop_cutscene key="$CutsceneKey"/>
                    </do_if>

                    <do_if value="$HoloMap?">
                      <remove_holomap />
                      <remove_value name="$HoloMap"/>
                    </do_if>

                    <debug_text text="'Briefing canceled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="TargetDestroyedPrematurely" instantiate="true">
              <conditions>
                <event_object_destroyed object="$TargetStation"/>
              </conditions>
              <actions>
                <do_if value="MissionAccepted.state == cuestate.complete">
                  <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, {30004,6028}]"/>
                </do_if>
                <set_value name="$Feedback" exact="'$TARGET_KILLED_EARLY'"/>
                <signal_cue cue="CleanUp"/>
              </actions>
            </cue>

            <!--This cue creates the mission itself, either from scratch or via an existing mission offer-->
            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>
                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" faction="$ClientOwner" type="$MissionType" duration="$MissionDuration" />
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" faction="$ClientOwner" type="$MissionType" endtime="player.age + $MissionDuration" />
                    </do_else>
                  </do_if>

                  <update_mission cue="$MissionCue" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                  <run_actions ref="UpdateObjectives">
                    <param name="MissionCue" value="$MissionCue" />
                    <param name="WareDatasToReceive" value="$WareDatasToReceive" />
                    <param name="WareDatasToGive" value="$WareDatasToGive" />
                    <param name="TargetStation" value="$TargetStation" />
                    <param name="Client" value="$Client" />
                  </run_actions>
                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <debug_text text="'signal_cue (MISSION_ACCEPTED) ' + $ReportSignalCue + ' $MissionCue: ' + $MissionCue" chance="$DebugChance" />
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <set_value name="$StartStep" exact="1"/>
                    <cancel_cue cue="TargetDestroyedPrematurely"/>
                    <do_if value="typeof $MissionDuration == datatype.time and $MissionDuration ge 1s">
                      <update_mission cue="$MissionCue" endtime="player.age + $MissionDuration"/>
                    </do_if>
                  </actions>
                  <cues>

                    <!-- Trigger the RML, which will check the win/lose conditions and report back -->
                    <cue name="BarterWares_Ref" ref="md.RML_BarterWares.BarterWares">
                      <!-- always pass these -->
                      <param name="EndSignalCue"              value="MissionEnded"/>
                      <param name="MissionCue"                value="$MissionCue"/>
                      <param name="StartStep"                 value="$StartStep" comment="Briefing step to start the mission on"/>
                      <param name="UpdateBriefing"            value="true" comment="Update the briefing objective step when the objective is updated"/>
                      <param name="DebugChance"               value="$DebugChance"/>
                      <!-- mission-related parameters -->
                      <param name="Text_MissionName"          value="$TextTable.$missionname"/>
                      <param name="Client"                    value="$Client" />
                      <param name="TargetStation"             value="$TargetStation"/>
                      <param name="WareDatasToGive"           value="$WareDatasToGive"/>
                      <param name="IsGiveFromFakeSellOffer"   value="$IsGiveFromFakeSellOffer"/>
                      <param name="WareDatasToReceive"        value="$WareDatasToReceive"/>
                      <param name="IsReceiveFromFakeBuyOffer" value="$IsReceiveFromFakeBuyOffer"/>
                    </cue>

                    <cue name="MissionEnded">
                      <!-- Handle the end-feedback (usually originating from the RML used above) -->
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!-- Failure case -->
                        <do_if value="MissionEnded.$EndFeedbackValue" max="0">
                          <debug_text text="'This mission has failed. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                          <speak actor="$Client" line="$VoiceTable.$MissionFailed" comment="(failed mission)" chance="if $VoiceTable.$MissionFailed == 0 then 0 else 100" />
                          <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>
                          <remove_mission cue="$MissionCue" type="failed" reason="@MissionEnded.$EndFeedbackText"/>
                          <signal_cue cue="CleanUp" />
                        </do_if>

                        <!-- Success case -->
                        <do_else>
                          <do_if value="$MissionDuration">
                            <set_value name="$MissionDuration" exact="0s" comment="remove timeout for reward collection - which may require the player several trips to collect" />
                            <update_mission cue="$MissionCue" endtime="0s" />
                          </do_if>

                          <debug_text text="'This mission has ended. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <do_if value="$RewardNotoriety and $ClientOwner">
                            <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                            <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                            <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                          </do_if>

                          <do_if value="$RewardCr">
                            <reward_player money="$RewardCr" />
                            <set_value name="$RewardCr" exact="0ct" comment="reset. in cases when the reward has barter-give cargo and player doesn't have enough free space for it need to do several trips to collect cargo." />
                          </do_if>

                          <do_if value="$RewardObj">
                            <do_if value="$RewardObj.isinventory">
                              <add_inventory entity="player.entity" ware="$RewardObj" />
                              <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                            </do_if>
                            <set_value name="$RewardObj" exact="null" comment="reset. in cases when the reward has barter-give cargo and player doesn't have enough free space for it need to do several trips to collect cargo." />
                          </do_if>

                          <unlock_achievement name="TL_BARTER_MISSION"/>
                          <set_value name="stat.missions_completed" operation="add"/>
                          <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                          <speak actor="$Client" line="$VoiceTable.$MissionSuccess" comment="(successful mission)" chance="if $VoiceTable.$MissionSuccess == 0 then 0 else 100" />
                          <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>

                          <run_actions ref="UpdateObjectives">
                            <param name="MissionCue" value="$MissionCue" />
                            <param name="WareDatasToReceive" value="$WareDatasToReceive" />
                            <param name="WareDatasToGive" value="$WareDatasToGive" />
                            <param name="TargetStation" value="$TargetStation" />
                            <param name="Client" value="$Client" />
                            <param name="IsAwaitingTransfer" value="@event.param.$IsAwaitingTransfer" />
                          </run_actions>

                          <run_actions ref="md.GenericMissions.UpdateTextOffsetsTable_completedcounter">
                            <param name="StaticGMCue" value="md.GM_BarterWares.GenerateGenericMission"/>
                            <param name="Page"        value="$Page"/>
                            <param name="TextOffset"  value="$TextOffset"/>
                          </run_actions>

                          <remove_mission cue="$MissionCue" type="completed" activate="next" />
                          <signal_cue cue="CleanUp" />
                        </do_else>
                      </actions>
                    </cue>

                    <cue name="Aborted">
                      <conditions>
                        <event_mission_aborted cue="$MissionCue"/>
                      </conditions>
                      <actions>
                        <do_if value="MissionEnded.state == cuestate.waiting" comment="do not fail mission if aborted after delivery and player is collecting the reward">
                          <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>
                          <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                          <remove_mission cue="$MissionCue" type="aborted"/>
                        </do_if>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="MissionTimeout" onfail="cancel">
                      <conditions>
                        <check_value value="typeof $MissionDuration == datatype.time"/>
                        <check_value value="$MissionDuration" min="1s"/>
                      </conditions>
                      <delay exact="$MissionDuration"/>
                      <actions>
                        <do_if value="MissionEnded.state == cuestate.waiting">
                          <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>
                          <remove_mission cue="$MissionCue" type="failed"/>
                          <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                          <signal_cue_instantly cue="CleanUp" />
                        </do_if>
                      </actions>
                    </cue>
                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <debug_text text="event.name" chance="$DebugChance" />
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <debug_text text="event.name" chance="$DebugChance" />

            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>

              <do_if value="@$CutsceneCluster.exists">
                <destroy_object object="$CutsceneCluster"/>
              </do_if>
              <do_if value="$CutsceneShip.exists">
                <destroy_object object="$CutsceneShip"/>
              </do_if>
            </do_if>
            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>

            <do_for_each name="$WareDataToReceive" in="$WareDatasToReceive">
              <set_value name="$Ware" exact="$WareDataToReceive.$Ware" />
              <set_value name="$Count_Required" exact="$WareDataToReceive.$Count_Required" />
              <remove_ware_reservation object="$TargetStation" type="buy" reserver="$TargetStation" virtual="true" />
            </do_for_each>
            <do_for_each name="$WareDataToGive" in="$WareDatasToGive">
              <set_value name="$Ware" exact="$WareDataToGive.$Ware" />
              <do_if value="typeof $Ware == datatype.ware">
                <set_value name="$Count_Required" exact="$WareDataToGive.$Count_Required" />
                <remove_ware_reservation object="$TargetStation" type="sell" reserver="$TargetStation" virtual="true" />
              </do_if>
              <do_elseif value="$Ware.isclass.ship">
                <do_if value="not $Ware.isplayerowned">
                  <destroy_object object="$Ware" />
                </do_if>
              </do_elseif>
            </do_for_each>

            <!--***Cleanup objects***-->

            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <destroy_object object="$Client" comment="cleanup the client we created with create_cue_actor"/>
            </do_if>

            <!--***Evaluate result***-->

            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']" comment="feedback = id, type and error-text from the above FeedbackValues-table"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [JoPaul]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue" comment="The cue which called us">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData" comment="return feedback-data to calling cue"/>
                <debug_text text="'signal_cue (EndFeedbackValue) ' + $ReportSignalCue + ' $MissionCue: ' + $MissionCue" chance="$DebugChance" />
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <remove_from_group group="md.GM_BarterWares.GenerateGenericMission.$StationsWithBarterMissions" object="$TargetStation" />
            <cancel_cue cue="Start"/>
          </actions>
        </cue>
      </cues>
    </library>

    <library name="GetWaresToReceive" comment="mission objective. the station is receiving these wares.">
      <actions>
        <set_value name="$WaresToReceive" exact="[]" />
        <do_for_each name="$WareData" in="$WareDatasToReceive">
          <do_if value="$WareData.$Count_Delivered lt $WareData.$Count_Required">
            <append_to_list name="$WaresToReceive" exact="$WareData.$Ware" />
          </do_if>
        </do_for_each>
      </actions>
    </library>

    <library name="GetWaresToGive" comment="mission reward. the station is giving away these wares.">
      <actions>
        <set_value name="$WaresToGive" exact="[]" />
        <do_for_each name="$WareData" in="$WareDatasToGive">
          <do_if value="$WareData.$Count_Delivered lt $WareData.$Count_Required">
            <append_to_list name="$WaresToGive" exact="$WareData.$Ware" />
          </do_if>
        </do_for_each>
      </actions>
    </library>

    <!-- MISSION SETUP HELPERS -->
    <library name="UpdateObjectives" purpose="run_actions">
      <params>
        <param name="MissionCue" />
        <param name="WareDatasToReceive" />
        <param name="WareDatasToGive" />
        <param name="TargetStation" />
        <param name="Client" />
        <param name="FromStep" default="0" comment="on creation of objectives, start from this step. useful in case there are other objectives before delivery." />
        <!-- RML-controlled -->
        <param name="IsAwaitingTransfer" default="false" />
        <param name="ShipToDock" default="null" />
        <param name="PlayerToDockAt" default="null" />
        <param name="DebugChance" default="0" />
      </params>
      <actions>
        <do_if value="not $MissionCue.$BarterMission_ObjectivesStepFrom?">
          <do_if value="(not $FromStep) or $FromStep lt 1">
            <set_value name="$FromStep" exact="1" />
          </do_if>
          <set_value name="$MissionCue.$BarterMission_ObjectivesStepFrom" exact="$FromStep" />
        </do_if>
        <do_else>
          <set_value name="$FromStep" exact="$MissionCue.$BarterMission_ObjectivesStepFrom" />
        </do_else>
        <sort_list list="$WareDatasToReceive" sortbyvalue="loop.element.$Count_Required" sortdescending="true" />
        <do_if value="$MissionCue.hasmissionoffer">
          <do_for_each name="$WareDataToReceive" in="$WareDatasToReceive" counter="$i">
            <do_if value="$WareDataToReceive.$Count_Required ge 1">
              <update_offer cue="$MissionCue">
                <briefing>
                  <objective step="($FromStep - 1) + $i" action="objective.deliver" text="$WareDataToReceive.$Count_Delivered + ' / ' + $WareDataToReceive.$Count_Required + ' x ' + $WareDataToReceive.$Ware.name" object="$TargetStation" radius="$TargetStation.size * 1.5" />
                </briefing>
              </update_offer>
            </do_if>
          </do_for_each>
        </do_if>
        <do_elseif value="$MissionCue.hasmission">
          <set_value name="$ObjectiveStep_Current" exact="0" />
          <do_for_each name="$WareDataToReceive" in="$WareDatasToReceive" counter="$i">
            <do_if value="$WareDataToReceive.$Count_Required ge 1">
              <do_if value="not $ObjectiveStep_Current">
                <do_if value="$WareDataToReceive.$Count_Delivered lt $WareDataToReceive.$Count_Required">
                  <set_value name="$ObjectiveStep_Current" exact="$i" />
                </do_if>
              </do_if>
              <update_mission cue="$MissionCue">
                <briefing>
                  <objective step="($FromStep - 1) + $i" action="objective.deliver" text="$WareDataToReceive.$Count_Delivered + ' / ' + $WareDataToReceive.$Count_Required + ' x ' + $WareDataToReceive.$Ware.name" object="$TargetStation" radius="$TargetStation.size * 1.5" />
                </briefing>
              </update_mission>
            </do_if>
          </do_for_each>
          <debug_text text="'$PlayerToDockAt: ' + $PlayerToDockAt + ' ' + @$PlayerToDockAt.knownname + ' ' + @$PlayerToDockAt.idcode" chance="$DebugChance" />
          <debug_text text="'$ShipToDock: ' + $ShipToDock + ' ' + @$ShipToDock.knownname + ' ' + @$ShipToDock.idcode" chance="$DebugChance" />
          <debug_text text="'$IsAwaitingTransfer: ' + $IsAwaitingTransfer" chance="$DebugChance" />
          <do_if value="$PlayerToDockAt" comment="player needs to dock at X">
            <do_if value="@player.occupiedship.dock.container != $PlayerToDockAt">
              <update_mission cue="$MissionCue">
                <briefing>
                  <!-- dock -->
                  <objective step="($FromStep - 1) + $WareDatasToReceive.count + 1" action="objective.dockat" object="$PlayerToDockAt" />
                </briefing>
              </update_mission>
            </do_if>
            <do_else>
              <update_mission cue="$MissionCue">
                <briefing>
                  <!-- await barter wares -->
                  <objective step="($FromStep - 1) + $WareDatasToReceive.count + 1" action="objective.await" text="{30158,1001}" object="$PlayerToDockAt" />
                </briefing>
              </update_mission>
            </do_else>
          </do_if>
          <do_elseif value="$ShipToDock" comment="ship needs to dock">
            <create_group groupname="$DockingObjects" />
            <add_to_group groupname="$DockingObjects" object="$ShipToDock" />
            <add_to_group groupname="$DockingObjects" object="$TargetStation" />
            <do_if value="not $ShipToDock.dock">
              <update_mission cue="$MissionCue">
                <briefing>
                  <!-- await dock -->
                  <objective step="($FromStep - 1) + $WareDatasToReceive.count + 1" action="objective.await" text="{1005,175}" group="$DockingObjects" />
                </briefing>
              </update_mission>
            </do_if>
            <do_else>
              <update_mission cue="$MissionCue">
                <briefing>
                  <!-- await barter wares -->
                  <objective step="($FromStep - 1) + $WareDatasToReceive.count + 1" action="objective.await" text="{30158,1001}" group="$DockingObjects" />
                </briefing>
              </update_mission>
            </do_else>
          </do_elseif>
          <do_else comment="await for npc convo">
            <update_mission cue="$MissionCue">
              <briefing>
                <objective step="($FromStep - 1) + $WareDatasToReceive.count + 1" action="objective.await" text="$Client.name" object="$TargetStation" radius="$TargetStation.size * 1.5" />
              </briefing>
            </update_mission>
          </do_else>
          <do_if value="$IsAwaitingTransfer or $PlayerToDockAt or $ShipToDock">
            <set_value name="$ObjectiveStep_Current" exact="($FromStep - 1) + $WareDatasToReceive.count + 1" />
            <debug_text text="'set_objective_from_briefing ($IsAwaitingTransfer or $PlayerToDockAt or $ShipToDock) $ObjectiveStep_Current: ' + $ObjectiveStep_Current + ' @$MissionCue.$ObjectiveStep_Last: ' + @$MissionCue.$ObjectiveStep_Last" chance="$DebugChance" />
            <do_if value="(not $MissionCue.$ObjectiveStep_Last?) or $ObjectiveStep_Current != $MissionCue.$ObjectiveStep_Last">
              <set_objective_from_briefing cue="$MissionCue" step="$ObjectiveStep_Current" />
              <set_value name="$MissionCue.$ObjectiveStep_Last" exact="$ObjectiveStep_Current" />
            </do_if>
          </do_if>
          <do_elseif value="$ObjectiveStep_Current">
            <debug_text text="'set_objective_from_briefing (1) $ObjectiveStep_Current: ' + $ObjectiveStep_Current + ' @$MissionCue.$ObjectiveStep_Last: ' + @$MissionCue.$ObjectiveStep_Last" chance="$DebugChance" />
            <set_value name="$ObjectiveStep_Current" exact="($FromStep - 1) + $ObjectiveStep_Current" />
            <do_if value="(not $MissionCue.$ObjectiveStep_Last?) or $ObjectiveStep_Current != $MissionCue.$ObjectiveStep_Last">
              <set_objective_from_briefing cue="$MissionCue" step="$ObjectiveStep_Current" />
              <set_value name="$MissionCue.$ObjectiveStep_Last" exact="$ObjectiveStep_Current" />
            </do_if>
          </do_elseif>
          <do_else>
            <set_value name="$ObjectiveStep_Current" exact="0" />
            <do_for_each name="$WareDataToGive" in="$WareDatasToGive" counter="$i">
              <set_value name="$Step" exact="$WareDatasToReceive.count + 1 + $i" comment="number of wares to deliver + await confirmation + this step ($i)" />
              <do_if value="not $ObjectiveStep_Current">
                <do_if value="$WareDataToGive.$Count_Delivered lt $WareDataToGive.$Count_Required">
                  <set_value name="$ObjectiveStep_Current" exact="$Step" />
                </do_if>
              </do_if>
              <do_if value="typeof $WareDataToGive.$Ware == datatype.ware">
                <update_mission cue="$MissionCue">
                  <briefing>
                    <objective step="($FromStep - 1) + $Step" action="objective.collect" text="$WareDataToGive.$Count_Delivered + ' / ' + $WareDataToGive.$Count_Required + ' x ' + $WareDataToGive.$Ware.name" object="$TargetStation" radius="$TargetStation.size * 1.5" />
                  </briefing>
                </update_mission>
              </do_if>
              <do_elseif value="$WareDataToGive.$Ware.isclass.ship">
                <update_mission cue="$MissionCue">
                  <briefing>
                    <objective step="($FromStep - 1) + $Step" action="objective.collect" text="$WareDataToGive.$Count_Delivered + ' / ' + $WareDataToGive.$Count_Required + ' x ' + $WareDataToGive.$Ware.knownname" object="$TargetStation" radius="$TargetStation.size * 1.5" />
                  </briefing>
                </update_mission>
              </do_elseif>
            </do_for_each>
            <do_if value="$ObjectiveStep_Current">
              <debug_text text="'set_objective_from_briefing (2) $ObjectiveStep_Current: ' + $ObjectiveStep_Current + ' @$MissionCue.$ObjectiveStep_Last: ' + @$MissionCue.$ObjectiveStep_Last" chance="$DebugChance" />
              <do_if value="(not $MissionCue.$ObjectiveStep_Last?) or $ObjectiveStep_Current != $MissionCue.$ObjectiveStep_Last">
                <set_objective_from_briefing cue="$MissionCue" step="$ObjectiveStep_Current" />
                <set_value name="$MissionCue.$ObjectiveStep_Last" exact="$ObjectiveStep_Current" />
              </do_if>
            </do_if>
          </do_else>
        </do_elseif>
      </actions>
    </library>

    <!-- input: $MissionLevel; output: $MaxNumberOfWaresToReceive, $ReturnMultiplier, $MissionDuration, $Difficulty -->
    <library name="ConfigureDifficulty">
      <actions>
        <!--
          $MissionLevel: if not set, get from $ReturnMultiplier. otherwise, randomised from 1 to 10.
          $MaxNumberOfWaresToReceive from $MissionLevel
          $ReturnMultiplier (the exchange rate) from $MissionLevel or is already set
          $MissionDuration derived from $ReturnMultiplier
          $Difficulty: initially level.easy then re-adjusts when barter-receive from player wares.count is set in Do_Start_Mission
        -->
        <debug_text text="'ConfigureDifficulty'" chance="$DebugChance"/>
        <debug_text text="'    $MissionLevel: ' + @$MissionLevel" chance="$DebugChance"/>
        <do_if value="not $MissionLevel">
          <do_if value="@$ReturnMultiplier">
            <!-- formula of return multiplier from mission level from $ReturnMultiplier calculation a few lines below is:
            <set_value name="$ReturnMultiplier" exact="((0.11111 * $MissionLevel) + 1.8889 + 0.5)i" /> -->
            <set_value name="$MissionLevel" exact="[(($ReturnMultiplier - 1.8889) / 0.11111 - 0.5)i, 10].max" />
            <debug_text text="'    $MissionLevel (based on $ReturnMultiplier): ' + $MissionLevel" chance="$DebugChance" />
          </do_if>
          <do_else>
            <set_value name="$MissionLevel" min="1" max="10" />
            <debug_text text="'    $MissionLevel (min 1 max 10): ' + $MissionLevel" chance="$DebugChance"/>
          </do_else>
        </do_if>
        <debug_text text="'    $MaxNumberOfWaresToReceive: ' + @$MaxNumberOfWaresToReceive" chance="$DebugChance" />
        <do_if value="not $MaxNumberOfWaresToReceive?">
          <!--
            get max number of wares to receive at 1xWares:level-1 and 5xWares:level-10
            m = rise/run = (5 - 1)/(10 - 1) = 4/9 = 0.44444
            y = mx + b
            b = y - mx = 5 - (0.44444 * 10) = 0.55556
            max number of wares = 0.44444 * level + 0.55556
          -->
          <set_value name="$MaxNumberOfWaresToReceive" exact="((0.44444 * $MissionLevel) + 0.55556 + 0.5)i" />
          <debug_text text="'    $MaxNumberOfWaresToReceive (calculated from MissionLevel): ' + $MaxNumberOfWaresToReceive" chance="$DebugChance" />
        </do_if>
        <debug_text text="'    $ReturnMultiplier: ' + @$ReturnMultiplier" chance="$DebugChance" />
        <do_if value="not @$ReturnMultiplier">
          <!--
            get exchange rate based on mission level at 2xReturn:level-1 and 3xReturn:level-10
            m = rise/run = (2 - 3)/(1 - 10) = -2/-9 = 0.11111
            y = mx + b
            b = y - mx = 3 - (0.11111 * 10) = 1.8889
            exchange rate to player = mx + b = (0.11111 * level) + 1.8889
          -->
          <set_value name="$ReturnMultiplier" exact="((0.11111 * $MissionLevel) + 1.8889 + 0.5)i" />
          <debug_text text="'    $ReturnMultiplier (calculated from MissionLevel): ' + $ReturnMultiplier" chance="$DebugChance" />
        </do_if>
        <do_if value="$ReturnMultiplier gt 2.5">
          <!--
            get duration from mission level input at 60min:2xExchangeRate and 30min:3xExchangeRate:
            y = mx + b
            m = rise/run = (60 - 30)/(2 - 3) = -30
            b = y - mx = 60 - -30 * 2 = 120
            duration = mx + b = (-30 * ExchangeRate) + 120
          -->
          <set_value name="$MissionDuration" exact="((-30 * $ReturnMultiplier) + 120)min" />
          <debug_text text="'    $MissionDuration (based on exchange rate of ' + $ReturnMultiplier + '): ' + $MissionDuration" chance="$DebugChance" />
        </do_if>
        <do_else>
          <set_value name="$MissionDuration" exact="0s" />
          <debug_text text="'    $MissionDuration (exchange rate le 2): ' + $MissionDuration" chance="$DebugChance" />
        </do_else>
        <set_value name="$MissionDuration" exact="0s" />
        <debug_text text="'    $MissionDuration (removed as partial delivery will result in no reward to the player): ' + $MissionDuration" chance="$DebugChance" />
        <debug_text text="'    $Difficulty: ' + @$Difficulty" chance="$DebugChance" />
        <do_if value="(not @$Difficulty)">
          <do_if value="@$WareDatasToReceive.count">
            <set_value name="$WaresCount" exact="[$WareDatasToReceive.count, 5].min" />
            <debug_text text="'    $WaresCount (max 5): ' + $WaresCount" chance="$DebugChance" />
            <!--
              get difficulty based on the number wares to barter-receive diff-1:1xWares and diff-3:5xWares
              m = rise/run = (1 - 3)/(1 - 5) = 0.5
              y = mx + b
              b = y - mx = 3 - (0.5 * 5) = 0.5
              difficulty = mx + b = (0.5 * Wares) + 0.5
            -->
            <set_value name="$DifficultyIndex" exact="((0.5 * $WaresCount) + 0.5)i" />
            <set_value name="$Difficulty" exact="[level.easy, level.medium, level.hard].{$DifficultyIndex}" />
            <debug_text text="'    $Difficulty (based on barter-receive from player $WareDatasToReceive.count: ' + $WareDatasToReceive.count + '): ' + $Difficulty" chance="$DebugChance" />
          </do_if>
          <do_else>
            <set_value name="$Difficulty" exact="level.easy" />
            <debug_text text="'    $Difficulty (interim, will be reset based on barter-receive from player count): ' + $Difficulty" chance="$DebugChance" />
          </do_else>
        </do_if>
      </actions>
    </library>

    <!-- OTHER HELPERS -->
    <library name="GetOrConfirmReturnMultiplier" purpose="run_actions">
      <params>
        <param name="Station" />
        <param name="WareDatasToReceive" />
        <param name="WareDatasToGive" />
        <param name="ReturnMultiplier" />
        <param name="DebugChance" />
      </params>
      <actions>
        <set_value name="$Price_ToReceive" exact="0ct" />
        <set_value name="$Price_ToGive" exact="0ct" />
        <run_actions ref="GetPriceWaresToReceive" result="$Price_WaresToReceive">
          <param name="WareDatasToReceive" value="$WareDatasToReceive" />
        </run_actions>
        <run_actions ref="GetPriceWaresToGive" result="$Price_WaresToGive">
          <param name="WareDatasToGive" value="$WareDatasToGive" />
        </run_actions>
        <debug_text text="'$Price_WaresToReceive: ' + $Price_WaresToReceive" chance="$DebugChance" />
        <debug_text text="'$Price_WaresToGive: ' + $Price_WaresToGive" chance="$DebugChance" />
        <do_if value="$Price_WaresToReceive != 0ct">
          <set_value name="$ReturnMultiplier_Actual" exact="($Price_WaresToGive)f / ($Price_WaresToReceive)f" />
          <debug_text text="'$ReturnMultiplier_Actual: ' + $ReturnMultiplier_Actual" chance="$DebugChance" />
          <do_if value="abs($ReturnMultiplier_Actual - $ReturnMultiplier) gt 0.1">
            <set_value name="$ReturnMultiplier" exact="$ReturnMultiplier_Actual" />
          </do_if>
        </do_if>
        <do_else comment="if div by 0, then just return 2">
          <set_value name="$ReturnMultiplier" exact="2" />
        </do_else>
        <return value="$ReturnMultiplier" />
      </actions>
    </library>

    <library name="GetOrConfirmWareDatasToReceiveGive" purpose="run_actions">
      <params>
        <param name="Station" />
        <param name="WareDatasToReceive" default="[]" />
        <param name="WareDatasToGive" default="[]" />
        <param name="MaxNumberOfWaresToReceive" default="1" />
        <param name="ReturnMultiplier" default="2" />
        <param name="WaresExcludeFromBarter" default="[ware.rawscrap]" />
        <param name="ReceiveCargoLimit" default="null" />
        <param name="IsCreateFakeTradeOffers" default="false" />
        <param name="DebugChance" default="$DebugChance" />
      </params>
      <actions>
        <do_if value="not $MaxNumberOfWaresToReceive">
          <set_value name="$MaxNumberOfWaresToReceive" exact="1" />
        </do_if>
        <do_if value="not $ReturnMultiplier">
          <set_value name="$ReturnMultiplier" exact="2" />
        </do_if>
        <do_if value="not $WaresExcludeFromBarter">
          <set_value name="$WaresExcludeFromBarter" exact="[]" />
        </do_if>

        <set_value name="$Price_WaresToReceive" exact="0ct" />
        <set_value name="$Price_WaresToGive" exact="0ct" />

        <set_value name="$BuyOffers" exact="[]" />
        <set_value name="$SellOffers" exact="[]" />

        <set_value name="$BuyOffer_Fake" exact="null" />
        <set_value name="$SellOffer_Fake" exact="null" />

        <!-- STEP 1: -->
        <debug_text text="'STEP 1: get buy offers of this station from which barter-receive data is built'" chance="$DebugChance" />
        <do_if value="(not @$WareDatasToReceive.count) or (not @$WareDatasToGive.count)">
          <set_value name="$Resources" exact="$Station.resources.list.clone"/>

          <debug_text text="'$Resources (pre shuffle_list): ' + $Resources" chance="$DebugChance" />
          <shuffle_list list="$Resources" />
          <debug_text text="'$Resources: ' + $Resources" chance="$DebugChance" />
          <do_all exact="$Resources.count" counter="$i" reverse="true">
            <do_if value="$BuyOffers.count lt $MaxNumberOfWaresToReceive">
              <find_buy_offer result="$BuyOffer" buyer="$Station" wares="$Resources.{$i}"/>
              <do_if value="$BuyOffer != null">
                <debug_text text="'    $BuyOffer (available to barter-receive from player): ' + $BuyOffer + ' ware: ' + $BuyOffer.ware + ' amount: ' + $BuyOffer.amount" chance="$DebugChance" />
                <append_to_list name="$BuyOffers" exact="$BuyOffer" />
              </do_if>
            </do_if>
            <do_if value="not $BuyOffer?" comment="Station does not currently buy ware">
              <remove_value name="$Resources.{$i}"/>
            </do_if>
            <remove_value name="$BuyOffer"/>
          </do_all>

          <do_if value="not $BuyOffers.count">
            <do_if value="$IsCreateFakeTradeOffers">
              <set_value name="$Resources" exact="$Station.resources.list.clone"/>
              <set_value name="$BuyOffer_Fake_Ware" exact="$Station.resources.random" />
              <set_value name="$BuyOffer_Fake_Count" min="750" max="1000" comment="relatively immaterial except for creating the fake trade offer" />
              <create_trade_offer name="$BuyOffer_Fake" buyer="$Station" object="$Station" ware="$BuyOffer_Fake_Ware" amount="$BuyOffer_Fake_Count" price="$BuyOffer_Fake_Ware.minprice" playeronly="true" />
              <append_to_list name="$BuyOffers" exact="$BuyOffer_Fake" />
            </do_if>
          </do_if>

          <set_value name="$Price_WaresToReceive" exact="0ct" comment="this one value will determine the valuer for barter-receive (i.e. what the station wants from the player) and the value for barter-give (i.e. what the player gets as reward)" />
          <sort_list list="$BuyOffers" sortbyvalue="loop.element.amount" sortdescending="true" />
          <set_value name="$IsLimitBarterValueByWareCount" exact="true" comment="if true, limit barter value by limiting each ware count to bet 750 and 1000 units. otherwise, barter value is limited to between 75% and 100% of barter value" />
          <debug_text text="'$IsLimitBarterValueByWareCount: ' + $IsLimitBarterValueByWareCount" chance="$DebugChance" />
          <do_all exact="$MaxNumberOfWaresToReceive" counter="$i">
            <!-- <set_value name="$Price_WaresToReceive" operation="add" exact="$BuyOffers.{$i}.ware.averageprice" /> -->
            <do_if value="$BuyOffers.{$i}?">
              <do_if value="$IsLimitBarterValueByWareCount">
                <set_value name="$PricePerUnit" exact="(($BuyOffers.{$i}.price)f / ($BuyOffers.{$i}.amount)f)ct" />
                <set_value name="$Count_Min" min="750" max="1000" />
                <set_value name="$Count" exact="[$Count_Min, $BuyOffers.{$i}.amount].min" comment="note that the counts of barter wares to receive and give will not be limited to 1000 units. the value of $Price_WaresToReceive will determine those counts." />
                <set_value name="$Price_WaresToReceive" operation="add" exact="$PricePerUnit * $Count" comment="get current market price instead" />
              </do_if>
              <do_else>
                <set_value name="$Count" exact="$BuyOffers.{$i}.amount" />
                <set_value name="$Price_WaresToReceive" operation="add" exact="$BuyOffers.{$i}.price * $Count" comment="get current market price instead" />
              </do_else>
            </do_if>
          </do_all>
          <debug_text text="'$Price_WaresToReceive: ' + $Price_WaresToReceive" chance="$DebugChance" />
          <do_if value="not $IsLimitBarterValueByWareCount" comment="limit barter value by value">
            <set_value name="$Price_WaresToReceive" min="(($Price_WaresToReceive)f / ($ReturnMultiplier)f)ct" max="$Price_WaresToReceive" />
            <debug_text text="'$Price_WaresToReceive (adjusted by $ReturnMultiplier): ' + $Price_WaresToReceive" chance="$DebugChance" />
          </do_if>
        </do_if>
        <do_elseif value="@$WareDatasToReceive.count">
          <run_actions ref="GetPriceWaresToReceive" result="$Price_WaresToReceive">
            <param name="WareDatasToReceive" value="$WareDatasToReceive" />
          </run_actions>
        </do_elseif>

        <!-- STEP 2: -->
        <debug_text text="'STEP 2: generate an appropriate barter-give (the reward the station gives) where price of barter-give ware(s) = at least 2 x price of barter-receive wares'" chance="$DebugChance" />
        <do_if value="not @$WareDatasToGive.count">
          <!-- get sell offers of this station from which barter-give data is built -->
          <set_value name="$Products" exact="$Station.products.list.clone"/>
          <append_list_elements name="$Products" other="$Station.tradewares.list.clone"/>

          <debug_text text="'$Products: ' + $Products" chance="$DebugChance" />
          <do_all exact="$Products.count" counter="$i" reverse="true">
            <do_if value="(not $Station.products.{$Products.{$i}}.intermediate) or $Station.tradewares.list.indexof.{$Products.{$i}}">
              <find_sell_offer result="$SellOffer" seller="$Station" wares="$Products.{$i}"/>
              <do_if value="$SellOffer != null">
                <debug_text text="'    $SellOffer (available to barter-give to player): ' + $SellOffer + ' ware: ' + $SellOffer.ware + ' amount: ' + $SellOffer.amount" chance="$DebugChance" />
                <append_to_list name="$SellOffers" exact="$SellOffer" />
              </do_if>
            </do_if>
            <do_if value="not $SellOffer?" comment="Station does not currently sell ware">
              <remove_value name="$Products.{$i}"/>
            </do_if>
            <remove_value name="$SellOffer"/>
          </do_all>

          <set_value name="$Price_WaresToGive_Target" exact="($ReturnMultiplier * ($Price_WaresToReceive)f)ct" />
          <debug_text text="'$Price_WaresToGive_Target: ' + $Price_WaresToGive_Target" chance="$DebugChance" />
          <set_value name="$Price_WaresToGive" exact="0ct" />

          <do_if value="not $SellOffers.count">
            <do_if value="$IsCreateFakeTradeOffers">
              <set_value name="$Products" exact="$Station.products.list.clone" />
              <append_list_elements name="$Products" other="$Station.tradewares.list.clone"/>
              <set_value name="$Resources" exact="$Station.resources.list.clone"/>
              <do_for_each name="$Resource" in="$Resources" comment="remove intermediate wares from products list">
                <remove_from_list name="$Products" exact="$Resource" />
              </do_for_each>
              <set_value name="$SellOffer_Fake_Ware" exact="$Products.random" />
              <set_value name="$SellOffer_Fake_Count" min="750" max="1000" comment="relatively immaterial except for creating the fake trade offer" />
              <create_trade_offer name="$SellOffer_Fake" buyer="$Station" object="$Station" ware="$SellOffer_Fake_Ware" amount="$SellOffer_Fake_Count" price="$SellOffer_Fake_Ware.minprice" playeronly="true" />
              <append_to_list name="$SellOffers" exact="$SellOffer_Fake" />
            </do_if>
          </do_if>

          <sort_list list="$SellOffers" sortbyvalue="loop.element.unitprice" sortdescending="false" comment="sort so that more valuable wares (and with the least counts) are added first" />
          <do_for_each name="$SellOffer" in="$SellOffers">
            <do_if value="not $WaresExcludeFromBarter.indexof.{$SellOffer.ware}">
              <do_if value="$Price_WaresToGive lt $Price_WaresToGive_Target">
                <!-- <set_value name="$UnitPrice" exact="$SellOffer.ware.averageprice" /> -->
                <set_value name="$UnitPrice" exact="$SellOffer.unitprice" comment="use current market price instead" />
                <do_if value="$UnitPrice * $SellOffer.amount le $Price_WaresToGive_Target - $Price_WaresToGive" comment="this price of this ware is under the target. add the amount of this sell offer to the reward">
                  <append_to_list name="$WareDatasToGive" exact="table[$Ware = $SellOffer.ware, $Count_Required = $SellOffer.amount, $Count_Delivered = 0, $UnitPrice = $UnitPrice]" />
                  <debug_text text="'    $WareDatasToGive.{' + $WareDatasToGive.count + '} (all in stock): ' + $WareDatasToGive.{$WareDatasToGive.count}" chance="$DebugChance" />
                  <set_value name="$Price_WaresToGive" operation="add" exact="$UnitPrice * $SellOffer.amount" />
                </do_if>
                <do_else comment="the price of this exceeds the target, so get an appropriate count">
                  <set_value name="$Count_Required" exact="(($Price_WaresToGive_Target - $Price_WaresToGive)f / ($UnitPrice)f + 0.5)i" comment="rounded up to next integer" />
                  <do_if value="$Count_Required gt 0">
                    <append_to_list name="$WareDatasToGive" exact="table[$Ware = $SellOffer.ware, $Count_Required = $Count_Required, $Count_Delivered = 0, $UnitPrice = $UnitPrice]" />
                    <debug_text text="'    $WareDatasToGive.{' + $WareDatasToGive.count + '} (partial in stock): ' + $WareDatasToGive.{$WareDatasToGive.count}" chance="$DebugChance" />
                    <set_value name="$Price_WaresToGive" operation="add" exact="($UnitPrice * $Count_Required)ct" />
                  </do_if>
                </do_else>
                <debug_text text="'    $Price_WaresToGive (running total): ' + $Price_WaresToGive" chance="$DebugChance" />
              </do_if>
              <do_if value="$Price_WaresToGive ge $Price_WaresToGive_Target">
                <break />
              </do_if>
            </do_if>
          </do_for_each>
        </do_if>

        <!-- validate $WareDatasToGive -->
        <do_for_each name="$WareDataToGive" in="$WareDatasToGive">
          <do_if value="typeof $WareDataToGive.$Ware == datatype.ware">
            <do_if value="not $WareDataToGive.$UnitPrice?">
              <set_value name="$WareDataToGive.$UnitPrice" exact="$WareDataToGive.$Ware.averageprice" />
            </do_if>
          </do_if>
          <do_elseif value="$WareDataToGive.$Ware.isclass.ship">
            <do_if value="not $WareDataToGive.$UnitPrice?">
              <set_value name="$WareDataToGive.$UnitPrice" exact="$WareDataToGive.$Ware.value" />
            </do_if>
            <assert value="$WareDataToGive.$Count_Required == 1" text="'Ship counts in barter reward entries (i.e. WareDatasToGive) are limited to 1.'"/>
            <set_value name="$WareDataToGive.$Count_Required" exact="1" />
          </do_elseif>
        </do_for_each>
        <run_actions ref="GetPriceWaresToGive" result="$Price_WaresToGive">
          <param name="WareDatasToGive" value="$WareDatasToGive" />
        </run_actions>
        <debug_text text="'$Price_WaresToGive: ' + $Price_WaresToGive" chance="$DebugChance" />

        <!-- STEP 3: -->
        <debug_text text="'STEP 3: generate an appropriate barter-receive (the wares the station requests) where price of barter-receive ware(s) = at least half x price of barter-give wares'" chance="$DebugChance" />
        <do_if value="not @$WareDatasToReceive.count">
          <set_value name="$Price_WaresToReceive_Target" exact="(($Price_WaresToGive)f / ($ReturnMultiplier)f)ct" />
          <debug_text text="'$Price_WaresToReceive_Target (at exchange rate ' + (1 / ($ReturnMultiplier)f) + ' to station): ' + $Price_WaresToReceive_Target" chance="$DebugChance" />
          <set_value name="$Price_WaresToReceive" exact="0" />
          <do_for_each name="$BuyOffer" in="$BuyOffers">
            <do_if value="not $WaresExcludeFromBarter.indexof.{$BuyOffer.ware}">
              <debug_text text="'    $BuyOffer (available to barter-receive from player): ' + $BuyOffer + ' ware: ' + $BuyOffer.ware + ' amount: ' + $BuyOffer.amount + ' unitprice: ' + $BuyOffer.unitprice" chance="$DebugChance" />
              <set_value name="$Count_Required" exact="($BuyOffer.amount * 0.75)i" />
              <set_value name="$UnitPrice" exact="$BuyOffer.unitprice" />
              <set_value name="$Price_Offered" exact="(($UnitPrice)f * $Count_Required)ct"
                          comment="gamify: 0.75 of required count to allow other wares to get barter-received. otherwise, only one barter-receive wares will be generated because its usually sufficient to satisfy return value." />
              <do_if value="$Price_Offered le $Price_WaresToReceive_Target - $Price_WaresToReceive">
                <append_to_list name="$WareDatasToReceive" exact="table[$Ware = $BuyOffer.ware, $Count_Required = $Count_Required, $Price = $Price_Offered, $Count_Delivered = 0, $UnitPrice = $UnitPrice]" />
                <debug_text text="'    $WareDatasToReceive.{' + $WareDatasToReceive.count + '} (all in stock): ' + $WareDatasToReceive.{$WareDatasToReceive.count}" chance="$DebugChance" />
                <set_value name="$Price_WaresToReceive" operation="add" exact="$Price_Offered" />
                <debug_text text="'    $Price_WaresToReceive (running total): ' + $Price_WaresToReceive" chance="$DebugChance" />
              </do_if>
              <do_else>
                <set_value name="$Count_Required" exact="(($Price_WaresToReceive_Target - $Price_WaresToReceive)f / ($UnitPrice)f + 0.5)i" />
                <do_if value="$Count_Required ge 10">
                  <debug_text text="'    $Count_Required: ' + $Count_Required" chance="$DebugChance" />
                  <append_to_list name="$WareDatasToReceive" exact="table[$Ware = $BuyOffer.ware, $Count_Required = $Count_Required, $Price = $UnitPrice * $Count_Required, $Count_Delivered = 0, $UnitPrice = $UnitPrice]" />
                  <debug_text text="'    $WareDatasToReceive.{' + $WareDatasToReceive.count + '} (partial in stock): ' + $WareDatasToReceive.{$WareDatasToReceive.count}" chance="$DebugChance" />
                  <set_value name="$Price_WaresToReceive" operation="add" exact="$UnitPrice * $Count_Required" />
                </do_if>
                <debug_text text="'    $Price_WaresToReceive (running total): ' + $Price_WaresToReceive" chance="$DebugChance" />
              </do_else>
              <do_if value="$Price_WaresToReceive ge $Price_WaresToReceive_Target">
                <break />
              </do_if>
            </do_if>
          </do_for_each>
        </do_if>

        <!-- validate $WareDatasToReceive -->
        <do_for_each name="$WareDataToReceive" in="$WareDatasToReceive">
          <do_if value="not $WareDataToReceive.$UnitPrice?">
            <set_value name="$WareDataToReceive.$UnitPrice" exact="$WareDataToReceive.$Ware.averageprice" />
          </do_if>
        </do_for_each>
        <run_actions ref="GetPriceWaresToReceive" result="$Price_WaresToReceive">
          <param name="WareDatasToReceive" value="$WareDatasToReceive" />
        </run_actions>
        <debug_text text="'$Price_WaresToReceive: ' + $Price_WaresToReceive" chance="$DebugChance" />

        <!-- step 4: -->
        <debug_text text="'STEP 4: ensure actual return value is near ReturnMultiplier'" chance="$DebugChance" />
        <run_actions ref="GetOrConfirmReturnMultiplier" result="$ReturnMultiplier_Actual">
          <param name="Station" value="$Station" />
          <param name="WareDatasToReceive" value="$WareDatasToReceive" />
          <param name="WareDatasToGive" value="$WareDatasToGive" />
          <param name="ReturnMultiplier" value="$ReturnMultiplier" />
          <param name="DebugChance" value="$DebugChance" />
        </run_actions>
        <do_if value="abs($ReturnMultiplier_Actual - $ReturnMultiplier) gt 0.5" comment="adjust counts to get closer to ReturnMultiplier">
          <set_value name="$Price_WaresToGive_Target" exact="$Price_WaresToReceive * $ReturnMultiplier" />
          <set_value name="$Count_WaresToGive" exact="0" />
          <set_value name="$Count_ShipsToGive" exact="0" />
          <do_for_each name="$WareDataToGive" in="$WareDatasToGive">
            <do_if value="typeof $WareDataToGive.$Ware == datatype.ware">
              <set_value name="$Count_WaresToGive" operation="add" exact="1" />
            </do_if>
            <do_elseif value="$WareDataToGive.$Ware.isclass.ship">
              <set_value name="$Count_ShipsToGive" operation="add" exact="1" />
            </do_elseif>
          </do_for_each>
          <do_if value="not $Count_ShipsToGive" comment="try to adjust barter-give first because prevent changing of barter-give if there are ship rewards">
            <set_value name="$Price_Adj" exact="($Price_WaresToGive_Target - $Price_WaresToGive) / ($Count_WaresToGive)f" comment="difference of current and target distributed across ware rewards" />
            <set_value name="$Price_WaresToGive" exact="0ct" />
            <do_for_each name="$WareDataToGive" in="$WareDatasToGive">
              <set_value name="$WareDataToGive.$Count_Required" exact="(($WareDataToGive.$Count_Required * $WareDataToGive.$UnitPrice + $Price_Adj) / ($WareDataToGive.$UnitPrice)f)i" />
              <set_value name="$Price_WaresToGive" operation="add" exact="$WareDataToGive.$Count_Required * $WareDataToGive.$UnitPrice" />
            </do_for_each>
          </do_if>
          <do_else comment="if barter-give isn't changed, then change barter-receive">
            <set_value name="$Price_WaresToReceive_Target" exact="$Price_WaresToGive / ($ReturnMultiplier)f" />
            <set_value name="$Price_Adj" exact="($Price_WaresToReceive_Target - $Price_WaresToReceive) / ($WareDatasToReceive.count)f" comment="difference of current and target distributed across ware rewards" />
            <set_value name="$Price_WaresToReceive" exact="0ct" />
            <do_for_each name="$WareDataToReceive" in="$WareDatasToReceive">
              <set_value name="$WareDataToReceive.$Count_Required" exact="(($WareDataToReceive.$Count_Required * $WareDataToReceive.$UnitPrice + $Price_Adj) / ($WareDataToReceive.$UnitPrice)f)i" />
              <set_value name="$Price_WaresToReceive" operation="add" exact="$WareDataToReceive.$Count_Required * $WareDataToReceive.$UnitPrice" />
            </do_for_each>
          </do_else>
        </do_if>
        <run_actions ref="GetOrConfirmReturnMultiplier" result="$ReturnMultiplier_Actual">
          <param name="Station" value="$Station" />
          <param name="WareDatasToReceive" value="$WareDatasToReceive" />
          <param name="WareDatasToGive" value="$WareDatasToGive" />
          <param name="ReturnMultiplier" value="$ReturnMultiplier" />
          <param name="DebugChance" value="$DebugChance" />
        </run_actions>

        <!-- STEP 5: -->
        <debug_text text="'STEP 5 (final step): if ReceiveCargoLimit is set, then adjust barter counts and value to suit'" chance="$DebugChance" />
        <do_if value="$ReceiveCargoLimit">
          <set_value name="$ReceiveCargo_Current" exact="0" />
          <set_value name="$ReceiveValue_Current" exact="0" />
          <do_for_each name="$WareDataToReceive" in="$WareDatasToReceive">
            <set_value name="$VolumeToReceive" exact="$WareDataToReceive.$Count_Required * $WareDataToReceive.$Ware.volume" />
            <do_if value="$VolumeToReceive le $ReceiveCargoLimit">
              <set_value name="$ReceiveCargo_Current" operation="add" exact="$VolumeToReceive" />
              <set_value name="$ReceiveValue_Current" operation="add" exact="$WareDataToReceive.$Count_Required * $WareDataToReceive.$UnitPrice" />
            </do_if>
            <do_else>
              <set_value name="$CountToFit" exact="(($ReceiveCargoLimit - $ReceiveCargo_Current) / ($WareDataToReceive.$Ware.volume)f)i" />
              <do_if value="$CountToFit ge 1">
                <set_value name="$WareDataToReceive.$Count_Required" exact="$CountToFit" />
                <set_value name="$ReceiveCargo_Current" operation="add" exact="$WareDataToReceive.$Count_Required * $WareDataToReceive.$Ware.volume" />
                <set_value name="$ReceiveValue_Current" operation="add" exact="$WareDataToReceive.$Count_Required * $WareDataToReceive.$UnitPrice" />
              </do_if>
              <do_else>
                <set_value name="$WareDataToReceive.$Count_Required" exact="0" />
              </do_else>
            </do_else>
            <do_if value="$VolumeToReceive gt $ReceiveCargoLimit">
              <break />
            </do_if>
          </do_for_each>

          <!-- adjust barter-give to suit new value of barter-receive -->
          <set_value name="$GiveValue_Target" exact="$ReceiveValue_Current * $ReturnMultiplier" />
          <set_value name="$GiveValue_Current" exact="0" />
          <do_for_each name="$WareDataToGive" in="$WareDatasToGive">
            <do_if value="typeof $WareDataToGive.$Ware == datatype.ware">
              <set_value name="$ValueToGive" exact="$WareDataToGive.$Count_Required * $WareDataToGive.$UnitPrice" />
              <do_if value="$ValueToGive le $GiveValue_Target">
                <set_value name="$GiveValue_Current" operation="add" exact="$ValueToGive" />
              </do_if>
              <do_else>
                <set_value name="$ValueToFit" exact="$GiveValue_Target - $GiveValue_Current" />
                <set_value name="$CountToFit" exact="($ValueToFit / ($WareDataToGive.$UnitPrice)f)i" />
                <do_if value="$CountToFit ge 1">
                  <set_value name="$WareDataToGive.$Count_Required" exact="$CountToFit" />
                  <set_value name="$GiveValue_Current" operation="add" exact="$WareDataToGive.$Count_Required * $WareDataToGive.$UnitPrice" />
                </do_if>
                <do_else>
                  <set_value name="$WareDataToGive.$Count_Required" exact="0" />
                </do_else>
              </do_else>
            </do_if>
            <do_elseif value="$WareDataToGive.$Ware.isclass.ship" comment="do not adjust ship count rewards">
            </do_elseif>
          </do_for_each>
        </do_if>

        <!-- recalculate in case data changed -->
        <run_actions ref="GetPriceWaresToReceive" result="$Price_WaresToReceive">
          <param name="WareDatasToReceive" value="$WareDatasToReceive" />
        </run_actions>
        <run_actions ref="GetPriceWaresToGive" result="$Price_WaresToGive">
          <param name="WareDatasToGive" value="$WareDatasToGive" />
        </run_actions>

        <run_actions ref="GetOrConfirmReturnMultiplier" result="$ReturnMultiplier">
          <param name="Station" value="$Station" />
          <param name="WareDatasToReceive" value="$WareDatasToReceive" />
          <param name="WareDatasToGive" value="$WareDatasToGive" />
          <param name="ReturnMultiplier" value="$ReturnMultiplier" />
          <param name="DebugChance" value="$DebugChance" />
        </run_actions>

        <set_value name="$WareDatasToReceiveGive" exact="table[
          $WareDatasToReceive   = $WareDatasToReceive,
          $Price_WaresToReceive = $Price_WaresToReceive,
          $WareDatasToGive      = $WareDatasToGive,
          $Price_WaresToGive    = $Price_WaresToGive,
          $ReturnMultiplier     = $ReturnMultiplier,
        ]" />

        <do_if value="$BuyOffer_Fake" comment="fake offers to generate barter data is no longer needed, remove them">
          <set_value name="$WareDatasToReceiveGive.$IsReceiveFromFakeBuyOffer" exact="true" />
          <remove_trade_offer object="$Station" tradeoffer="$BuyOffer_Fake"/>
        </do_if>
        <do_else>
          <set_value name="$WareDatasToReceiveGive.$IsReceiveFromFakeBuyOffer" exact="false" />
        </do_else>
        <do_if value="$SellOffer_Fake">
          <set_value name="$WareDatasToReceiveGive.$IsGiveFromFakeSellOffer" exact="true" />
          <remove_trade_offer object="$Station" tradeoffer="$SellOffer_Fake"/>
        </do_if>
        <do_else>
          <set_value name="$WareDatasToReceiveGive.$IsGiveFromFakeSellOffer" exact="false" />
        </do_else>

        <return value="$WareDatasToReceiveGive" />
      </actions>
    </library>

    <library name="GetPriceWaresToReceive" purpose="run_actions">
      <params>
        <param name="WareDatasToReceive" />
      </params>
      <actions>
        <set_value name="$Price_WaresToReceive" exact="0ct" />
        <do_for_each name="$WareData" in="$WareDatasToReceive">
          <do_if value="@$WareData.$UnitPrice">
            <set_value name="$Price_WaresToReceive" exact="(($Price_WaresToReceive)f + ($WareData.$UnitPrice)f * $WareData.$Count_Required)ct" />
          </do_if>
          <do_else>
            <set_value name="$Price_WaresToReceive" exact="(($Price_WaresToReceive)f + ($WareData.$Ware.averageprice * $WareData.$Count_Required)f)ct" />
          </do_else>
        </do_for_each>
        <return value="$Price_WaresToReceive" />
      </actions>
    </library>

    <library name="GetPriceWaresToGive" purpose="run_actions">
      <params>
        <param name="WareDatasToGive" />
      </params>
      <actions>
        <set_value name="$Price_WaresToGive" exact="0ct" />
        <do_for_each name="$WareData" in="$WareDatasToGive">
          <do_if value="typeof $WareData.$Ware == datatype.ware">
            <do_if value="@$WareData.$UnitPrice">
              <set_value name="$Price_WaresToGive" exact="(($Price_WaresToGive)f + ($WareData.$UnitPrice)f * $WareData.$Count_Required)ct" />
            </do_if>
            <do_else>
              <set_value name="$Price_WaresToGive" exact="(($Price_WaresToGive)f + ($WareData.$Ware.averageprice * $WareData.$Count_Required)f)ct" />
            </do_else>
          </do_if>
          <do_elseif value="$WareData.$Ware.isclass.ship">
            <set_value name="$Price_WaresToGive" exact="(($Price_WaresToGive)f + ($WareData.$Ware.value * $WareData.$Count_Required)f)ct" />
          </do_elseif>
        </do_for_each>
        <return value="$Price_WaresToGive" />
      </actions>
    </library>

    <library name="GetBarterDescriptionText" purpose="run_actions">
      <params>
        <param name="WareDatasToReceive" />
        <param name="WareDatasToGive" />
        <param name="ReturnMultiplier" default="null" />
        <param name="RewardValue" default="0ct" />
      </params>
      <actions>
        <set_value name="$BarterDescriptionText" exact="{30158,1002}" />
        <set_value name="$BarterDescriptionText" exact="$BarterDescriptionText + '\n' + {30158,1003}" />
        <do_for_each name="$WareDataToReceive" in="$WareDatasToReceive">
          <do_if value="$WareDataToReceive.$Count_Required ge 1">
            <set_value name="$BarterDescriptionText" exact="$BarterDescriptionText + '\n    ' + $WareDataToReceive.$Count_Required + ' x ' + $WareDataToReceive.$Ware.name" />
          </do_if>
        </do_for_each>
        <set_value name="$BarterDescriptionText" exact="$BarterDescriptionText + '\n' + {30158,1004}" />
        <set_value name="$ShipRewardCountsByMacro" exact="table[]" />
        <do_for_each name="$WareDataToGive" in="$WareDatasToGive">
          <do_if value="$WareDataToGive.$Count_Required ge 1">
            <do_if value="typeof $WareDataToGive.$Ware == datatype.ware">
              <set_value name="$BarterDescriptionText" exact="$BarterDescriptionText + '\n    ' + $WareDataToGive.$Count_Required + ' x ' + $WareDataToGive.$Ware.name" />
            </do_if>
            <do_elseif value="$WareDataToGive.$Ware.isclass.ship">
              <do_if value="not $ShipRewardCountsByMacro.{$WareDataToGive.$Ware.macro}?">
                <set_value name="$ShipRewardCountsByMacro.{$WareDataToGive.$Ware.macro}" exact="$WareDataToGive.$Count_Required" />
              </do_if>
              <do_else>
                <set_value name="$ShipRewardCountsByMacro.{$WareDataToGive.$Ware.macro}" operation="add" exact="$WareDataToGive.$Count_Required" />
              </do_else>
            </do_elseif>
          </do_if>
        </do_for_each>
        <do_for_each name="$ShipMacro" valuename="$Count" in="$ShipRewardCountsByMacro">
          <set_value name="$BarterDescriptionText" exact="$BarterDescriptionText + '\n    ' + $Count + ' x ' + $ShipMacro.name" />
        </do_for_each>
        <do_if value="not $ReturnMultiplier">
          <run_actions ref="GetOrConfirmReturnMultiplier" result="$ReturnMultiplier">
            <param name="WareDatasToReceive" value="$WareDatasToReceive" />
            <param name="WareDatasToGive" value="$WareDatasToGive" />
          </run_actions>
        </do_if>
        <run_actions ref="GetPriceWaresToReceive" result="$Price_WaresToReceive">
          <param name="WareDatasToReceive" value="$WareDatasToReceive" />
        </run_actions>
        <do_if value="not $RewardValue" comment="allow for custom reward values, i.e. in case reward includes other items outside the generated $WareDatasToGive">
          <run_actions ref="GetPriceWaresToGive" result="$RewardValue">
            <param name="WareDatasToGive" value="$WareDatasToGive" />
          </run_actions>
        </do_if>
        <substitute_text text="$BarterDescriptionText" source="$BarterDescriptionText">
          <replace string="'$EXCHANGE_RATE$'" with="($ReturnMultiplier * 100)i / 100.0"/>
          <replace string="'$BARTER_RECEIVE_VALUE$'" with="$Price_WaresToReceive.formatted.default + ' ' + readtext.{1001}.{101}"/>
          <replace string="'$BARTER_GIVE_VALUE$'" with="$RewardValue.formatted.default + ' ' + readtext.{1001}.{101}"/>
        </substitute_text>
        <return value="$BarterDescriptionText" />
      </actions>
    </library>

    <library name="GetBarteringShips" purpose="run_actions">
      <params>
        <param name="TargetStation" />
        <param name="WaresInCargo" default="null" />
        <param name="WaresToBeAddedToCargo" default="null" />
        <param name="DebugChance" default="0" />
      </params>
      <actions>
        <create_group groupname="$Ships_Bartering" />
        <find_ship_by_true_owner groupname="$Ships_NearTargetStation" faction="faction.player" space="$TargetStation.sector" multiple="true">
          <match_distance object="$TargetStation" max="$TargetStation.size * 1.5"/>
        </find_ship_by_true_owner>
        <do_for_each name="$Ship" in="$Ships_NearTargetStation">
          <debug_text text="'$Ship: ' + $Ship + ' ' + $Ship.knownname + ' ' + $Ship.idcode" chance="$DebugChance" />
          <do_if value="$TargetStation.dockingallowed.{$Ship} and ($Ship == player.ship or $Ship.assignedaipilot)">
            <set_value name="$IsValid" exact="false" />
            <do_if value="@$WaresInCargo.count">
              <do_for_each name="$Ware" in="$WaresInCargo">
                <do_if value="$Ship.cargo.{$Ware}.count">
                  <debug_text text="'    $Ship.cargo.{' + $Ware + '}.count: ' + $Ship.cargo.{$Ware}.count" chance="$DebugChance" />
                  <set_value name="$IsValid" exact="true" />
                  <break />
                </do_if>
              </do_for_each>
            </do_if>
            <do_else>
              <set_value name="$IsValid" exact="true" />
            </do_else>
            <do_if value="$IsValid">
              <set_value name="$IsValid" exact="false" />
              <do_if value="@$WaresToBeAddedToCargo.count">
                <do_for_each name="$Ware" in="$WaresToBeAddedToCargo">
                  <do_if value="typeof $Ware == datatype.ware">
                    <do_if value="$Ship.cargo.{$Ware}.free">
                      <debug_text text="'    $Ship.cargo.{' + $Ware + '}.free: ' + $Ship.cargo.{$Ware}.free" chance="$DebugChance" />
                      <set_value name="$IsValid" exact="true" />
                      <break />
                    </do_if>
                  </do_if>
                  <do_elseif value="$Ware.isclass.ship">
                    <set_value name="$IsValid" exact="true" />
                  </do_elseif>
                </do_for_each>
              </do_if>
              <do_else>
                <set_value name="$IsValid" exact="true" />
              </do_else>
            </do_if>
            <debug_text text="'    $IsValid: ' + $IsValid" chance="$DebugChance" />
            <do_if value="$IsValid">
              <add_to_group groupname="$Ships_Bartering" object="$Ship" />
            </do_if>
          </do_if>
        </do_for_each>
        <debug_text text="'$Ships_Bartering.count: ' + $Ships_Bartering.count" chance="$DebugChance" />
        <return value="$Ships_Bartering" />
      </actions>
    </library>

    <!--GENERIC MISSION VARIANTS-->

    <cue name="Force_Generic_Var_1" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 1, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_BarterWares_Var_1" />
    </cue>

    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateGenericMission" instantiate="true" namespace="this" version="2">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$DebugChance"      exact="@event.param.$DebugChance"/>

        <do_if value="not GenerateGenericMission.static.$StationsWithBarterMissions?">
          <create_group groupname="GenerateGenericMission.static.$StationsWithBarterMissions" />
        </do_if>

        <set_value name="$MissionLevel"     exact="@event.param.$MissionLevel" />
        <set_value name="$ReturnMultiplier" exact="@event.param.$ReturnMultiplier" />

        <set_value name="$Sector"           exact="@event.param.$Sector"/>
        <set_value name="$TargetStation"    exact="@event.param.$TargetStation" />
        <do_if value="$TargetStation">
          <set_value name="$Sector"         exact="$TargetStation.sector" />
          <debug_text text="'$Sector (from $TargetStation): ' + $Sector + ' ' + $Sector.knownname" chance="$DebugChance" />
        </do_if>
        <do_elseif value="not $Sector">
          <set_value name="$Sector"         exact="player.sector" />
          <debug_text text="'$Sector (from player.sector): ' + $Sector + ' ' + $Sector.knownname" chance="$DebugChance" />
        </do_elseif>
        <debug_text text="'$MissionLevel: ' + $MissionLevel" chance="$DebugChance" />
        <debug_text text="'$ReturnMultiplier: ' + $ReturnMultiplier" chance="$DebugChance" />
        <debug_text text="'$Sector: ' + $Sector + ' ' + @$Sector.knownname" chance="$DebugChance" />
        <debug_text text="'$TargetStation: ' + $TargetStation + ' ' + @$TargetStation.knownname + ' ' + @$TargetStation.idcode" chance="$DebugChance" />

        <set_value name="$ReportSignalCue"  exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant"   exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnSectorChange?">
          <set_value name="$RemoveOnSectorChange" exact="event.param.$RemoveOnSectorChange"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnSectorChange" exact="true"/>
        </do_else>

        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [JoPaul]'"/>

        <debug_text text="'Attempting to generate a generic mission'" chance="$DebugChance"/>
      </actions>
      <patch sinceversion="2">
        <do_if value="not GenerateGenericMission.static.$StationsWithBarterMissions?">
          <create_group groupname="GenerateGenericMission.static.$StationsWithBarterMissions" />
        </do_if>
      </patch>
      <cues>
        <cue name="GenerateGenericMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>
            <!--Set up some common variables first so that the variants don't have to do things multiple times-->

            <do_if value="$TargetStation">
              <set_value name="$PotentialOfferStations" exact="[$TargetStation]" />
            </do_if>
            <do_elseif value="md.$DLCKaoriFactions.count">
              <!-- note: unlike gm_supplyfactory.xml, $OfferObject and $TargetStation of gm_barterwares.xml are the same.
              i.e. the station offering the mission is the mission objective.
              $PotentialOfferStations and $OfferStations are fundamentally a list of one station - $TargetStation. -->
              <find_station_by_true_owner name="$PotentialOfferStations" faction="md.$DLCKaoriFactions.{1}" excluded="md.GenericMissions.Manager.$ExcludedOfferObjects" space="$Sector" multiple="true">
                <match owner="md.GenericMissions.Manager.$DefaultExcludedOfferFactions" negate="true"/>
                <match_relation_to object="player.entity" comparison="not" relation="enemy" />
              </find_station_by_true_owner>
              <do_if value="(not $PotentialOfferStations.count) and $DebugChance">
                <find_station_by_true_owner name="$PotentialOfferStations" faction="$Sector.owner" excluded="md.GenericMissions.Manager.$ExcludedOfferObjects" space="$Sector" multiple="true">
                  <match owner="md.GenericMissions.Manager.$DefaultExcludedOfferFactions" negate="true"/>
                  <match_relation_to object="player.entity" comparison="not" relation="enemy" />
                </find_station_by_true_owner>
              </do_if>
              <debug_text text="'$PotentialOfferStations.count: ' + $PotentialOfferStations.count" chance="$DebugChance" />
              <shuffle_list list="$PotentialOfferStations" />
              <do_for_each name="$PotentialStation" in="$PotentialOfferStations">
                <do_for_each name="$Ware" in="$PotentialStation.products.list">
                  <do_if value="not $PotentialStation.products.{$Ware}.intermediate">
                    <set_value name="$PotentialOfferStations" exact="[$PotentialStation]"/>
                    <set_value name="$TargetStation" exact="$PotentialStation" />
                    <break />
                  </do_if>
                </do_for_each>
              </do_for_each>
            </do_elseif>

            <debug_text text="'GenerateGenericMission.static.$StationsWithBarterMissions.indexof.{' + $TargetStation.knownname + ' ' + $TargetStation.idcode + '}: ' + GenerateGenericMission.static.$StationsWithBarterMissions.indexof.{$TargetStation}" chance="$DebugChance" />
            <do_if value="$TargetStation and (not GenerateGenericMission.static.$StationsWithBarterMissions.indexof.{$TargetStation})">
              <do_if value="$MissionVariant">
                <!--A specific MissionVariant ID was requested-->
                <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
                <do_if value="$MissionVariant == 1">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                </do_if>
                <do_elseif value="$MissionVariant == 2">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_2" comment="1 x ship_s reward" />
                </do_elseif>
                <do_elseif value="$MissionVariant == 3">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_3" comment="1 x ship_m reward" />
                </do_elseif>
                <do_else>
                  <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [JoPaul]'"/>
                </do_else>
              </do_if>
              <do_else>
                <do_any>
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_1" weight="85" />
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_2" weight="10" comment="1 x ship_s reward" />
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_3" weight="5" comment="1 x ship_m reward" />
                </do_any>
              </do_else>
            </do_if>

            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <debug_text text="'signal_cue (MISSION_NO_VARIANT) ' + $ReportSignalCue" chance="$DebugChance" />
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateGenericMission"/>
            </do_else>
          </actions>
        </cue>

        <cue name="GenerateGenericMission_Variant_1" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$DebugChance" exact="@GenerateGenericMission.$DebugChance"/>
            <set_value name="$MissionLevel" exact="@GenerateGenericMission.$MissionLevel"/>
            <set_value name="$ReturnMultiplier" exact="@GenerateGenericMission.$ReturnMultiplier"/>
            <set_value name="$TargetStation" exact="@GenerateGenericMission.$TargetStation"/>

            <set_value name="$Valid" exact="false"/>
            <do_if value="@$TargetStation.isoperational">
              <set_value name="$Sector" exact="$TargetStation.sector"/>
              <set_value name="$Station" exact="$TargetStation" />
              <set_value name="$Faction" exact="$TargetStation.owner"/>
              <set_value name="$MissionLevel" exact="@GenerateGenericMission.$MissionLevel"/>
              <do_if value="$DebugChance">
                <debug_text text="'$MissionLevel: ' + $MissionLevel" />
                <debug_text text="'$ReturnMultiplier: ' + $ReturnMultiplier" />
                <debug_text text="'$TargetStation: ' + $TargetStation + ' ' + $TargetStation.knownname + ' ' + $TargetStation.idcode" />
                <debug_text text="'$Faction: ' + $Faction" />
              </do_if>
              <include_actions ref="ConfigureDifficulty"
                comment="input: $MissionLevel; output: $MaxNumberOfWaresToReceive, $MissionDuration, $ReturnMultiplier, $Difficulty
                $MissionDuration will return 0 for this variant as partial delivery will result in no reward. " />

              <!-- TODO: @JoPaul set text offset -->
              <set_value name="$ValidOffsets" exact="[1000]"/>

              <!-- SelectMissionVariant library (weighted choice and $lastoffertime tracking) -->
              <run_actions ref="md.GenericMissions.SelectMissionVariant" result="$TextOffset_Table">
                <param name="StaticGMCue"    value="md.GM_BarterWares.GenerateGenericMission"/>
                <param name="ValidOffsets"   value="table[{30158} = $ValidOffsets]"/>
              </run_actions>
              <remove_value name="$ValidOffsets" comment="prevent accidental usage to select a different offset"/>
              <set_value name="$Page"         exact="$TextOffset_Table.keys.last"/>
              <set_value name="$TextOffset"   exact="$TextOffset_Table.{$Page}"/>

              <!-- <do_if value="md.$SplitFactions.indexof.{$Faction}" chance="30">
                <set_value name="$TextOffset" exact="1600"/>
              </do_if>
              <do_elseif value="md.$TerranEarthFactions.indexof.{$Faction}" chance="40">
                <set_value name="$TextOffset" exact="1700"/>
              </do_elseif>
              <do_else>
                <do_any>
                  <do_all>
                    <set_value name="$TextOffset" exact="1000"/>
                  </do_all>
                  <do_all>
                    <set_value name="$TextOffset" exact="1100"/>
                  </do_all>
                  <do_all>
                    <set_value name="$TextOffset" exact="1200"/>
                  </do_all>
                  <do_all>
                    <set_value name="$TextOffset" exact="1300"/>
                  </do_all>
                  <do_all>
                    <set_value name="$TextOffset" exact="1400"/>
                  </do_all>
                  <do_all>
                    <set_value name="$TextOffset" exact="1500"/>
                  </do_all>
                </do_any>
              </do_else> -->

              <set_value name="$ReqResourcecount" exact="0" />
              <!-- Check if the station isn't already over the MissionStorage Percentage for at least half its wares-->
              <set_value name="$Wares" exact="$TargetStation.resources.list"/>
              <do_all exact="$Wares.count" counter="$WaresCounter">
                <set_value name="$Ware" exact="$Wares.{$WaresCounter}" />
                <do_if value="$TargetStation.cargo.{$Ware}.target gt 0">
                  <set_value name="$WareStoragePercent" exact="($TargetStation.cargo.{$Ware}.count * 100) / $TargetStation.cargo.{$Ware}.target"/>
                  <do_if value="$WareStoragePercent lt 75">
                    <debug_text text="$Ware + ' still required on ' + $TargetStation.knownname" chance="$DebugChance"/>
                    <set_value name="$ReqResourcecount" operation="add" exact="1" />
                  </do_if>
                  <do_else>
                    <debug_text text="'Storage of ' + $TargetStation.knownname + ' already filled with ' + $Ware" chance="$DebugChance"/>
                  </do_else>
                </do_if>
              </do_all>

              <do_if value="($ReqResourcecount ge $Wares.count/2) or ($ReqResourcecount ge 4)">
                <do_if value="$ReqResourcecount ge 4">
                  <set_value name="$MissionLevel" operation="add" exact="$ReqResourcecount"/>
                </do_if>

                <run_actions ref="GetOrConfirmWareDatasToReceiveGive" result="$WareDatasToReceiveGive">
                  <param name="Station"                   value="$TargetStation" />
                  <param name="MaxNumberOfWaresToReceive" value="$MaxNumberOfWaresToReceive" />
                  <param name="ReturnMultiplier"          value="$ReturnMultiplier" />
                  <param name="DebugChance"               value="$DebugChance" />
                </run_actions>
                <set_value name="$WareDatasToReceive"        exact="$WareDatasToReceiveGive.$WareDatasToReceive" />
                <set_value name="$Price_WaresToReceive"      exact="$WareDatasToReceiveGive.$Price_WaresToReceive" />
                <set_value name="$IsReceiveFromFakeBuyOffer" exact="$WareDatasToReceiveGive.$IsReceiveFromFakeBuyOffer" />
                <set_value name="$WareDatasToGive"           exact="$WareDatasToReceiveGive.$WareDatasToGive" />
                <set_value name="$Price_WaresToGive"         exact="$WareDatasToReceiveGive.$Price_WaresToGive" />
                <set_value name="$IsGiveFromFakeSellOffer"   exact="$WareDatasToReceiveGive.$IsGiveFromFakeSellOffer" />
                <set_value name="$ReturnMultiplier"          exact="$WareDatasToReceiveGive.$ReturnMultiplier" />

                <do_if value="$Price_WaresToReceive and $Price_WaresToGive">
                  <set_value name="$Valid" exact="true"/>
                </do_if>
              </do_if>
            </do_if>

            <do_if value="$Valid">
              <add_to_group groupname="GenerateGenericMission.static.$StationsWithBarterMissions" object="$TargetStation" />
              <debug_text text="'GenerateGenericMission.static.$StationsWithBarterMissions.indexof.{' + $TargetStation.knownname + ' ' + $TargetStation.idcode + '}: ' + GenerateGenericMission.static.$StationsWithBarterMissions.indexof.{$TargetStation}" chance="$DebugChance" />
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_1_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_1_Ref" ref="Start">
                  <param    name="OfferObject"               value="$Station"/>
                  <param    name="MissionLevel"              value="$MissionLevel"/>
                  <param    name="Difficulty"                value="$Difficulty"/>
                  <!--param name="Faction"                   value="$Faction"/-->

                  <!--Mission offer-->
                  <param    name="RemoveOnSectorChange"      value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <!--param name="BBSSpace"                  value="$Sector"/-->

                  <!--Mission text-->
                  <param    name="Page"                      value="$Page"/>
                  <param    name="TextOffset"                value="$TextOffset"/>

                  <param    name="MissionDuration"           value="$MissionDuration"/>
                  <param    name="TargetStation"             value="$TargetStation"/>
                  <param    name="WareDatasToReceive"        value="$WareDatasToReceive" />
                  <param    name="WareDatasToGive"           value="$WareDatasToGive" />
                  <param    name="MaxNumberOfWaresToReceive" value="$MaxNumberOfWaresToReceive"/>
                  <param    name="ReturnMultiplier"          value="$ReturnMultiplier"/>

                  <param    name="ReportSignalCue"           value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param    name="DebugChance"               value="@GenerateGenericMission.$DebugChance"/>
                </cue>

              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="GenerateGenericMission_Variant_2" namespace="this" comment="1 x ship_s reward">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$DebugChance" exact="@GenerateGenericMission.$DebugChance"/>
            <set_value name="$MissionLevel" exact="@GenerateGenericMission.$MissionLevel"/>
            <set_value name="$ReturnMultiplier" exact="@GenerateGenericMission.$ReturnMultiplier"/>
            <set_value name="$TargetStation" exact="@GenerateGenericMission.$TargetStation"/>

            <set_value name="$Valid" exact="false"/>
            <do_if value="@$TargetStation.isoperational">
              <set_value name="$Sector" exact="$TargetStation.sector"/>
              <set_value name="$Station" exact="$TargetStation" />
              <set_value name="$Faction" exact="$TargetStation.owner"/>
              <set_value name="$MissionLevel" exact="@GenerateGenericMission.$MissionLevel"/>
              <do_if value="$DebugChance">
                <debug_text text="'$MissionLevel: ' + $MissionLevel" />
                <debug_text text="'$ReturnMultiplier: ' + $ReturnMultiplier" />
                <debug_text text="'$TargetStation: ' + $TargetStation + ' ' + $TargetStation.knownname + ' ' + $TargetStation.idcode" />
                <debug_text text="'$Faction: ' + $Faction" />
              </do_if>
              <include_actions ref="ConfigureDifficulty"
                comment="input: $MissionLevel; output: $MaxNumberOfWaresToReceive, $MissionDuration, $ReturnMultiplier, $Difficulty
                $MissionDuration will return 0 for this variant as partial delivery will result in no reward. " />

              <set_value name="$ValidOffsets" exact="[1000]"/>

              <!-- SelectMissionVariant library (weighted choice and $lastoffertime tracking) -->
              <run_actions ref="md.GenericMissions.SelectMissionVariant" result="$TextOffset_Table">
                <param name="StaticGMCue"    value="md.GM_BarterWares.GenerateGenericMission"/>
                <param name="ValidOffsets"   value="table[{30158} = $ValidOffsets]"/>
              </run_actions>
              <remove_value name="$ValidOffsets" comment="prevent accidental usage to select a different offset"/>
              <set_value name="$Page"         exact="$TextOffset_Table.keys.last"/>
              <set_value name="$TextOffset"   exact="$TextOffset_Table.{$Page}"/>


              <set_value name="$ReqResourcecount" exact="0" />
              <!-- Check if the station isn't already over the MissionStorage Percentage for at least half its wares-->
              <set_value name="$Wares" exact="$TargetStation.resources.list"/>
              <do_all exact="$Wares.count" counter="$WaresCounter">
                <set_value name="$Ware" exact="$Wares.{$WaresCounter}" />
                <do_if value="$TargetStation.cargo.{$Ware}.target gt 0">
                  <set_value name="$WareStoragePercent" exact="($TargetStation.cargo.{$Ware}.count * 100) / $TargetStation.cargo.{$Ware}.target"/>
                  <do_if value="$WareStoragePercent lt 75">
                    <debug_text text="$Ware + ' still required on ' + $TargetStation.knownname" chance="$DebugChance"/>
                    <set_value name="$ReqResourcecount" operation="add" exact="1" />
                  </do_if>
                  <do_else>
                    <debug_text text="'Storage of ' + $TargetStation.knownname + ' already filled with ' + $Ware" chance="$DebugChance"/>
                  </do_else>
                </do_if>
              </do_all>

              <do_if value="($ReqResourcecount ge $Wares.count/2) or ($ReqResourcecount ge 4)">
                <do_if value="$ReqResourcecount ge 4">
                  <set_value name="$MissionLevel" operation="add" exact="$ReqResourcecount"/>
                </do_if>

                <!-- start: find ship_s and duplicate it -->
                <find_ship_by_true_owner name="$ShipToCopy" faction="$TargetStation.owner" space="$TargetStation.sector" class="class.ship_s" />
                <do_if value="not $ShipToCopy">
                  <find_ship name="$ShipToCopy" space="$TargetStation.sector" class="class.ship_s">
                    <match owner="[faction.player, faction.khaak, faction.xenon, faction.ownerless]" negate="true"/>
                  </find_ship>
                </do_if>
                <create_ship name="$ShipReward" macro="$ShipToCopy.macro" zone="$TargetStation" dock="$TargetStation">
                  <owner exact="$TargetStation.owner"/>
                </create_ship>
                <!-- <set_value name="$LoadoutLevel" min="1" max="5" />
                <generate_loadout macro="$ShipToCopy.macro" level="$LoadoutLevel" result="$Loadout" />
                <apply_loadout object="$ShipReward" loadout="$Loadout.{1}" /> -->
                <debug_text text="'$ShipToCopy.loadout: ' + $ShipToCopy.loadout" chance="$DebugChance" />
                <apply_loadout object="$ShipReward" loadout="$ShipToCopy.loadout" />
                <!-- start: find ship_s and duplicate it -->

                <set_value name="$WareDatasToGive" exact="[
                  table[$Ware = $ShipReward, $UnitPrice = $ShipReward.value, $Count_Required = 1, $Count_Delivered = 0]
                ]" />

                <run_actions ref="GetOrConfirmWareDatasToReceiveGive" result="$WareDatasToReceiveGive">
                  <param name="Station"                   value="$TargetStation" />
                  <param name="WareDatasToGive"           value="$WareDatasToGive" />
                  <param name="MaxNumberOfWaresToReceive" value="$MaxNumberOfWaresToReceive" />
                  <param name="ReturnMultiplier"          value="$ReturnMultiplier" />
                  <param name="DebugChance"               value="$DebugChance" />
                </run_actions>
                <set_value name="$WareDatasToReceive"        exact="$WareDatasToReceiveGive.$WareDatasToReceive" />
                <set_value name="$Price_WaresToReceive"      exact="$WareDatasToReceiveGive.$Price_WaresToReceive" />
                <set_value name="$IsReceiveFromFakeBuyOffer" exact="$WareDatasToReceiveGive.$IsReceiveFromFakeBuyOffer" />
                <set_value name="$WareDatasToGive"           exact="$WareDatasToReceiveGive.$WareDatasToGive" />
                <set_value name="$Price_WaresToGive"         exact="$WareDatasToReceiveGive.$Price_WaresToGive" />
                <set_value name="$IsGiveFromFakeSellOffer"   exact="$WareDatasToReceiveGive.$IsGiveFromFakeSellOffer" />
                <set_value name="$ReturnMultiplier"          exact="$WareDatasToReceiveGive.$ReturnMultiplier" />

                <do_if value="$Price_WaresToReceive and $Price_WaresToGive">
                  <set_value name="$Valid" exact="true"/>
                </do_if>
              </do_if>
            </do_if>

            <do_if value="$Valid">
              <add_to_group groupname="GenerateGenericMission.static.$StationsWithBarterMissions" object="$TargetStation" />
              <debug_text text="'GenerateGenericMission.static.$StationsWithBarterMissions.indexof.{' + $TargetStation.knownname + ' ' + $TargetStation.idcode + '}: ' + GenerateGenericMission.static.$StationsWithBarterMissions.indexof.{$TargetStation}" chance="$DebugChance" />
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_2_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_2_Ref" ref="Start">
                  <param    name="OfferObject"               value="$Station"/>
                  <param    name="MissionLevel"              value="$MissionLevel"/>
                  <param    name="Difficulty"                value="$Difficulty"/>
                  <!--param name="Faction"                   value="$Faction"/-->

                  <!--Mission offer-->
                  <param    name="RemoveOnSectorChange"      value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <!--param name="BBSSpace"                  value="$Sector"/-->

                  <!--Mission text-->
                  <param    name="Page"                      value="$Page"/>
                  <param    name="TextOffset"                value="$TextOffset"/>

                  <param    name="MissionDuration"           value="$MissionDuration"/>
                  <param    name="TargetStation"             value="$TargetStation"/>
                  <param    name="WareDatasToReceive"        value="$WareDatasToReceive" />
                  <param    name="WareDatasToGive"           value="$WareDatasToGive" />
                  <param    name="MaxNumberOfWaresToReceive" value="$MaxNumberOfWaresToReceive"/>
                  <param    name="ReturnMultiplier"          value="$ReturnMultiplier"/>

                  <param    name="ReportSignalCue"           value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param    name="DebugChance"               value="@GenerateGenericMission.$DebugChance"/>
                </cue>

              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="GenerateGenericMission_Variant_3" namespace="this" comment="1 x ship_m reward">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$DebugChance" exact="@GenerateGenericMission.$DebugChance"/>
            <set_value name="$MissionLevel" exact="@GenerateGenericMission.$MissionLevel"/>
            <set_value name="$ReturnMultiplier" exact="@GenerateGenericMission.$ReturnMultiplier"/>
            <set_value name="$TargetStation" exact="@GenerateGenericMission.$TargetStation"/>

            <set_value name="$Valid" exact="false"/>
            <do_if value="@$TargetStation.isoperational">
              <set_value name="$Sector" exact="$TargetStation.sector"/>
              <set_value name="$Station" exact="$TargetStation" />
              <set_value name="$Faction" exact="$TargetStation.owner"/>
              <set_value name="$MissionLevel" exact="@GenerateGenericMission.$MissionLevel"/>
              <do_if value="$DebugChance">
                <debug_text text="'$MissionLevel: ' + $MissionLevel" />
                <debug_text text="'$ReturnMultiplier: ' + $ReturnMultiplier" />
                <debug_text text="'$TargetStation: ' + $TargetStation + ' ' + $TargetStation.knownname + ' ' + $TargetStation.idcode" />
                <debug_text text="'$Faction: ' + $Faction" />
              </do_if>
              <include_actions ref="ConfigureDifficulty"
                comment="input: $MissionLevel; output: $MaxNumberOfWaresToReceive, $MissionDuration, $ReturnMultiplier, $Difficulty
                $MissionDuration will return 0 for this variant as partial delivery will result in no reward. " />

              <set_value name="$ValidOffsets" exact="[1000]"/>

              <!-- SelectMissionVariant library (weighted choice and $lastoffertime tracking) -->
              <run_actions ref="md.GenericMissions.SelectMissionVariant" result="$TextOffset_Table">
                <param name="StaticGMCue"    value="md.GM_BarterWares.GenerateGenericMission"/>
                <param name="ValidOffsets"   value="table[{30158} = $ValidOffsets]"/>
              </run_actions>
              <remove_value name="$ValidOffsets" comment="prevent accidental usage to select a different offset"/>
              <set_value name="$Page"         exact="$TextOffset_Table.keys.last"/>
              <set_value name="$TextOffset"   exact="$TextOffset_Table.{$Page}"/>

              <set_value name="$ReqResourcecount" exact="0" />
              <!-- Check if the station isn't already over the MissionStorage Percentage for at least half its wares-->
              <set_value name="$Wares" exact="$TargetStation.resources.list"/>
              <do_all exact="$Wares.count" counter="$WaresCounter">
                <set_value name="$Ware" exact="$Wares.{$WaresCounter}" />
                <do_if value="$TargetStation.cargo.{$Ware}.target gt 0">
                  <set_value name="$WareStoragePercent" exact="($TargetStation.cargo.{$Ware}.count * 100) / $TargetStation.cargo.{$Ware}.target"/>
                  <do_if value="$WareStoragePercent lt 75">
                    <debug_text text="$Ware + ' still required on ' + $TargetStation.knownname" chance="$DebugChance"/>
                    <set_value name="$ReqResourcecount" operation="add" exact="1" />
                  </do_if>
                  <do_else>
                    <debug_text text="'Storage of ' + $TargetStation.knownname + ' already filled with ' + $Ware" chance="$DebugChance"/>
                  </do_else>
                </do_if>
              </do_all>

              <do_if value="($ReqResourcecount ge $Wares.count/2) or ($ReqResourcecount ge 4)">
                <do_if value="$ReqResourcecount ge 4">
                  <set_value name="$MissionLevel" operation="add" exact="$ReqResourcecount"/>
                </do_if>

                <!-- start: find ship_m and duplicate it -->
                <find_ship_by_true_owner name="$ShipToCopy" faction="$TargetStation.owner" space="$TargetStation.sector" class="class.ship_m" />
                <do_if value="not $ShipToCopy">
                  <find_ship name="$ShipToCopy" space="$TargetStation.sector" class="class.ship_m">
                    <match owner="[faction.player, faction.khaak, faction.xenon, faction.ownerless]" negate="true"/>
                  </find_ship>
                </do_if>
                <create_ship name="$ShipReward" macro="$ShipToCopy.macro" zone="$TargetStation" dock="$TargetStation">
                  <owner exact="$TargetStation.owner"/>
                </create_ship>
                <!-- <set_value name="$LoadoutLevel" min="1" max="5" />
                <generate_loadout macro="$ShipToCopy.macro" level="$LoadoutLevel" result="$Loadout" />
                <apply_loadout object="$ShipReward" loadout="$Loadout.{1}" /> -->
                <apply_loadout object="$ShipReward" loadout="$ShipToCopy.loadout" />
                <!-- start: find ship_m and duplicate it -->

                <set_value name="$WareDatasToGive" exact="[
                  table[$Ware = $ShipReward, $UnitPrice = $ShipReward.value, $Count_Required = 1, $Count_Delivered = 0]
                ]" />

                <run_actions ref="GetOrConfirmWareDatasToReceiveGive" result="$WareDatasToReceiveGive">
                  <param name="Station"                   value="$TargetStation" />
                  <param name="WareDatasToGive"           value="$WareDatasToGive" />
                  <param name="MaxNumberOfWaresToReceive" value="$MaxNumberOfWaresToReceive" />
                  <param name="ReturnMultiplier"          value="$ReturnMultiplier" />
                  <param name="DebugChance"               value="$DebugChance" />
                </run_actions>
                <set_value name="$WareDatasToReceive"        exact="$WareDatasToReceiveGive.$WareDatasToReceive" />
                <set_value name="$Price_WaresToReceive"      exact="$WareDatasToReceiveGive.$Price_WaresToReceive" />
                <set_value name="$IsReceiveFromFakeBuyOffer" exact="$WareDatasToReceiveGive.$IsReceiveFromFakeBuyOffer" />
                <set_value name="$WareDatasToGive"           exact="$WareDatasToReceiveGive.$WareDatasToGive" />
                <set_value name="$Price_WaresToGive"         exact="$WareDatasToReceiveGive.$Price_WaresToGive" />
                <set_value name="$IsGiveFromFakeSellOffer"   exact="$WareDatasToReceiveGive.$IsGiveFromFakeSellOffer" />
                <set_value name="$ReturnMultiplier"          exact="$WareDatasToReceiveGive.$ReturnMultiplier" />

                <do_if value="$Price_WaresToReceive and $Price_WaresToGive">
                  <set_value name="$Valid" exact="true"/>
                </do_if>
              </do_if>
            </do_if>

            <do_if value="$Valid">
              <add_to_group groupname="GenerateGenericMission.static.$StationsWithBarterMissions" object="$TargetStation" />
              <debug_text text="'GenerateGenericMission.static.$StationsWithBarterMissions.indexof.{' + $TargetStation.knownname + ' ' + $TargetStation.idcode + '}: ' + GenerateGenericMission.static.$StationsWithBarterMissions.indexof.{$TargetStation}" chance="$DebugChance" />
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_3_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_3_Ref" ref="Start">
                  <param    name="OfferObject"               value="$Station"/>
                  <param    name="MissionLevel"              value="$MissionLevel"/>
                  <param    name="Difficulty"                value="$Difficulty"/>
                  <!--param name="Faction"                   value="$Faction"/-->

                  <!--Mission offer-->
                  <param    name="RemoveOnSectorChange"      value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <!--param name="BBSSpace"                  value="$Sector"/-->

                  <!--Mission text-->
                  <param    name="Page"                      value="$Page"/>
                  <param    name="TextOffset"                value="$TextOffset"/>

                  <param    name="MissionDuration"           value="$MissionDuration"/>
                  <param    name="TargetStation"             value="$TargetStation"/>
                  <param    name="WareDatasToReceive"        value="$WareDatasToReceive" />
                  <param    name="WareDatasToGive"           value="$WareDatasToGive" />
                  <param    name="MaxNumberOfWaresToReceive" value="$MaxNumberOfWaresToReceive"/>
                  <param    name="ReturnMultiplier"          value="$ReturnMultiplier"/>

                  <param    name="ReportSignalCue"           value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param    name="DebugChance"               value="@GenerateGenericMission.$DebugChance"/>
                </cue>

              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <cue name="Debug_BarterWares" namespace="this">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <cues>
        <cue name="Debug_BarterWares_GenerateGenericMission_ReturnMultiplier_2" namespace="this" instantiate="true">
          <conditions>
            <event_cue_signalled />
          </conditions>
          <cues>
            <cue name="Debug_BarterWares_ReportSignalCue" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="$DebugChance" exact="100" />
                <set_value name="$MissionCue" exact="@event.param.$Cue"/>
                <do_if value="@static.$EndFeedbackValue" comment="Evaluate return-value of GM (success/failure)">
                  <debug_text text="'Mission ended. feedback' + static.$EndFeedbackValue" chance="$DebugChance"/>
                  <cancel_cue cue="static.$GM_Wrapper"/>
                  <do_if value="$MissionCue">
                    <remove_from_list name="md.GenericMissions.Manager.$MissionCues" exact="$MissionCue" multiple="false"/>
                  </do_if>
                  <cancel_cue cue="namespace"/>
                </do_if>
                <do_elseif value="@static.$FeedbackValue">
                  <debug_text text="'Mission signalled with feedback' + static.$FeedbackValue" chance="$DebugChance"/>
                  <do_if value="static.$FeedbackValue.$ID == '$MISSION_GENERATED'">
                    <debug_text text="'Generic Mission cue=%s offerobject=`%s` successfully generated. Tracking.'.[[$MissionCue], $MissionCue.$OfferObject.knownname]" chance="$DebugChance"/>
                    <append_to_list name="md.GenericMissions.Manager.$MissionCues" exact="$MissionCue"/>
                  </do_if>
                  <do_elseif value="static.$FeedbackValue.$ID == '$MISSION_NO_VARIANT'">
                    <debug_text text="[$MissionCue] + ' was unable to generate a variant. Aborting'" chance="$DebugChance"/>
                    <cancel_cue cue="namespace"/>
                  </do_elseif>
                </do_elseif>
              </actions>
            </cue>
            <cue name="Debug_BarterWares_RunOnce">
              <actions>
                <debug_text text="event.name" />
                <signal_cue_instantly cue="GenerateGenericMission" param="table[
                                  $Sector = player.sector,
                                  $ReportSignalCue = Debug_BarterWares_ReportSignalCue,
                                  $RemoveOnSectorChange = false,
                                  $DebugChance = 100,
                                  $ReturnMultiplier = 2.0]"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>
  </cues>
</mdscript>
