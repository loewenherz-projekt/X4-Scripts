<?xml version="1.0" encoding="utf-8"?>
<mdscript name="GM_Rescue_Ship" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--Base Mission information-->
    <!--
      Generic Mission name:    Rescue manned ship in minefield by luring mines - intended for Master Missions
      Primary 'missiontype':   missiontype.rescue
      Page: 30138
    
      Based on GM_Clear_Explosives (which is not MM-compatible)
    -->

    <!-- Variant Table -->
    <cue name="TextOffsets" namespace="this">
      <actions>
        <set_value name="$Cue" exact="md.GM_Rescue_Ship.GenerateGenericMission"/>
        <append_to_list name="md.GenericMissions.Manager.$StaticGMCues" exact="$Cue" create="true" unique="true"/>
        <set_value name="$Cue.$TextOffsets" exact="table[]" comment="$Cue.$TextOffsets.{$Page}.{$TextOffset}"/>
        <set_value name="$Cue.$TextOffsets.{30138}"
                   exact="table[ {1000} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1100} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1200} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1300} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1400} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1500} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1600} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1700} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1800} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {1900} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {2000} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {2100} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {2200} = table[$lastoffertime = 0s, $offercounter = 0],
                                 {2300} = table[$lastoffertime = 0s, $offercounter = 0]]"/>
      </actions>
    </cue>

    <!--
      The Feedback Manager contains a table of feedback values related to this Generic Mission. 
		  This table is 'const' during the mission (the table itself doesn't change anymore after inialization)
	    There are several maintypes of feedback:
        event:    Something which happens during a mission but does not cause it to end e.g. the mission being accepted
        removed:  The mission offer was removed before acceptance
        success:  The mission was successfully completed by the player
        failure:  The player failed the mission
        error:    Something went wrong with the mission set-up or during the mission
    -->
    <cue name="FeedbackValueManager" namespace="this" version="4">
      <actions>
        <set_value name="$FeedbackValues" exact="table[
                   $MISSION_GENERATED       = table[$type = 'event',    $text = 'Mission variation generated successfully'],
                   $MISSION_ACCEPTED        = table[$type = 'event',    $text = 'Mission accepted'],
                   $MISSION_NO_VARIANT      = table[$type = 'event',    $text = 'No mission variant currently possible'],
                   
                   $OFFER_REMOVED           = table[$type = 'removed',  $text = 'Offer removed'],
                   $DECLINED_OFFER          = table[$type = 'removed',  $text = 'Player declined Event Offer'],
                   $EVENT_OFFER_TIMEOUT     = table[$type = 'removed',  $text = 'Event Offer timeout'],
                   $SIGNAL_LEAK_REMOVED     = table[$type = 'removed',  $text = 'Signal leak offer removed'],
                   $TARGET_KILLED_EARLY     = table[$type = 'removed',  $text = 'Object was destroyed during the offer'],
                   
                   $MISSION_SUCCEEDED       = table[$type = 'success',  $text = 'Mission succeeded'],
                   
                   $MISSION_ABORTED         = table[$type = 'failure',  $text = 'Mission aborted by player'],
                   $FORCED_CLEANUP          = table[$type = 'failure',  $text = 'Forced to end from outside'],
                   $MISSION_TIMEOUT         = table[$type = 'failure',  $text = 'Mission timeout'],
                   $RML_FAILED              = table[$type = 'failure',  $text = 'RML failure'],
                   
                   $NO_VALID_CLIENT_OWNER   = table[$type = 'error',    $text = 'No valid ClientOwner parameter provided'],
                   $INVALID_OFFER_TYPE      = table[$type = 'error',    $text = 'No offer parameters were valid'],
                   $NO_TEXT_OFFSET          = table[$type = 'error',    $text = 'No TextOffset set'],
                   $INVALID_FACTION_PARAM   = table[$type = 'error',    $text = 'Invalid Faction param'],
                   $INVALID_TARGETS_PARAM   = table[$type = 'error',    $text = 'Invalid targets param'],
                   $INVALID_FORCE_CLEANUP   = table[$type = 'error',    $text = 'ForceCleanup cue invalid'],
                   $EMPTY_TARGETS_PARAM     = table[$type = 'error',    $text = 'No valid targets provided in targets param'],
                   $RML_ERROR               = table[$type = 'error',    $text = 'RML error']
                   ]"/>
      </actions>
      <patch sinceversion="4">
        <!--To patch new feedback values, increment 'version' and 'sinceversion' number-->
        <force_cue cue="FeedbackValueManager"/>
      </patch>
    </cue>

    <!--Required variables: $Page & $TextOffset (and any below substitute_text values)
    If text is to be substituted for a new text variant, people should feel free to add the substitution below. Alternatively, pass in an overriding text in the $TextTable param-->
    <library name="GenerateTextTable">
      <actions>
        <!-- Register unknown TextOffsets to the TextOffsets table -->
        <run_actions ref="md.GenericMissions.RegisterMissionVariant">
          <param name="StaticGMCue" value="md.GM_Rescue_Ship.GenerateGenericMission"/>
          <param name="Page"        value="$Page"/>
          <param name="TextOffset"  value="$TextOffset"/>
        </run_actions>

        <!--Text page indexes $TextOffset + #
        1 = $TextTable.$missionname
        2 = $TextTable.$description
        3 = $TextTable.$hazardname
        -->
        <set_value name="$TextTable.$missionname"   exact="readtext.{$Page}.{$TextOffset + 1}" chance="if $TextTable.$missionname? then 0 else 100"/>
        <set_value name="$TextTable.$hazardname"    exact="readtext.{$Page}.{$TextOffset + 3}" chance="if $TextTable.$hazardname? then 0 else 100"/>
        <set_value name="$TextTable.$description"   exact="readtext.{$Page}.{$TextOffset + 2}" chance="if $TextTable.$description? then 0 else 100"/>

        <run_actions ref="md.LIB_Generic.GenerateTextTable_BriefingWarning_Call" result="$TextTable.$description">
          <param name="BriefingText" value="$TextTable.$description"/>
          <param name="TargetSpace" value="if $SalvageShip.exists then $SalvageShip.sector else $TargetSector"/>
        </run_actions>

        <do_if value="not $TextTable.$leaveminefield?">
          <set_value name="$TextTable.$leaveminefield" exact="@readtext.{$Page}.{$TextOffset + 4}"/>
        </do_if>

        <do_if value="not $TextTable.$assumecontrol?">
          <set_value name="$TextTable.$assumecontrol" exact="@readtext.{$Page}.{$TextOffset + 5}"/>
        </do_if>

        <do_if value="not $TextTable.$dockspacesuit?">
          <set_value name="$TextTable.$dockspacesuit" exact="@readtext.{$Page}.{$TextOffset + 6}"/>
        </do_if>

        <do_if value="not $TextTable.$returnship?">
          <set_value name="$TextTable.$returnship" exact="@readtext.{$Page}.{$TextOffset + 7}"/>
        </do_if>

        <do_if value="not $TextTable.$transfer_accept?">
          <set_value name="$TextTable.$transfer_accept" exact="@readtext.{$Page}.{$TextOffset + 11}"/>
        </do_if>

        <do_if value="not $TextTable.$transfer_decline?">
          <set_value name="$TextTable.$transfer_decline" exact="@readtext.{$Page}.{$TextOffset + 12}"/>
        </do_if>
      </actions>
    </library>

    <library name="GenerateVoiceTable">
      <actions>
        <run_actions ref="md.LIB_Generic.GenerateGenericVoiceTable" result="$VoiceTable">
          <param name="VoiceTable" value="$VoiceTable"/>
        </run_actions>
      </actions>
    </library>

    <library name="Start" version="4">
      <params>
        <!-- Generic Parameters -->
        <param name="OfferObject" default="null" comment="The object on which this mission is based e.g. A Ship / Station / Signal Leak. Only needed for missions with a physical location."/>
        <param name="Client" default="null" comment="Pre-existing client"/>
        <param name="ClientOwner" default="null" comment="Overriding owner for reward calculation or creation of $Client if not provided. Defaults to $OfferObject owner if able"/>
        <param name="MissionCue" default="null" comment="Cue the mission is attached to. Defaults to Start (this)."/>
        <param name="MissionThread" default="null" comment="Mission thread for the offer and mission"/>

        <param name="GenerateReward" default="true" comment="If RewardCr or RewardNotoriety are invalid, generate them?"/>
        <param name="RewardCr" default="null" comment="If the reward for this mission is credits, the number of credits should be set to this variable." />
        <param name="RewardObj" default="null" comment="If the reward for this mission is not credits, and is an object, it should be set to this variable." />
        <param name="RewardNotoriety" default="null"/>
        <param name="RewardText" default="null"  comment="Any text needed to define the reward for this mission - may be used in conjunction with $RewardCr and $RewardObj." />
        <param name="MissionDuration" default="null"/>
        <param name="MissionType" default="missiontype.rescue" comment="Variations can override mission type if required"/>
        <param name="MissionLevel"/>
        <param name="Difficulty"/>

        <!--Offer location and conversation-->
        <param name="WithoutOffer" default="false" comment="Do not create a mission offer. Either run immediatly or wait for WithoutOfferWaitCue"/>
        <param name="WithoutOfferWaitCue" default="null" comment="Do not create a mission offer but wait for this cue to be completed before running the mission"/>
        <param name="AcceptOnRescueShipDiscovery" default="false" comment="Accept the mission if the player gets into close proximity with the salvage ship"/>
        <param name="DeclineButton" default="true" comment="Have a decline button instead of a back button in the offer conversation"/>
        <param name="EventOffer" default="false" comment="Is the mission offered directly to the player with an interactive event"/>
        <param name="ConversationOffer" default="false" comment="When $EventOffer is false, should this offer be through a conversation with the $Client. Otherwise, offer at mission location"/>
        <param name="ConversationTriggerCue" default="null" comment="If provided, when this cue is signalled, start the mission offer conversation."/>
        <param name="OfferMaxDistance" default="null" comment="Maximum distance to OfferObject before it is cleaned up. null = do not check"/>
        <param name="HideFromBBS" default="false" comment="Hide this offer from the BBS? Show only through locations or special conversation handling."/>
        <param name="RemoveOnSectorChange" default="true"/>
        <param name="OfferDistance" default="50km" comment="Distance to the offer location before it becomes visible on the map or BBS (unless otherwise hidden)"/>

        <!--BBS only params-->
        <param name="BBSObject" default="null"/>
        <param name="BBSDistance" default="null"/>
        <param name="BBSTimeoutMin" default="null"/>
        <param name="BBSTimeoutMax" default="null"/>
        <param name="BBSSpace" default="null"/>

        <!--Mission text-->
        <param name="Page"        comment="Allows a different text page to be used instead of the generic one. Text IDs must be mapped similarly."/>
        <param name="TextOffset"  comment="The text offset for this variant's text on the page.
               Each variant starts at a different offset, but the entries[] within that offset have to match for all variants."/>
        <param name="TextTable" default="table[]" comment="Table, usually populated by the mission, to store the texts by an identifier key e.g. $missionname = 'Kill Bala Gi'
               Check library 'GenerateTextTable' for identifier keys. Pass in a table with such an entry to override the text usually generated from the $Page and $TextOffset"/>
        <param name="VoiceTable" default="table[]" comment="Table, usually populated by the mission, keys can have a value of 0 (=stay silent)"/>

        <!-- Optional mission setup overrides -->
        <param name="Faction"                            comment="" />
        <param name="SalvageShip"         default="null" comment="Ship to rescue" />
        <param name="Hostiles"                           comment="Group of mines"/>
        <param name="TargetSector"        default="null" comment="Useful in case of postInit of the salvageship"/>

        <param name="ReportActivateCue"   default="null" comment="Cue to signal when the Activate-cue is signalled, for creating of salvageship/mines"/>
        <param name="ReportSignalCue"     default="null" comment="Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue"/>
        <param name="CancelOfferCue"      default="null" comment="Cue which when completed will force this missions offer to be removed and cleaned up. No effect if mission has been accepted."/>
        <param name="ForceCleanup"        default="null" comment="Cue to force a cleanup from outside when completed"/>
        <param name="DebugChance"         default="0"/>
      </params>
      <actions>
        <!--Feedback value setup-->
        <set_value name="$Feedback" exact="null"/>
        <set_value name="$FeedbackManager" exact="md.GM_Rescue_Ship.FeedbackValueManager"/>

        <assert value="$WithoutOffer or not $MissionCue or (not $MissionCue.hasmission and not $MissionCue.hasmissionoffer)"
                text="'Mission is set to create an offer but provided MissionCue: ' + $MissionCue + ' already has an offer or is a running mission [Owen]'"/>

        <!--Param validation-->
        <do_if value="not $WithoutOffer">
          <!--Optional variables (at least one should exist): $OfferObject, (bool)$HideFromBBS, (bool)$ConversationOffer, (bool)$EventOffer
          Result variables:
          $OfferType = 'signalleak' OR 'objectbased' OR 'eventoffer' OR 'conversationoffer'
          $AllowOfferEvent = Will an event offering this event be also fired immediatly?-->
          <include_actions ref="md.GenericMissions.GetOfferType"/>
          <do_if value="not $OfferType">
            <set_value name="$Feedback" exact="'$INVALID_OFFER_TYPE'"/>
          </do_if>
        </do_if>

        <do_if value="not $Feedback">
          <do_if value="not $TextOffset">
            <set_value name="$Feedback" exact="'$NO_TEXT_OFFSET'"/>
          </do_if>
          <do_else>
            <do_if value="$Client">
              <set_value name="$PreexistingClient"/>
            </do_if>
            <do_if value="not $ClientOwner">
              <set_value name="$ClientOwner" exact="if $Client then $Client.owner else @$OfferObject.owner"/>
              <assert value="$ClientOwner" text="'No valid $ClientOwner [Owen]'"/>
            </do_if>

            <do_if value="not $ClientOwner">
              <set_value name="$Feedback" exact="'$NO_VALID_CLIENT_OWNER'"/>
            </do_if>
            <do_else>
              <!--Mission specific param checks-->
              <do_if value="typeof $Faction != datatype.faction">
                <set_value name="$Feedback" exact="'$INVALID_FACTION_PARAM'"/>
              </do_if>
              <do_if value="not $Hostiles">
                <do_if value="not $ReportActivateCue" comment="Hostiles initialized later">
                  <set_value name="$Feedback" exact="'$INVALID_TARGETS_PARAM'"/>
                </do_if>
              </do_if>
              <do_else>
                <do_if value="not $ReportActivateCue" comment="Hostiles initialized later">
                  <set_value name="$HasValidObject" exact="false"/>
                  <do_all exact="$Hostiles.count" counter="$i">
                    <do_if value="$Hostiles.{$i}.isrealclass.object or $Hostiles.{$i}.object.exists">
                      <set_value name="$HasValidObject" exact="true"/>
                      <break/>
                    </do_if>
                  </do_all>
                  <do_if value="not $HasValidObject">
                    <set_value name="$Feedback" exact="'$EMPTY_TARGETS_PARAM'"/>
                  </do_if>
                </do_if>
              </do_else>
            </do_else>
          </do_else>
        </do_if>
      </actions>
      <patch sinceversion="2">
        <set_value name="$VoiceTable" exact="table[]"/>
      </patch>
      <patch sinceversion="3">
        <run_actions ref="md.LIB_Generic.GenerateGenericVoiceTable" result="$VoiceTable">
          <param name="VoiceTable" value="$VoiceTable"/>
        </run_actions>
      </patch>
      <patch sinceversion="4">
        <set_value name="$AcceptOnRescueShipDiscovery" exact="false"/>
      </patch>
      <cues>
        <cue name="Do_Not_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="$Feedback"/>
          </conditions>
          <actions>
            <signal_cue cue="CleanUp"/>
          </actions>
        </cue>

        <cue name="Do_Start_Mission" onfail="cancel">
          <conditions>
            <check_value value="not $Feedback"/>
          </conditions>
          <actions>
            <do_if value="not $MissionCue">
              <set_value name="$MissionCue" exact="Start"/>
            </do_if>

            <do_if value="not $PreexistingClient?">
              <!-- No pre-existing client, create a temporary client for this mission -->
              <!-- This auto-assigns a 'matching' text-page using the metadata (id=0) specified in the text-files. Speak commands for this actor will then refer to the selected text-page-->
              <!-- Possibly we'll need to add additional filters (in case some topics aren't supported by all generic text-pages) -->
              <create_cue_actor cue="Start" name="$Client" comment="temporary cue-actor will be cleaned up in the Cleanup-cue, see destroy_object on $Client">
                <select faction="$ClientOwner" tags="tag.crew"/>
                <owner exact="$ClientOwner"/>
              </create_cue_actor>
            </do_if>

            <!-- Determine the reward (credits/object/notoriety) -->
            <do_if value="$GenerateReward">
              <include_actions ref="md.LIB_Reward_Balancing.Allocate_RewardWeight" comment="input: $Difficulty, $ClientOwner; output: $RewardCreditsWeight, $RewardModWeight, $RewardSeminarWeight"/>
              <do_if value="not $RewardCr" weight="$RewardCreditsWeight">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Money" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]" comment="basic reward credits"/>
                <include_actions ref="md.LIB_Reward_Balancing.Apply_RewardMultiplier" comment="signal leak and mission thread bonus"/>
                <set_value name="$RewardCr" exact="$Reward_Money__Result_Multiplied"/>
              </do_if>
              <do_if value="not $RewardObj">
                <run_actions ref="md.LIB_Reward_Balancing.DetermineAdditionalReward" result="$AdditionalReward">
                  <param name="RewardModWeight" value="$RewardModWeight"/>
                  <param name="RewardSeminarWeight" value="$RewardSeminarWeight"/>
                </run_actions>
                <do_if value="$AdditionalReward != null">
                  <set_value name="$RewardObj" exact="$AdditionalReward"/>
                  <set_value name="$RewardText" exact="$RewardObj.name"/>
                </do_if>
              </do_if>

              <do_if value="not $RewardNotoriety">
                <signal_cue_instantly cue="md.LIB_Reward_Balancing.Reward_Notoriety" param="[Start, $Difficulty, $MissionLevel, $ClientOwner]"/>
                <set_value name="$RewardNotoriety" exact="$Reward_Notoriety__Result"/>
              </do_if>
            </do_if>

            <include_actions ref="GenerateTextTable"/>
            <include_actions ref="GenerateVoiceTable"/>

            <do_if value="$ReportSignalCue">
              <!--Signal the $ReportSignalCue that the mission has been successfully generated-->
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_GENERATED.clone"/>
              <set_value name="$FeedbackData.$ID" exact="'$MISSION_GENERATED'"/>
              <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission variation generated successfully"/>
              <signal_cue_instantly cue="$ReportSignalCue" param="table[$Name = $TextTable.$missionname, $Cue = $MissionCue, $Reward = $RewardCr, $RewardText = $RewardText]"/>
            </do_if>
          </actions>
          <cues>

            <!--***MISSION OFFER***-->
            <cue name="With_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer" exact="false"/>
              </conditions>
              <cues>
                <!--Cue which creates the offer, when signalled. To be signalled from the GenericMissions.OfferMission library, referenced below-->
                <cue name="CreateOffer" instantiate="true" comment="instanced to prevent cleanup">
                  <conditions>
                    <event_cue_signalled/>
                    <check_value value="not @$OfferCreated"/>
                  </conditions>
                  <actions>
                    <do_if value="not @$OfferCreated">

                      <!-- Briefing details -->
                      <create_offer cue="$MissionCue" location="$OfferObject" distance="$OfferDistance" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" actor="$Client" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText" duration="$MissionDuration" hidden="$HideFromBBS" space="$BBSSpace">
                        <briefing comment="duplicated, see MissionAccepted!">
                          <objective step="1" action="objective.destroy" text="$TextTable.$hazardname" group="$Hostiles" />
                        </briefing>
                      </create_offer>
                      <!-- Offers might be outside the $OfferDistance (default 50km) and not seen by players but still count up -->
                      <run_actions ref="md.GenericMissions.UpdateTextOffsetsTable">
                        <param name="StaticGMCue" value="md.GM_Rescue_Ship.GenerateGenericMission"/>
                        <param name="Page"        value="$Page"/>
                        <param name="TextOffset"  value="$TextOffset"/>
                      </run_actions>

                    </do_if>
                    <set_value name="$OfferCreated" exact="true"/>
                  </actions>
                </cue>

                <!--The majority of the offer logic is within this library. The parameters we pass down below, specify in which way this mission is going to be offered to the player (i.e. BBS, Signal-Leak, ...)
                Some of the mission specific handling is still contained in this file but triggered via the library via a signal e.g. setting up the briefing details via the 'CreateOffer' cue above.-->
                <cue name="Offer_Management" ref="md.GenericMissions.OfferMission">
                  <param name="OfferType"     value="$OfferType"/>
                  <param name="OfferCue"      value="$MissionCue"/>
                  <param name="CleanupCue"    value="Offer_End"/>
                  <param name="BriefingSetupCue" value="CreateOffer"/>
                  <param name="MissionName"   value="$TextTable.$missionname"/>
                  <param name="CancelOfferCue" value="$CancelOfferCue"/>

                  <!--Object based params (offered by Station/Ship/Signal-leak)-->
                  <param name="TimeoutMin"  value="8min" comment="Minimum time the offer remains valid"/>
                  <param name="TimeoutMax"  value="12min"/>
                  <param name="MaxDistance" value="$OfferMaxDistance"/>
                  <param name="RemoveOnSectorChange" value="$RemoveOnSectorChange"/>

                  <!--Object and Signal Leak based params-->
                  <param name="OfferObject" value="$OfferObject"/>

                  <!--BBS based offers-->
                  <param name="BBSObject"     value="@$BBSObject"/>
                  <param name="BBSDistance"   value="@$BBSDistance"/>
                  <param name="BBSTimeoutMin" value="@$BBSTimeoutMin"/>
                  <param name="BBSTimeoutMax" value="@$BBSTimeoutMax"/>

                  <!--Conversation event offers-->
                  <param name="AllowOfferEvent" value="$AllowOfferEvent"/>
                  <param name="ConversationTriggerCue" value="$ConversationTriggerCue"/>

                  <!--Client-->
                  <param name="Client"                 value="$Client"/>
                  <param name="VoiceTable"             value="$VoiceTable"/>

                  <param name="DebugChance" value="$DebugChance"/>
                </cue>

                <!--Cue signalled when the offer library is finished-->
                <cue name="Offer_End">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <do_if value="this.$Feedback.$ID == '$accepted_offer'">
                      <signal_cue cue="MissionAccepted"/>
                    </do_if>
                    <do_elseif value="this.$Feedback.$ID == '$DECLINED_OFFER'">
                      <set_value name="$Feedback" exact="'$DECLINED_OFFER'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$OFFER_REMOVED'">
                      <set_value name="$Feedback" exact="'$OFFER_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$SIGNAL_LEAK_REMOVED'">
                      <set_value name="$Feedback" exact="'$SIGNAL_LEAK_REMOVED'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                    <do_elseif value="this.$Feedback.$ID == '$EVENT_OFFER_TIMEOUT'">
                      <set_value name="$Feedback" exact="'$EVENT_OFFER_TIMEOUT'"/>
                      <signal_cue cue="CleanUp" />
                    </do_elseif>
                  </actions>
                </cue>
              </cues>
            </cue>

            <!--These cues handle the cases where a mission is automatically accepted on creation-->
            <cue name="Without_Offer" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="not $WithoutOfferWaitCue"/>
                <check_value value="not $AcceptOnRescueShipDiscovery"/>
              </conditions>
              <actions>
                <signal_cue cue="MissionAccepted" />
              </actions>
            </cue>

            <cue name="Without_Offer_Wait_Cue" onfail="cancel">
              <conditions>
                <check_value value="$WithoutOffer"/>
                <check_value value="$WithoutOfferWaitCue"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Wait_Cue_Completed">
                  <conditions>
                    <check_any>
                      <event_cue_completed cue="$WithoutOfferWaitCue"/>
                      <check_all>
                        <event_cue_signalled cue="$WithoutOfferWaitCue"/>
                        <check_value value="event.param == $MissionCue"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <signal_cue_instantly cue="MissionAccepted" />
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="Without_Offer_Accept_On_Proximity" onfail="cancel">
              <conditions>
                <check_value value="$AcceptOnRescueShipDiscovery"/>
              </conditions>
              <cues>
                <cue name="Without_Offer_Proximity_Check" checkinterval="2s">
                  <conditions>
                    <check_value value="player.entity.distanceto.{$SalvageShip} le 20km"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="MissionAccepted" />
                    <do_if value="Without_Offer_Wait_Cue.state == cuestate.complete">
                      <cancel_cue cue="Without_Offer_Wait_Cue"/>
                    </do_if>
                  </actions>
                </cue>

              </cues>
            </cue>

            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)
            note: play_cutscene action should not be in the actions of the cue with a event_briefing_submission_selected condition. It must be delayed-->
            <!--These cues handle the briefing presentations e.g. Holomap or cutscene render targets (depending on the mission)
            note: play_cutscene action should not be in the actions of the cue with a event_briefing_submission_selected condition. It must be delayed-->
            <cue name="BriefingStarted">
              <conditions>
                <check_any>
                  <event_briefing_started cue="Start"/>
                  <event_briefing_submission_selected cue="Start"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$RenderTarget" exact="event.param.{1}"/>
                <set_value name="$StartBriefingCutscene"/>
                <debug_text text="'Briefing started'" chance="$DebugChance"/>
              </actions>
              <cues>
                <cue name="DisplayCutscene" onfail="cancel">
                  <conditions>
                    <check_value value="$StartBriefingCutscene?"/>
                  </conditions>
                  <actions>
                    <create_presentation_cluster name="$CutsceneCluster"/>
                    <find_sector name="$CutsceneSector" space="$CutsceneCluster"/>

                    <!-- If the player must salvage a ship -->
                    <do_if value="$SalvageShip">
                      <set_value name="$CutsceneObject" exact="$SalvageShip"/>
                    </do_if>
                    <!-- Else, show one of the mines in the cutscene -->
                    <do_elseif value="$Hostiles.count">
                      <set_value name="$CutsceneObject" exact="$Hostiles.{1}"/>
                    </do_elseif>
                    <do_else>
                      <create_object name="$CutsceneObject" macro="macro.weapon_gen_mine_01_a_macro" sector="$CutsceneSector">
                        <position x="0" y="0" z="0"/>
                      </create_object>
                      <set_value name="$TempMine"/>
                    </do_else>

                    <set_value name="$BriefingCutsceneStarted"/>

                    <set_value name="$CutsceneKey" exact="'OrbitIndefinitely'"/>
                    <play_cutscene key="$CutsceneKey" rendertarget="$RenderTarget">
                      <param name="targetobject" object="$CutsceneObject"/>
                    </play_cutscene>
                  </actions>
                </cue>

                <cue name="BriefingStopped">
                  <conditions>
                    <check_any>
                      <event_briefing_cancelled cue="Start"/>
                      <event_briefing_submission_unselected cue="Start"/>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="$BriefingCutsceneStarted?">
                      <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
                      <remove_value name="$BriefingCutsceneStarted"/>

                      <stop_cutscene key="$CutsceneKey"/>

                      <do_if value="$TempMine?">
                        <destroy_object object="$CutsceneObject"/>
                        <remove_value name="$TempMine"/>
                      </do_if>
                      <do_if value="$CutsceneCluster.exists">
                        <destroy_object object="$CutsceneCluster"/>
                      </do_if>
                    </do_if>

                    <do_if value="$HoloMap?">
                      <remove_holomap />
                      <remove_value name="$HoloMap"/>
                    </do_if>

                    <debug_text text="'Briefing canceled'" chance="$DebugChance"/>
                    <reset_cue cue="BriefingStarted"/>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="TargetDestroyedPrematurely">
              <conditions>
                <event_object_destroyed object="$SalvageShip" check="false"/>
              </conditions>
              <actions>
                <!-- If ship to be rescued got destroyed early, the mission fails -->
                <do_if value="MissionAccepted.state == cuestate.complete">
                  <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, {30004,6027}]"/>
                </do_if>
                <set_value name="$Feedback" exact="'$TARGET_KILLED_EARLY'"/>
                <signal_cue cue="CleanUp"/>
              </actions>
            </cue>

            <!--This cue creates the mission itself, either from scratch or via an existing mission offer-->
            <cue name="MissionAccepted">
              <conditions>
                <event_cue_signalled />
              </conditions>
              <actions>
                <debug_text text="'Mission accepted!'" chance="$DebugChance"/>
                <set_value name="stat.missions_accepted" operation="add"/>

                <do_if value="$WithoutOffer">
                  <!--$MissionCue may already be a mission cue passed in as a parameter-->
                  <do_if value="not $MissionCue.hasmission">
                    <do_if value="$MissionThread">
                      <create_mission cue="$MissionCue" missionthread="$MissionThread" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_if>
                    <do_else>
                      <create_mission cue="$MissionCue" name="$TextTable.$missionname" description="$TextTable.$description" difficulty="$Difficulty" faction="$ClientOwner" type="$MissionType" reward="$RewardCr" rewardtext="$RewardText"/>
                    </do_else>
                  </do_if>

                  <set_value name="$StartStep" exact="1"/>

                  <update_mission cue="$MissionCue">
                    <briefing comment="duplicated, see CreateOffer!">
                      <objective step="$StartStep" action="objective.destroy" text="$TextTable.$hazardname" group="$Hostiles" />
                    </briefing>
                  </update_mission>

                </do_if>
                <do_else>
                  <!--Copy data from the offer, then remove it-->
                  <do_if value="$MissionThread">
                    <create_mission cue="$MissionCue" offercue="$MissionCue" missionthread="$MissionThread"/>
                  </do_if>
                  <do_else>
                    <create_mission cue="$MissionCue" offercue="$MissionCue"/>
                  </do_else>
                  <remove_offer cue="$MissionCue"/>
                  <cancel_cue cue="With_Offer"/>
                </do_else>

                <do_if value="$ReportSignalCue">
                  <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_ACCEPTED.clone"/>
                  <set_value name="$FeedbackData.$ID" exact="'$MISSION_ACCEPTED'"/>
                  <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="Mission accepted"/>
                  <signal_cue_instantly cue="$ReportSignalCue"/>
                </do_if>

                <signal_cue_instantly cue="md.GenericMissions.GenericAcceptLogbookEntry" param="[$TextTable.$missionname, $Client, $ClientOwner]"/>
              </actions>
              <cues>
                <cue name="ActivateImmediately" onfail="cancel">
                  <conditions>
                    <check_value value="not $MissionThread"/>
                  </conditions>
                  <actions>
                    <signal_cue cue="ActivateMission"/>
                  </actions>
                </cue>

                <cue name="ActivateOnCondition" onfail="cancel">
                  <conditions>
                    <check_value value="$MissionThread"/>
                  </conditions>
                  <actions>
                    <do_if value="$MissionThread.canactivatesubmission.{$MissionCue}">
                      <signal_cue cue="ActivateMission"/>
                      <cancel_cue cue="ActivateOnCondition"/>
                    </do_if>
                  </actions>
                  <cues>
                    <!--TODO @Owen add an event for when a submission has been removed from the thread-->
                    <cue name="CheckMissionThreadState" checkinterval="1s">
                      <conditions>
                        <check_value value="$MissionThread.canactivatesubmission.{$MissionCue}"/>
                      </conditions>
                      <actions>
                        <signal_cue cue="ActivateMission"/>
                        <cancel_cue cue="ActivateOnCondition"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="ActivateMission" version="3">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <cancel_cue cue="TargetDestroyedPrematurely"/>

                    <do_if value="$ReportActivateCue">
                      <signal_cue_instantly cue="$ReportActivateCue" param="this"/>
                      <!-- copy from local variables (to which the callback wrote), to "global cue" -->
                      <set_value name="$SalvageShip" exact="this.$SalvageShip"/>
                      <add_to_group groupname="$Hostiles" group="this.$Hostiles"/>
                    </do_if>

                    <do_if value="not $SalvageShip or not $Hostiles.count">

                      <do_if value="$SalvageShip">
                        <create_order id="'MoveDie'" object="$SalvageShip" immediate="true"/>
                      </do_if>

                      <do_if value="$Hostiles.count">
                        <destroy_group group="$Hostiles"/>
                      </do_if>

                      <set_value name="$Feedback" exact="'$INVALID_TARGETS_PARAM'"/>
                      <signal_cue cue="CleanUp" />
                    </do_if>

                    <do_if value="$MissionDuration">
                      <update_mission cue="$MissionCue" endtime="player.age + $MissionDuration"/>
                    </do_if>
                  </actions>
                  <patch sinceversion="2" state="complete">
                    <do_if value="$Feedback">
                      <signal_cue cue="CleanUp" />
                    </do_if>
                  </patch>
                  <patch sinceversion="3">
                    <set_object_signal_response object="$SalvageShip" signal="'policehalt'" response="'comply'"/>
                  </patch>
                  <cues>

                    <!-- Trigger the RML, which will check the win/lose conditions and report back -->
                    <cue name="RescueShip" ref="md.RML_RescueShip.RescueShip">
                      <param name="EndSignalCue"              value="MissionEnded"/>
                      <param name="MissionCue"                value="$MissionCue"/>
                      <param name="Text_HazardName"           value="$TextTable.$hazardname"/>
                      <param name="StartStep"                 value="1"/>
                      <param name="Client"                    value="$Client" />
                      <param name="Faction"                   value="$Faction" />
                      <param name="Hostiles"                  value="$Hostiles" />
                      <param name="SalvageShip"               value="$SalvageShip" />
                      <param name="DebugChance"               value="$DebugChance"/>
                    </cue>

                    <cue name="MissionEnded">
                      <conditions>
                        <event_cue_signalled/>
                      </conditions>
                      <actions>
                        <!-- Failure case -->
                        <do_if value="MissionEnded.$EndFeedbackValue" max="0">
                          <debug_text text="'This mission has failed. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <set_value name="$Feedback" exact="'$RML_FAILED'"/>
                          <speak actor="$Client" line="$VoiceTable.$MissionFailed" comment="(failed mission)" chance="if $VoiceTable.$MissionFailed == 0 then 0 else 100" />
                          <signal_cue_instantly cue="md.GenericMissions.GenericFailLogbookEntry" param="[$TextTable.$missionname, $Client, @MissionEnded.$EndFeedbackText]"/>

                          <remove_mission cue="$MissionCue" type="failed" />

                        </do_if>

                        <!-- Success case -->
                        <do_else>
                          <!--TODO: Partial success-->
                          <debug_text text="'This mission has ended. RML Feedback: ' + MissionEnded.$EndFeedbackValue" chance="$DebugChance"/>
                          <do_if value="$RewardNotoriety and $ClientOwner">
                            <debug_text text="'Relation was: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                            <add_faction_relation faction="faction.player" otherfaction="$ClientOwner" value="$RewardNotoriety" reason="relationchangereason.missioncompleted" />
                            <debug_text text="'Relation is now: ' + player.entity.relationto.{$ClientOwner}" chance="$DebugChance"/>
                          </do_if>

                          <do_if value="$RewardCr">
                            <reward_player money="$RewardCr" />
                          </do_if>
                          <do_if value="$RewardObj">
                            <do_if value="$RewardObj.isinventory">
                              <add_inventory entity="player.entity" ware="$RewardObj" />
                              <show_notification text="[{1015,100}, '', $RewardText]" sound="notification_achievement" comment="Item received" />
                            </do_if>
                          </do_if>
                          <set_value name="stat.missions_completed" operation="add"/>
                          <set_value name="$Feedback" exact="'$MISSION_SUCCEEDED'"/>
                          <speak actor="$Client" line="$VoiceTable.$MissionSuccess" comment="(successful mission)" chance="if $VoiceTable.$MissionSuccess == 0 then 0 else 100" />
                          <signal_cue_instantly cue="md.GenericMissions.GenericCompleteLogbookEntry" param="[$TextTable.$missionname, $Client, null, $RewardCr]"/>

                          <run_actions ref="md.GenericMissions.UpdateTextOffsetsTable_completedcounter">
                            <param name="StaticGMCue" value="md.GM_Rescue_Ship.GenerateGenericMission"/>
                            <param name="Page"        value="$Page"/>
                            <param name="TextOffset"  value="$TextOffset"/>
                          </run_actions>

                          <remove_mission cue="$MissionCue" type="completed" activate="next" />

                        </do_else>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="Aborted">
                      <conditions>
                        <event_mission_aborted cue="$MissionCue"/>
                      </conditions>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericAbortLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <set_value name="$Feedback" exact="'$MISSION_ABORTED'"/>
                        <remove_mission cue="$MissionCue" type="aborted"/>
                        <signal_cue cue="CleanUp" />
                      </actions>
                    </cue>

                    <cue name="MissionTimeout" onfail="cancel">
                      <conditions>
                        <check_value value="typeof $MissionDuration == datatype.time"/>
                        <check_value value="$MissionDuration" min="1s"/>
                      </conditions>
                      <delay exact="$MissionDuration"/>
                      <actions>
                        <signal_cue_instantly cue="md.GenericMissions.GenericTimeoutLogbookEntry" param="[$TextTable.$missionname, $Client]"/>

                        <!-- Player didn't transfer back the ship (in time) to original faction (effectively stealing the object), resulting in a heavy reputation loss with that faction.  -->
                        <add_faction_relation faction="$Faction" otherfaction="faction.player" value="-0.15" reason="relationchangereason.boardedobject"/>

                        <remove_mission cue="$MissionCue" type="failed"/>
                        <set_value name="$Feedback" exact="'$MISSION_TIMEOUT'"/>
                        <signal_cue_instantly cue="CleanUp" />
                      </actions>
                    </cue>

                  </cues>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <cue name="ForceCleanup" onfail="cancel">
          <conditions>
            <check_value value="$ForceCleanup"/>
          </conditions>
          <actions>
            <do_if value="not $ForceCleanup.exists">
              <set_value name="$Feedback" exact="'$INVALID_FORCE_CLEANUP'"/>
              <signal_cue_instantly cue="CleanUp"/>
            </do_if>
          </actions>
          <cues>
            <cue name="ForceCleanup_Wait">
              <conditions>
                <check_any>
                  <event_cue_completed cue="$ForceCleanup"/>
                  <check_all>
                    <event_cue_signalled cue="$ForceCleanup"/>
                    <check_value value="event.param == $MissionCue"/>
                  </check_all>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$Feedback" exact="'$FORCED_CLEANUP'"/>
                <signal_cue_instantly cue="CleanUp"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--Temp value. This is used to identify if a cutscene for this mission is still playing.-->
            <do_if value="$BriefingCutsceneStarted?">
              <remove_value name="$BriefingCutsceneStarted"/>
              <stop_cutscene key="$CutsceneKey"/>

              <do_if value="$CutsceneCluster.exists">
                <destroy_object object="$CutsceneCluster"/>
              </do_if>
              <do_if value="$CutsceneShip.exists">
                <destroy_object object="$CutsceneShip"/>
              </do_if>
            </do_if>
            <do_if value="$HoloMap?">
              <remove_holomap />
              <remove_value name="$HoloMap"/>
            </do_if>


            <!--***Cleanup objects***-->

            <!--No .exists check here as $Client may not be connected to gamegraph-->
            <do_if value="$Client.isclass.npc and (not $PreexistingClient?)">
              <destroy_object object="$Client" comment="cleanup the client we created with create_cue_actor"/>
            </do_if>

            <!--***Evaluate result***-->

            <do_if value="$DebugChance or $ReportSignalCue">
              <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.{$Feedback}.clone"/>
              <do_if value="$FeedbackData">
                <set_value name="$FeedbackData.$ID" exact="$Feedback"/>
                <debug_text text="'Mission ended with reason: ' + $FeedbackData.$type + ' - ' + $FeedbackData.$text" chance="$DebugChance"/>
              </do_if>
              <do_else>
                <set_value name="$FeedbackData" exact="table[$ID = 'error_unknown', $type = 'error', $text = 'This is an unknown error']" comment="feedback = id, type and error-text from the above FeedbackValues-table"/>
                <assert value="false" text="'Mission ended with unknown case: ' + $Feedback + ' [Owen]'" break="1"/>
              </do_else>

              <do_if value="$ReportSignalCue" comment ="The cue which called us">
                <set_value name="$ReportSignalCue.$EndFeedbackValue" exact="$FeedbackData" comment="return feedback-data to calling cue"/>
                <signal_cue cue="$ReportSignalCue"/>
              </do_if>
            </do_if>

            <cancel_cue cue="Start"/>
          </actions>
        </cue>

      </cues>
    </library>


    <!-- MISSION SETUP HELPERS -->

    <!-- input: $MissionLevel; output: $MissionLevel, $HostileAmount, $HostileRange -->
    <library name="ConfigureDifficulty">
      <actions>
        <set_value name="$MissionLevel" exact="if not $MissionLevel? then 1 else $MissionLevel"/>
        <debug_text text="'Missing $MissionLevel input. Set to: ' + $MissionLevel" chance="$DebugChance"/>

        <!-- Figure out how many mines to spawn within what distance of the rescue ship, based on $MissionLevel -->
        <set_value name="$LevelVsSpawn" exact="table[
            { 1 } = [   5, 500m  ],
            { 2 } = [  10, 750m  ],
            { 3 } = [  15, 750m  ],
            { 4 } = [  20, 1000m ],
            { 5 } = [  30, 1500m ],
          ]"/>

        <set_value name="$Level" exact="$LevelVsSpawn.keys.random"/>
        <set_value name="$HostileAmount" exact="$LevelVsSpawn.{$Level}.{1}"/>
        <set_value name="$HostileRange"  exact="$LevelVsSpawn.{$Level}.{2}"/>

        <set_value name="$MissionLevel" exact="$MissionLevel + $Level - 1"/>
      </actions>
    </library>


    <!--GENERIC MISSION VARIANTS-->

    <cue name="Force_Generic_Var_1" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <signal_cue cue="md.GenericMissions.RemoveAllOffers" />
        <do_all exact="30">
          <signal_cue_instantly cue="GenerateGenericMission" param="table[$Sector = player.sector, $MissionVariant = 1, $DebugChance = 100]"/>
        </do_all>
      </actions>
      <force name="GM_Rescue_Ship_Var_1" />
    </cue>

    <!--event.param = table[
    $Sector,
    $ReportSignalCue (Optional. Cue to be signalled when something happens which could be of interest to the calling cue. Saves values to ReportSignalCue.$FeedbackValue and ReportSignalCue.$EndFeedbackValue)
    $MissionVariant (Optional),
    $RemoveOnSectorChange (Optional, defaults to true)
    $DebugChance (Optional)]-->
    <cue name="GenerateGenericMission" instantiate="true" namespace="this" version="2">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Sector"           exact="event.param.$Sector"/>
        <set_value name="$ReportSignalCue"  exact="@event.param.$ReportSignalCue"/>
        <set_value name="$MissionVariant"   exact="@event.param.$MissionVariant"/>
        <do_if value="event.param.$RemoveOnSectorChange?">
          <set_value name="$RemoveOnSectorChange" exact="event.param.$RemoveOnSectorChange"/>
        </do_if>
        <do_else>
          <set_value name="$RemoveOnSectorChange" exact="true"/>
        </do_else>

        <set_value name="$DebugChance"      exact="@event.param.$DebugChance"/>
        <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>

        <set_value name="$FeedbackManager" exact="FeedbackValueManager"/>
        <assert value="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT?" text="'Required error code does not exist. Was the FeedbackValueManager not updated for stand-alone missions? [Owen/Roger]'"/>

        <debug_text text="'Attempting to generate a generic mission'" chance="$DebugChance"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <do_if value="$ReportSignalCue.exists">
          <set_value name="$ReportSignalCue.$GM_Wrapper" exact="this"/>
        </do_if>
        <do_else>
          <debug_text text="'cancelling dead GM instance'" filter="savegame"/>
          <cancel_cue cue="this"/>
        </do_else>
      </patch>
      <cues>
        <cue name="GenerateGenericMission_SelectVariant">
          <actions>
            <set_value name="$ValidVariants" exact="[]"/>
            <!--Set up some common variables first so that the variants don't have to do things multiple times-->

            <!--Find potential offer stations in the sector-->
            <find_station name="$PotentialOfferStations" excluded="md.GenericMissions.Manager.$ExcludedOfferObjects" space="$Sector" multiple="true">
              <match owner="md.GenericMissions.Manager.$DefaultExcludedOfferFactions" negate="true"/>
              <match_relation_to object="player.entity" comparison="not" relation="killmilitary" />
            </find_station>

            <do_if value="$PotentialOfferStations.count">
              <do_if value="$MissionVariant">
                <!--A specific MissionVariant ID was requested-->
                <debug_text text="'Checking if requested ' + $MissionVariant + ' can be spawned'" chance="$DebugChance"/>
                <do_if value="$MissionVariant == 1">
                  <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
                </do_if>
                <do_else>
                  <assert value="false" text="'Unknown $MissionVariant ID ' + $MissionVariant + ' [Owen]'"/>
                </do_else>
              </do_if>
              <do_else>
                <!--Attempt to a mission variant at random-->

                <signal_cue_instantly cue="GenerateGenericMission_Variant_1"/>
              </do_else>
            </do_if>

            <do_if value="$ValidVariants.count">
              <signal_cue cue="$ValidVariants.random"/>
            </do_if>
            <do_else>
              <do_if value="$ReportSignalCue">
                <set_value name="$FeedbackData" exact="$FeedbackManager.$FeedbackValues.$MISSION_NO_VARIANT.clone"/>
                <set_value name="$FeedbackData.$ID" exact="'$MISSION_NO_VARIANT'"/>
                <set_value name="$ReportSignalCue.$FeedbackValue" exact="$FeedbackData.clone" comment="No mission variant possible"/>
                <signal_cue_instantly cue="$ReportSignalCue"/>
              </do_if>
              <cancel_cue cue="GenerateGenericMission"/>
            </do_else>
          </actions>
        </cue>

        <cue name="GenerateGenericMission_Variant_1" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <!--this uses its own namespace so grab the shared data from GenerateGenericMission-->
            <set_value name="$Sector" exact="GenerateGenericMission.$Sector"/>
            <set_value name="$DebugChance" exact="GenerateGenericMission.$DebugChance"/>
            <set_value name="$OfferStations" exact="GenerateGenericMission.$PotentialOfferStations.clone"/>

            <set_value name="$Difficulty" exact="level.easy"/>
            <set_value name="$MissionLevel" exact="1"/>
            <include_actions ref="ConfigureDifficulty" comment="input: $MissionLevel; output: $MissionLevel, $HostileAmount, $HostileRange"/>

            <set_value name="$ValidOffsets" exact="[]"/>
            <set_value name="$Valid" exact="false"/>
            <create_group groupname="$Hostiles"/>

            <do_if value="$OfferStations.count">

              <set_value name="$Station" exact="$OfferStations.random"/>
              <set_value name="$Faction" exact="$Station.owner"/>
              <create_position name="$Offset" object="$Station" space="$Sector" min="75km" max="150km"/>

              <set_value name="$ValidOffsets" exact="[1000, 1100, 1200, 1300, 1400, 1500]" comment="Generic Missions"/>
              <!-- Faction Specific Missions -->
              <do_if value="$Station.owner == faction.argon or $Station.owner == faction.antigone">
                <append_list_elements name="$ValidOffsets" other="[1600, 1700]"/>
              </do_if>
              <do_if value="$Station.owner == faction.teladi or $Station.owner == faction.ministry">
                <append_to_list name="$ValidOffsets" exact="1800"/>
              </do_if>
              <do_if value="$Station.owner == faction.paranid or $Station.owner == faction.holyorder">
                <append_to_list name="$ValidOffsets" exact="1900"/>
              </do_if>
              <do_if value="md.$SplitPatriarchyFactions.indexof.{$Faction}">
                <append_to_list name="$ValidOffsets" exact="2000"/>
                <set_value name="$Valid" exact="true"/>
              </do_if>
              <do_if value="md.$SplitFactions.indexof.{$Faction}">
                <append_to_list name="$ValidOffsets" exact="2100"/>
                <set_value name="$Valid" exact="true"/>
              </do_if>
              <do_if value="md.$TerranFactions.indexof.{$Faction}">
                <append_to_list name="$ValidOffsets" exact="2200"/>
              </do_if>
              <do_if value="md.$DLCBoronFactions.indexof.{$Faction}">
                <append_to_list name="$ValidOffsets" exact="2300"/>
              </do_if>

              <!-- SelectMissionVariant library (weighted choice and $lastoffertime tracking) -->
              <run_actions ref="md.GenericMissions.SelectMissionVariant" result="$TextOffset_Table">
                <param name="StaticGMCue"    value="md.GM_Rescue_Ship.GenerateGenericMission"/>
                <param name="ValidOffsets"   value="table[{30138} = $ValidOffsets]"/>
              </run_actions>
              <remove_value name="$ValidOffsets" comment="prevent accidental usage to select a different offset"/>
              <set_value name="$Page"         exact="$TextOffset_Table.keys.last"/>
              <set_value name="$TextOffset"   exact="$TextOffset_Table.{$Page}"/>

              <do_if value="$TextOffset == 1000">
                <set_value name="$SalvageShipFaction" exact="$Faction"/>
                <set_value name="$HostileFaction" exact="faction.scaleplate"/>
              </do_if>
              <do_elseif value="$TextOffset == 1100">
                <set_value name="$SalvageShipFaction" exact="faction.scaleplate"/>
                <set_value name="$HostileFaction" exact="faction.scaleplate"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 1200">
                <set_value name="$SalvageShipFaction" exact="md.$StandardFactions.random"/>
                <set_value name="$HostileFaction" exact="$Station.owner"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 1300">
                <set_value name="$SalvageShipFaction" exact="$Station.owner"/>
                <set_value name="$HostileFaction" exact="$Station.owner"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 1400">
                <set_value name="$SalvageShipFaction" exact="$Station.owner"/>
                <set_value name="$HostileFaction" exact="faction.xenon"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 1500">
                <set_value name="$SalvageShipFaction" exact="$Station.owner"/>
                <set_value name="$HostileFaction" exact="$Station.owner"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 1600">
                <set_value name="$SalvageShipFaction" exact="$Station.owner"/>
                <set_value name="$HostileFaction" exact="$Station.owner"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 1700">
                <set_value name="$SalvageShipFaction" exact="$Station.owner"/>
                <set_value name="$HostileFaction" exact="$Station.owner"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 1800">
                <set_value name="$SalvageShipFaction" exact="md.$StandardFactions.random"/>
                <set_value name="$HostileFaction" exact="$Station.owner"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 1900">
                <set_value name="$SalvageShipFaction" exact="$Station.owner"/>
                <set_value name="$HostileFaction" exact="$Station.owner"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 2000">
                <set_value name="$SalvageShipFaction" exact="$Faction"/>
                <set_value name="$HostileFaction" exact="faction.scaleplate"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 2100">
                <set_value name="$SalvageShipFaction" exact="$Faction"/>
                <set_value name="$HostileFaction" exact="faction.scaleplate"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 2200">
                <set_value name="$SalvageShipFaction" exact="$Faction"/>
                <set_value name="$HostileFaction" exact="faction.scaleplate"/>
              </do_elseif>
              <do_elseif value="$TextOffset == 2300">
                <set_value name="$SalvageShipFaction" exact="$Faction"/>
                <set_value name="$HostileFaction" exact="faction.scaleplate"/>
              </do_elseif>

              <get_ship_definition reference="$SalvageShipDef" size="class.ship_m" faction="$Faction" tags="tag.mission" />
              <do_if value="$SalvageShipDef and $SalvageShipFaction? and $HostileFaction?">
                <set_value name="$Valid" exact="true"/>
              </do_if>
            </do_if>

            <run_actions ref="md.LIB_Generic.SectorDifficultyBalance" result="$Difficulty">
              <param name="MissionTargetSector" value="$Sector"/>
              <param name="Difficulty" value="$Difficulty"/>
            </run_actions>

            <do_if value="$Valid">
              <append_to_list name="GenerateGenericMission.$ValidVariants" exact="this"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="GenerateGenericMission_Variant_1_Trigger">
              <conditions>
                <event_cue_signalled cue="parent"/>
              </conditions>
              <cues>
                <cue name="GenerateGenericMission_Variant_1_Ref" ref="Start">
                  <param name="OfferObject"   value="$Station"/>
                  <param name="MissionLevel"  value="$MissionLevel"/>
                  <param name="Difficulty"    value="$Difficulty"/>
                  <param name="Faction"       value="$Faction"/>

                  <!--Mission offer-->
                  <param name="RemoveOnSectorChange" value="@GenerateGenericMission.$RemoveOnSectorChange"/>
                  <param name="BBSSpace" value="$Sector"/>

                  <!--Mission text-->
                  <param name="Page"          value="$Page"/>
                  <param name="TextOffset"    value="$TextOffset"/>

                  <!-- see GenerateGenericMission_Variant_1_PostInit -->
                  <param name="SalvageShip"       value="null"/>
                  <param name="Hostiles"          value="$Hostiles" comment="empty-group"/>
                  <param name="TargetSector"      value="$Sector"/>

                  <param name="ReportActivateCue" value="GenerateGenericMission_Variant_1_PostInit"/>
                  <param name="ReportSignalCue"   value="@GenerateGenericMission.$ReportSignalCue"/>
                  <param name="DebugChance"       value="@GenerateGenericMission.$DebugChance"/>
                </cue>

                <!-- Use a callback, so we don't spam the entire universe with loads of objects -->
                <cue name="GenerateGenericMission_Variant_1_PostInit" version="2">
                  <conditions>
                    <event_cue_signalled/>
                  </conditions>
                  <actions>
                    <get_ship_definition reference="$SalvageShipDef" size="class.ship_m" faction="$Faction" tags="tag.mission" />
                    <include_actions ref="md.GM_Rescue_Ship_Lib.Setup_Variation_SeekingMines"
                      comment="requires $SalvageShipFaction, $Sector, $Offset - returns $SalvageShip and $Hostiles"/>
                    <do_if value="$SalvageShip">
                      <!-- event.param is the cue which triggered the callback, write to it's local variables -->
                      <set_value name="event.param.$SalvageShip" exact="$SalvageShip"/>
                      <add_to_group groupname="event.param.$Hostiles" group="$Hostiles"/>
                    </do_if>
                  </actions>

                  <!-- If mines are located too far away -->
                  <patch sinceversion="2" state="waiting" comment="Cue state 'waiting' as this cue was previously set to instantiate">
                    <do_if value="$SalvageShip.exists">
                      <do_for_each name="$Patch_Hostile" in="$Hostiles">
                        <do_if value="$SalvageShip.bboxdistanceto.{$Patch_Hostile} gt ($HostileRange * 5)">
                          <warp object="$Patch_Hostile" sector="$SalvageShip.sector">
                            <safepos object ="$SalvageShip" min="250m" max="$HostileRange "/>
                          </warp>
                          <debug_text text="'PATCH: Mine %1 moved closer to %2 in sector %3'.[$Patch_Hostile.debugname, $SalvageShip.debugname, $Patch_Hostile.sector.debugname]" filter="savegame" />
                        </do_if>
                      </do_for_each>
                    </do_if>
                  </patch>
                </cue>

              </cues>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>


    <!--============
        ~~ MASTER EVALUATION LIBRARY ~~
        ================-->
    <library name="Dynamic_Mission_Eval" purpose="run_actions">
      <params>
        <param name="Label" default="'$defaultnext'"/>
        <param name="ChainDefinitionTable"/>
        <param name="OutcomeTable" default="table[$success = '$defaultnext']" comment="Table of outcomes. Key: GM $FeedbackValues ID or 'type' strings ($ prepended). Value: Label string to next dynamic mission section."/>
        <param name="DebugChance" default="0"/>

        <param name="AcceptOnRescueShipDiscovery" default="true" comment="Accept the mission when the player is in close proximity to the ship, otherwise active from the moment of spawning"/>

        <!--Rescue Ship creation and placement parameters-->
        <param name="RescueShipKey" comment="Macro or component of class ship, or 'generating' if we use an already existing ship"/>
        <param name="ShipPlacementRule" default="null" comment="
               Lockbox/Collectablewares case:       Space position list: [$component, $offset(defaults to 0,0,0)]
               ---------
               Exploration Asset case:              Exploration object that the ship rescue will be staged at
                                                    "/>

        <!--Enemey Faction parameters-->
        <param name="EnemyFactionKey" default="null" comment="Table key to enemy data. If the value evaluates to 'generating' then the faction is set to be determined before this mission spawns."/>

        <!--Client NPC parameters-->
        <param name="ClientNPCKey" default="null" comment="Table key to client data. If the value evaluates to 'generating' then the NPC is set to be created before this mission spawns."/>
      </params>
      <actions>
        <include_actions ref="md.GMC_Dynamic.Get_Branch_Sources"/>

        <do_for_each name="$BranchSource" in="$BranchSources">
          <set_value name="$ChainDefinitionTable.$ConstructingDefinitionRef" exact="$BranchSource"/>
          <set_value name="$MissionValTable" exact="$BranchSource.$MissionValTable"/>

          <!--====================
            ~~ Check Rescue Ship via $RescueShipKey ~~
            ========================-->
          <set_value name="$RescueShipDef" exact="@$MissionValTable.{$RescueShipKey}"/>
          <do_if value="$RescueShipDef">
            <do_if value="$RescueShipDef == 'generating'">
              <debug_text text="'$RescueShipDef is set to be generated'" chance="$DebugChance"/>
            </do_if>
            <do_elseif value="typeof @$RescueShipDef != datatype.macro">
              <debug_text text="'ShipDef ' + $RescueShipDef + ' is not a valid ship definition'" filter="error"/>
              <return value="false"/>
            </do_elseif>
          </do_if>

          <!--Validate ShipPlacementRule-->
          <set_value name="$ShipPlacementDef" exact="@$MissionValTable.{$ShipPlacementRule}"/>
          <do_if value="$ShipPlacementDef">
            <do_if value="$ShipPlacementDef == 'generating'">
              <debug_text text="'$ShipPlacementDef is set to be generated'" chance="$DebugChance"/>
            </do_if>
            <do_elseif value="(typeof $ShipPlacementDef != datatype.list) and (not @$ShipPlacementDef.isoperational)">
              <debug_text text="'$ShipPlacementDef ' + $ShipPlacementDef + ' is not a valid placement definition'" filter="error"/>
              <return value="false"/>
            </do_elseif>
          </do_if>

          <!--Validate $CreatedNPCInteriorKey-->
          <set_value name="$EnemyFaction" exact="@$MissionValTable.{$EnemyFactionKey}"/>
          <do_if value="$EnemyFaction">
            <do_if value="$EnemyFaction == 'generating'">
              <debug_text text="'$EnemyFaction is set to be generated'" chance="$DebugChance"/>
            </do_if>
            <do_elseif value="typeof @$EnemyFaction != datatype.faction">
              <debug_text text="'$EnemyFaction ' + $EnemyFaction + ' is not a valid faction definition'" filter="error"/>
              <return value="false"/>
            </do_elseif>
          </do_if>

          <!--Check DeliveryNPC parameters-->
          <set_value name="$ClientNPC" exact="$MissionValTable.{$ClientNPCKey}"/>
          <do_if value="$ClientNPC">
            <do_if value="$ClientNPC == 'generating'">
              <debug_text text="'$ClientNPC is set to be generated'" chance="$DebugChance"/>
            </do_if>
            <do_elseif value="not @$ClientNPC.isclass.npc">
              <debug_text text="'$ClientNPC ' + $ClientNPC + ' is not set to be generated, nor is an existing NPC component'" filter="error"/>
              <return value="false"/>
            </do_elseif>
          </do_if>
          <do_else>
            <debug_text text="'Invalid $ClientNPC for key ' + $ClientNPCKey" filter="error"/>
            <return value="false"/>
          </do_else>

          <!--Finalisation. Construct the mission instance param table.-->

          <!--Build the $Params table which will be passed to the instance so it can lookup the data from from $MissionValTable on spawning-->
          <set_value name="$ChainDefinitionTable.$ConstructingDefinitionRef.$StaticMissionCue"     exact="Rescue_Ship_Start"/>
          <set_value name="$ChainDefinitionTable.$ConstructingDefinitionRef.$Params"               exact="table[
                         $RescueShipKey = $RescueShipKey,
                         $AcceptOnRescueShipDiscovery = $AcceptOnRescueShipDiscovery,
                         $ShipPlacementRule = $ShipPlacementRule,
                         $EnemyFactionKey = $EnemyFactionKey,
                         $ClientNPCKey = $ClientNPCKey]"/>

          <include_actions ref="md.GMC_Dynamic.Set_Up_Outcome_Branches"/>
        </do_for_each>

        <return value="true"/>

      </actions>
    </library>

    <cue name="Rescue_Ship_Start" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        <set_value name="$Parameters" exact="event.param.$instanceparams"/>
        <set_value name="$MissionValTable" exact="event.param.$missionvaltable"/>
        <debug_text text="'$Parameters ' + $Parameters"/>
        <debug_text text="'$MissionValTable ' + $MissionValTable"/>

        <set_value name="$Client" exact="$MissionValTable.{$Parameters.$ClientNPCKey}"/>
        <set_value name="$SalvageShipFaction" exact="$Client.owner"/>

        <do_if value="$Parameters.$ShipPlacementRule">
          <!--TODO @Owen support other cases-->
          <do_if value="typeof $MissionValTable.{$Parameters.$ShipPlacementRule} == datatype.list">
            <set_value name="$Sector" exact="$MissionValTable.{$Parameters.$ShipPlacementRule}.{1}"/>
            <set_value name="$Offset" exact="$MissionValTable.{$Parameters.$ShipPlacementRule}.{2}"/>
          </do_if>
          <do_else>
            <!-- Set close to a landmark, so get a safe position in it proximity -->
            <set_value name="$Landmark" exact="$MissionValTable.{$Parameters.$ShipPlacementRule}"/>
            <set_value name="$Sector" exact="$Landmark.sector"/>
            <get_safe_pos result="$Offset" sector="$Sector" object="$Landmark" space="$Sector" min="1km" max="5km" radius="600m"/>
          </do_else>
        </do_if>

        <set_value name="$HostileFaction" exact="$MissionValTable.{$Parameters.$EnemyFactionKey}"/>

        <!-- Set up Salvage Ship -->
        <create_group groupname="$Hostiles"/>
        <set_value name="$HostileAmount" exact="[8,16].randominrange"/>
        <set_value name="$HostileRange" exact="750"/>

        <get_ship_definition reference="$SalvageShipDef" macro="$MissionValTable.{$Parameters.$RescueShipKey}" faction="$SalvageShipFaction" />
        <set_value name="$ClientNPC_IsPilot"/>
        <include_actions ref="md.GM_Rescue_Ship_Lib.Setup_Variation_SeekingMines"
          comment="requires $SalvageShipFaction, $Sector, $Offset - returns $SalvageShip and $Hostiles"/>
        <do_if value="$SalvageShip">
          <!-- event.param is the cue which triggered the callback, write to it's local variables -->
          <set_value name="event.param.$SalvageShip" exact="$SalvageShip"/>
          <add_to_group groupname="event.param.$Hostiles" group="$Hostiles"/>
        </do_if>
      </actions>
      <cues>

        <cue name="Rescue_Ship_GM_Ref" ref="md.GM_Rescue_Ship.Start">
          <param name="Client" value="$Client"/>
          <param name="MissionCue" value="$MissionValTable.$ChainInstance"/>

          <!--TODO @Owen-->
          <param name="MissionLevel" value="1"/>
          <param name="Difficulty" value="level.easy"/>

          <!--Offer location and conversation-->
          <param name="WithoutOffer" value="true"/>
          <param name="AcceptOnRescueShipDiscovery" value="$Parameters.$AcceptOnRescueShipDiscovery"/>

          <!--Mission text TODO @Owen-->
          <param name="Page"      value="30138"/>
          <param name="TextOffset" value="1000"/>

          <!--see GenerateGenericMission_Variant_1_PostInit-->
          <param name="SalvageShip"       value="$SalvageShip"/>
          <param name="Faction"           value="$SalvageShipFaction"/>
          <param name="Hostiles"          value="$Hostiles" comment="empty-group"/>
          <param name="TargetSector"      value="$Sector"/>

          <param name="ReportSignalCue"   value="$MissionValTable.$ChainMissionReportCue"/>
          <param name="CancelOfferCue"    value="null"/>
          <param name="ForceCleanup"      value="null"/>
          <param name="DebugChance"       value="@GenerateGenericMission.$DebugChance"/>
        </cue>

      </cues>
    </cue>

  </cues>
</mdscript>
