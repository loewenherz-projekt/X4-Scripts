<?xml version="1.0" encoding="utf-8"?>
<mdscript name="RML_Trade_Wares" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <!--This RML can be used for buying/selling wares at different stations
      !!! WARNING: KNOWN NO-REPRO BUG !!!
      $offer.available and not $offer.offeramount
      Supposed to be impossible, because trade offers are supposed to become unavailable when they reach 0.
      See failsafe hack in story_paranid.xml, Uni_3_Deliver_Resources_Failsafe_Check and Esc_3_Deliver_Resources_Failsafe_Check-->
  <cues>
    <!--
    $FeedbackValue:
    Mission Errors <= -100 
    -103: Tradeoffers list was empty
    -102: Tradeoffers value was not a list
    -101: $MissionCue was not defined
    -100: Undefined error. Defaulted to -100
    
    Player Failures <= -1
    -3: Container destroyed by non-player-owned object
    -2: Container destroyed by player-owned object
    -1: Player failed to complete any trade orders
    Player Success >= 1
    1: Player completed all trade orders
    2: Player completed some trade orders
    -->

    <library name="TradeWares" version="3">
      <params>
        <param name="EndSignalCue" />
        <param name="MissionCue" />
        <param name="StartStep" default="1" comment="Briefing step to start the mission on." />

        <!-- note these trade-offers could be on different stations and could be buy- or sell-offers (or both)! -->
        <param name="TradeOffers"        comment="List of tradeoffers to fulfill. Format: [$Tradeoffer, $TradeOffer, ... ]" />
        <param name="PartialTradeSignalCue" default="null" comment="Cue to signal when the player completes the first ware, and it's not enough to complete the RML."/>

        <!-- shared -->
        <param name="FailOnContainerDestruction" default="true" comment="Fail when the current trade offer container is destroyed" />
        <param name="DebugChance" default="0" />
      </params>
      <actions>

        <do_if value="player.debug">
          <set_value name="$DebugChance" exact="100"/>
        </do_if>

        <set_value name="$FeedbackValue" exact="0"/>
        <create_list name="$ErrorList"/>
        <do_if value="not $MissionCue">
          <append_to_list name="$ErrorList" exact="-101" />
        </do_if>

        <do_if value="typeof $TradeOffers != datatype.list">
          <append_to_list name="$ErrorList" exact="-102" />
        </do_if>
        <do_elseif value="$TradeOffers.count" exact="0">
          <append_to_list name="$ErrorList" exact="-103" />
        </do_elseif>

        <!-- create wares-table from the tradeoffers, for counting how much player delivered 
          .{1} = transferredamount with player involved (either as seller or buyer)
          .{2} = transferredamount (not involving player)
          .{3} = desired - (delivered-by-player + delivered-by-npc)
          .{4} = order entirely completed
          .{5} = the ware
          .{6} = buyer (if buyoffer), selloffer otherwise
          .{7} = true (if buyoffer), false otherwise
          .{8} = true (if selloffer), false otherwise
          .{9} = reserved1
          .{10] = reserved2
        -->
        <set_value name="$Wares" exact="table[]"/>
        <do_for_each in="$TradeOffers" name="$TradeOffer">
          <set_value name="$Wares.{$TradeOffer.ware}" exact="[0, 0, $TradeOffer.desiredamount, false, $TradeOffer.ware, if $TradeOffer.isbuyoffer then $TradeOffer.buyer else $TradeOffer.seller, $TradeOffer.isbuyoffer, $TradeOffer.isselloffer, 0, 0]" comment="List contains [player-amount, npc-amount, desired-amount, completed, ware, order-station, isbuyoffer, isselloffer, reserved1, reserved2]"/>
        </do_for_each>
        <create_list name="$TradeOfferHandlers"/>
        <create_list name="$TradeOffer_Objective_Wares"/>
        <create_list name="$TradesInProgressCues"/>
      </actions>
      <patch sinceversion="2">
        <create_list name="$TradeOffer_Objective_Wares"/>
      </patch>
      <patch sinceversion="3">
        <set_value name="$PartialTradeSignalCue" exact="null"/>
        <create_list name="$TradesInProgressCues"/>
      </patch>
      <cues>
        <cue name="SignalCleanUp" onfail="cancel">
          <conditions>
            <check_value value="$ErrorList.count" min="1" />
          </conditions>
          <actions>
            <signal_cue cue="CleanUp" />
          </actions>
        </cue>

        <cue name="StartMission" onfail="cancel">
          <conditions>
            <check_value value="$ErrorList.count" exact="0" />
          </conditions>
          <actions>
            <!-- Create collections to store completed trades: One for the player, one for everyone else and one to track number of wares remaining -->
            <signal_cue cue="UpdateBriefing" />
          </actions>
          <cues>

            <cue name="TradeOffer_Verify" checkinterval="3s" instantiate="true">
              <conditions>
                <check_value value="false" />
              </conditions>
              <actions>
                <debug_text text="'checking %s...'.[$TradeOffers.count]"/>
                <do_for_each name="$TradeOffer" in="$TradeOffers" >
                  <do_if value="$TradeOffer.exists">
                    <debug_text text="'ware:%s player:%s npc:%s total-expected:%s still-expected:%s buyoffer:%s selloffer:%s'.[$TradeOffer.ware.name, $Wares.{$TradeOffer.ware}.{1}, $Wares.{$TradeOffer.ware}.{2}, $Wares.{$TradeOffer.ware}.{3}, $TradeOffer.desiredamount, $TradeOffer.isbuyoffer, $TradeOffer.isselloffer]"/>
                  </do_if>
                  <do_else>
                    <debug_text text="'ware: ? (completed)'"/>
                  </do_else>
                </do_for_each>
              </actions>
            </cue>

            <cue name="TradeOffer_Setup">
              <actions>
                <!-- We can't observe a list of tradeoffers with event_trade_* conditions, handle via instantiation -->
                <do_for_each in="$TradeOffers" name="$TradeOffer">
                  <signal_cue_instantly cue="TradeOffer_Handler" param="$TradeOffer"/>
                </do_for_each>
              </actions>
            </cue>


            <cue name="TradeOffer_Handler" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <set_value name="this.$TradeOffer" exact="event.param"/>
                <append_to_list name="$TradeOfferHandlers" exact="this"/>

                <debug_text text="'buyer=%s seller=%s offertype=%s ware=%s desired=%s'.[@event.param.buyer.knownname, @event.param.seller.knownname, if event.param.isbuyoffer then 'buyoffer' else 'selloffer', event.param.ware.name, event.param.desiredamount]"/>

              </actions>
              <cues>
                
                <!-- 
                  A trade is considered a
                  - buyoffer: if a buyer exists but no seller
                  - selloffer: if a seller exists but no buyer
                  - offer: if it's either a buyoffer or a selloffer
                  - order: if buyer and seller exist
                  
                  TradeOrders:
                  The amount of the order will be 0 when it has been completed - it's counted down as cargo is transferred and when it has reached 0 the trade is completed. If you want to know how much made it from the seller to the buyer, use $tradeorder.transferredamount
                  You *can* query $tradeorder.tradeoffer and if the trade order was created to fulfill a script trade offer, then that will be a reference to that offer. 
                  In other words: $TradeOrder.tradeoffer == $TradeOffer - BUT when your trade order completes the script trade offer, then the script trade offer may already fire it's completed event and may be deleted before you get the completed event for the trade order.
                  Not likely to happen for M ship trades, but can happen if masstraffic is involved. E.g. cargo drone delivers the last pieces, that completes the offer but since the empty drone may have to fly back to the seller the order is not complete until all drones 
                  are back where they belong. The offer may have already been deleted by then and $TradeOrder.tradeoffer will return 0
                -->

                <cue name="TradeOffer_Objective" instantiate="true">
                  <conditions>
                    <event_object_docked_at container="parent.$TradeOffer.owner"/>
                    <check_value value="event.param.pilot == player.entity" comment="The player is flying a ship and docking there themselves"/>
                    <check_value value="event.param.cargo.{parent.$TradeOffer.ware}.exists" comment="Player docked with a ship which has the required cargo"/>
                  </conditions>
                  <actions>
                    <set_value name="this.$DockingShip" exact="event.param"/>
                    <append_to_list name="$TradeOffer_Objective_Wares" exact="parent.$TradeOffer.ware"/>
                    <signal_cue cue="UpdateBriefing"/>
                  </actions>
                  <cues>
                    <cue name="TradeOffer_Objective_Reset">
                      <conditions>
                        <event_object_undocked object="parent.$DockingShip"/>
                      </conditions>
                      <actions>
                        <remove_from_list name="$TradeOffer_Objective_Wares" exact="parent.parent.$TradeOffer.ware"/>
                        <signal_cue cue="UpdateBriefing"/>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <cue name="TradeOffer_Started" instantiate="true">
                  <conditions>
                    <event_trade_started tradeoffer="parent.$TradeOffer" comment="This specifies an intended PARTIAL delivery, it might get lost (drone destroyed) before actually being delivered!"/>
                  </conditions>
                  <actions>
                    <append_to_list name="$TradesInProgressCues" exact="this"/>
                    <set_value name="this.$tradeorder" exact="event.param2"/>
                    <set_value name="this.$tradeorder_buyer" exact="event.param2.buyer"/>
                    <set_value name="this.$tradeorder_seller" exact="event.param2.seller"/>
                    <do_if value="event.param.isbuyoffer">
                      <debug_text text="'started trade, `%s` buying %s/%s %s from `%s`'.[@event.param.buyer.knownname, event.param2.amount, event.param.offeramount.{event.param2.seller}, event.param.ware.name, event.param2.seller.knownname]" chance="$DebugChance"/>
                    </do_if>
                    <do_elseif value="event.param.isselloffer">
                      <debug_text text="'started trade, `%s` selling %s/%s %s to `%s`'.[@event.param.seller.knownname, event.param2.amount, event.param.offeramount.{event.param2.buyer}, event.param.ware.name, event.param2.buyer.knownname]" chance="$DebugChance"/>
                    </do_elseif>
                  </actions>
                  <cues>

                    <cue name="TradeOffer_TradeOrder_Completed">
                      <conditions>
                        <event_trade_completed seller="parent.$tradeorder_seller" buyer="parent.$tradeorder_buyer"/>
                        <check_value value="event.param == parent.$tradeorder" comment="cur e.p2/tradeORDER from event_trade_started is now the e.p/TradeOFFER in event_trade_completed!"/>
                      </conditions>
                      <actions>
                        <!--debug_text text="'Completed bo=%s bo-owner=`%s` so=%s so-owner=`%s` amount=%s desiredamount=%s transferamount=%s source-tradeoffer=%s s-to.bo %s s-to.to=%s'.[event.param.isbuyoffer, if event.param.seller.exists then event.param.seller.owner else '?', event.param.isselloffer, if event.param.buyer.exists then event.param.buyer.owner else '?', event.param.amount, event.param.desiredamount, event.param.transferredamount, event.param.tradeoffer, event.param.tradeoffer.isbuyoffer, event.param.tradeoffer.isselloffer]" chance="$DebugChance"/-->
                        <do_if value="$TradesInProgressCues.indexof.{parent}" comment="Can be false when trade was started with an older version of the RML.">
                          <remove_from_list name="$TradesInProgressCues" exact="parent"/>
                        </do_if>
                        <do_if value="(event.param.seller.exists and event.param.seller.owner == faction.player) or (event.param.buyer.exists and event.param.buyer.owner == faction.player)" comment="player was involved (either as seller or buyer)">
                          <set_value name="$Wares.{event.param.ware}.{1}" exact="event.param.transferredamount " operation="add"/>
                          <debug_text text="'player fulfilled %s for %s'.[event.param.transferredamount, event.param.ware.name]" chance="$DebugChance"/>
                          <set_value name="$UpdateBriefingPartial" exact="true" comment="next objective-update is silent"/>
                          <signal_cue cue="UpdateBriefing" />
                          <signal_cue_instantly cue="TradeOffer_Reminder" param="[ event.param.seller.isclass.[class.ship_l, class.ship_xl] or event.param.buyer.isclass.[class.ship_l, class.ship_xl] ]"/>
                        </do_if>
                        <do_else>
                          <set_value name="$Wares.{event.param.ware}.{2}" exact="event.param.transferredamount " operation="add"/>
                          <debug_text text="'NPC fulfilled %s for %s'.[event.param.transferredamount , event.param.ware]" chance="$DebugChance"/>
                        </do_else>
                      </actions>
                    </cue>
                  </cues>
                </cue>

                <!-- Failsafe for $offer.available and not $offer.offeramount, Supposed to be impossible, because trade offers are supposed to become unavailable when they reach 0. -->
                <cue name="TradeOffer_FailSafe">
                  <delay exact="10s"/>
                  <actions>

                    <do_if value="parent.$TradeOffer.available == 1 and parent.$TradeOffer.offeramount == 0">
                      <debug_text text="'Failsafe triggered for offer=%s available=%s offeramount=%s ware=%s delivered=%s/%s'.[parent.$TradeOffer, parent.$TradeOffer.available, parent.$TradeOffer.offeramount, parent.$TradeOffer.ware, $Wares.{parent.$TradeOffer.ware}.{1}, $Wares.{parent.$TradeOffer.ware}.{3}]"/>
                      <set_value name="$Wares.{parent.$TradeOffer.ware}.{4}" exact="true" comment="order entirely completed"/>
                      <remove_from_list name="$TradeOffer_Objective_Wares" exact="parent.$TradeOffer.ware"/>
                      <signal_cue cue="UpdateBriefing" />
                      <signal_cue cue="TradeOffer_CheckOffersCompleted"/>
                      <cancel_cue cue="parent" comment="no need to observe this completed tradeoffer anymore"/>
                    </do_if>
                    <do_else>
                      <reset_cue cue="this"/>
                    </do_else>
                  </actions>
                </cue>
                
                <cue name="TradeOffer_Complete" instantiate="true">
                  <conditions>
                    <event_trade_completed tradeoffer="parent.$TradeOffer" comment="This specifies the ENTIRE order has been completed (does NOT trigger for completing a partial delivery!)"/>
                  </conditions>
                  <actions>
                    <do_if value="event.param.isbuyoffer">
                      <debug_text text="'completed trade, %s bought %s %s from %s'.[@event.param.buyer.knownname, event.param2.transferredamount, event.param.ware.name, event.param2.seller.knownname]" chance="$DebugChance"/>
                    </do_if>
                    <do_elseif value="event.param.isselloffer">
                      <debug_text text="'completed trade, %s sold %s %s to %s'.[@event.param.seller.knownname, event.param2.amount + event.param2.transferredamount, event.param.ware.name, event.param2.buyer.knownname]" chance="$DebugChance"/>
                    </do_elseif>
                    <do_else>
                      <debug_text text="'completed trade (this should not happen!), %s sold %s %s'.[@event.param.seller.knownname, event.param2.amount + event.param2.transferredamount, event.param.ware.name]" chance="$DebugChance"/>
                    </do_else>

                    <set_value name="$Wares.{event.param.ware}.{4}" exact="true" comment="order entirely completed"/>

                    <remove_from_list name="$TradeOffer_Objective_Wares" exact="parent.$TradeOffer.ware"/>
                    <signal_cue cue="UpdateBriefing" />
                    <signal_cue cue="TradeOffer_CheckOffersCompleted"/>
                    <cancel_cue cue="parent" comment="no need to observe this completed tradeoffer anymore"/>
                  </actions>
                </cue>

                <cue name="TradeOffer_StationDestroyed">
                  <conditions>
                    <check_any>
                      <!-- check the buyer-station being destroyed in case of a buyoffer, and the seller-station being destroyed in case of a selloffer -->
                      <check_all>
                        <event_object_destroyed object="parent.$TradeOffer.buyer" check="false" />
                        <check_value value="parent.$TradeOffer.isbuyoffer"/>
                      </check_all>
                      <check_all>
                        <event_object_destroyed object="parent.$TradeOffer.seller" check="false" />
                        <check_value value="parent.$TradeOffer.isselloffer"/>
                      </check_all>
                    </check_any>
                  </conditions>
                  <actions>
                    <do_if value="parent.$TradeOffer.isbuyoffer">
                      <debug_text text="parent.$TradeOffer.buyer.knownname + ' has been destroyed'" chance="$DebugChance" />
                    </do_if>
                    <do_elseif value="parent.$TradeOffer.isselloffer">
                      <debug_text text="parent.$TradeOffer.seller.knownname + ' has been destroyed'" chance="$DebugChance" />
                    </do_elseif>
                    <do_else>
                      <debug_text text="'Unhandled TradeOffer type'"/>
                    </do_else>

                    <do_if value="event.param.owner" exact="faction.player">
                      <set_value name="$FeedbackValue" exact="-2" />
                    </do_if>
                    <do_else>
                      <set_value name="$FeedbackValue" exact="-3" />
                    </do_else>
                    <signal_cue cue="CleanUp" />
                  </actions>
                </cue>

              </cues>
            </cue>

            <cue name="TradeOffer_Reminder" instantiate="true">
              <conditions>
                <event_cue_signalled/>
                <check_value value="$PartialTradeSignalCue"/>
              </conditions>
              <!-- Queued trades take much longer to start when drones are used. ~12-13s with a Veles Vanguard, ~2s with a Raleigh -->
              <delay exact="if event.param.{1} then 15s else 3s"/>
              <actions>
                <!-- This signals an external reminder cue if the player completed a trade and there are no further trades queued for the moment.
                     If the RML hasn't been cleaned up after the delay, that means that the player hasn't completed all required trades. -->
                <do_if value="($PartialTradeSignalCue.state == cuestate.waiting) and not $TradesInProgressCues.count">
                  <signal_cue cue="$PartialTradeSignalCue"/>
                </do_if>
              </actions>
            </cue>

            <cue name="TradeOffer_CheckOffersCompleted" instantiate="true">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <!-- check if ALL orders are now complete (= mission complete) -->
                <set_value name="$MissionComplete" exact="true"/>
                <set_value name="$NoPlayerTrades" exact="true" />
                <set_value name="$AllPlayerTrades" exact="true" />

                <do_for_each in="$Wares" name="$Ware">
                  <do_if value="not $Wares.{$Ware}.{4}" comment="[4] true means 'entire order was completed'">
                    <debug_text text="'[4]: ' + $Wares.{$Ware}.{4} + ' $MissionComplete = false ' + $Ware.name"/>
                    <set_value name="$MissionComplete" exact="false"/>
                    <break/>
                  </do_if>
                  <do_else>
                    <do_if value="$Wares.{$Ware}.{1}">
                      <debug_text text="'[1]: ' + $Wares.{$Ware}.{1} + ' noplayertrades = false '+ $Ware.name"/>
                      <set_value name="$NoPlayerTrades" exact="false" />
                    </do_if>
                    <do_if value="$Wares.{$Ware}.{2}">
                      <debug_text text="'[2]: ' + $Wares.{$Ware}.{2} + ' allplayertrades = false '+ $Ware.name"/>
                      <set_value name="$AllPlayerTrades" exact="false" />
                    </do_if>
                  </do_else>
                </do_for_each>

                <do_if value="$MissionComplete">
                  <do_if value="$AllPlayerTrades">
                    <set_value name="$FeedbackValue" exact="1" />
                  </do_if>
                  <do_elseif value="$NoPlayerTrades">
                    <set_value name="$FeedbackValue" exact="-1" />
                  </do_elseif>
                  <do_else>
                    <set_value name="$FeedbackValue" exact="2" />
                  </do_else>
                  <signal_cue cue="CleanUp" />
                </do_if>

              </actions>
            </cue>

          </cues>
        </cue>

        <cue name="UpdateBriefing" instantiate="true">
          <conditions>
            <event_cue_signalled />
          </conditions>
          <actions>
            <set_value name="$WareStep" exact="$StartStep"/>

            <debug_text text="'Updating Briefing'"/>

            <set_value name="this.$SetObjective" exact="true" />

            <!-- First iteration = completed tradeoffers, Second iteration is still open tradeoffers -->
            <do_all exact="2" counter="$i">
              <do_for_each in="$Wares" name="$Ware">

                <set_value name="this.$WareCheck" exact="$Wares.{$Ware}.{4}" comment="first iteration for completed orders" />
                <do_if value="$i == 2">
                  <set_value name="this.$WareCheck" exact="not this.$WareCheck" comment="second iteration for incomplete orders" />
                </do_if>

                <do_if value="this.$WareCheck">
                  <do_if value="$Wares.{$Ware}.{7} == true" comment="buyoffer, so player needs to sell!">
                    <set_value name="this.$textsource" exact="readtext.{1004}.{1005}"/>
                    <set_value name="this.$action" exact="objective.deliver"/>
                  </do_if>
                  <do_elseif value="$Wares.{$Ware}.{8} == true" comment="selloffer, so player needs to buy!">
                    <set_value name="this.$textsource" exact="readtext.{1004}.{1006}"/>
                    <set_value name="this.$action" exact="objective.buy"/>
                  </do_elseif>

                  <substitute_text text="$ObjectiveText" source="this.$textsource">
                    <replace string="'$AMOUNT$'" with="$Wares.{$Ware}.{3} - $Wares.{$Ware}.{1}" comment="desired - (delivered-by-player + delivered-by-npc)" />
                    <replace string="'$WARE$'" with="$Ware.name" />
                    <replace string="'$OBJECT$'" with="$Wares.{$Ware}.{6}.knownname" />
                  </substitute_text>
                  <update_mission cue="$MissionCue">
                    <briefing>
                      <objective step="$WareStep" action="this.$action" object="$Wares.{$Ware}.{6}" text="$ObjectiveText" comment="guidance to station (either buyer of seller)"/>
                    </briefing>
                  </update_mission>

                  <do_if value="$i == 2 and this.$SetObjective">
                    <!--set_objective_from_briefing cue="$MissionCue" step="$WareStep"/-->
                    <set_objective cue="$MissionCue" step="$WareStep" action="this.$action" object="$Wares.{$Ware}.{6}" text="$ObjectiveText" silent="if $UpdateBriefingPartial? then true else false">
                      <progress progress="$Wares.{$Ware}.{1}" max="$Wares.{$Ware}.{3}"/>
                    </set_objective>
                    <set_value name="this.$SetObjective" exact="false" />
                  </do_if>

                  <remove_value name="$UpdateBriefingPartial"/>
                  <set_value name="$WareStep" operation="add"/>

                </do_if>
              </do_for_each>
            </do_all>

            <set_value name="$EndSignalCue.$FinalStep" exact="$WareStep - 1"/>

            <do_if value="$TradeOffer_Objective_Wares? and $TradeOffer_Objective_Wares.count">
              <set_objective customaction="{30224,1058}" action="objective.custom" cue="$MissionCue" text="$TradeOffer_Objective_Wares.{1}.name" comment="Transfer Wares through the Ship Menu"/>
            </do_if>

          </actions>
        </cue>

        <cue name="CleanUp">
          <conditions>
            <event_cue_signalled />
          </conditions>
          <actions>
            <do_if value="$FeedbackValue" exact="0">
              <do_if value="$ErrorList.count" exact="0">
                <debug_text text="'Error: RML_Trade_Wares.CleanUp - $FeedbackValue is 0 and there are no reported errors: Defaulting to $FeedbackValue -100...'" chance="$DebugChance" />
                <set_value name="$FeedbackValue" exact="-100" />
              </do_if>
              <do_else>
                <set_value name="$FeedbackValue" exact="$ErrorList.{1}" />

                <do_if value="md.$RML_Debugging">
                  <do_all exact="$ErrorList.count" counter="$Counter">
                    <do_if value="$ErrorList.{$Counter}" exact="-103">
                      <set_value name="$FeedbackText" exact="'Wares list was empty'" />
                    </do_if>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-102">
                      <set_value name="$FeedbackText" exact="'Wares value was not a list'" />
                    </do_elseif>
                    <do_elseif value="$ErrorList.{$Counter}" exact="-101">
                      <set_value name="$FeedbackText" exact="'$MissionCue was not defined'" />
                    </do_elseif>

                    <debug_text text="'Mission Error. $FeedbackValue ' + $ErrorList.{$Counter} + ' - ' + $FeedbackText" chance="$DebugChance" />
                  </do_all>
                </do_if>
              </do_else>
            </do_if>
            <do_else>

              <do_if value="$FeedbackValue" exact="-3">
                <set_value name="$FeedbackText" exact="{30004,6083}" comment="'Container was destroyed by non-player-owned object.'" />
              </do_if>
              <do_elseif value="$FeedbackValue" exact="-2">
                <set_value name="$FeedbackText" exact="{30004,6081}" comment="'Container was destroyed by player-owned object'" />
              </do_elseif>
              <do_elseif value="$FeedbackValue" exact="-1">
                <set_value name="$FeedbackText" exact="{30004,6100}" comment="'Player failed to deliver any wares'" />
              </do_elseif>
              <do_elseif value="$FeedbackValue" exact="1">
                <set_value name="$FeedbackText" exact="'Player successfully delivered all necessary wares'" />
              </do_elseif>
              <do_elseif value="$FeedbackValue" exact="2">
                <set_value name="$FeedbackText" exact="'Player successfully delivered some of the necessary wares'" />
              </do_elseif>

              <do_if value="$FeedbackValue" min="1">
                <debug_text text="'RML Success. Feedback ID: ' + $FeedbackValue + ' - ' + $FeedbackText" chance="md.$RML_Debugging * $DebugChance"/>
              </do_if>
              <do_elseif value="@$FeedbackText">
                <set_value name="$EndSignalCue.$EndFeedbackText" exact="$FeedbackText"/>
                <debug_text text="'RML Failure. Feedback ID: ' + $FeedbackValue + ' - ' + $FeedbackText" chance="md.$RML_Debugging * $DebugChance"/>
              </do_elseif>
              <do_else>
                <debug_text text="'WARNING: Unhandled feedback value ' + $feedbackvalue" chance="$DebugChance"/>
              </do_else>

            </do_else>

            <set_value name="$EndSignalCue.$FinalStep" exact="$StartStep" chance="if $EndSignalCue.$FinalStep? then 0 else 100" comment="UpdateBriefing can overide"/>
            <set_value name="$EndSignalCue.$EndFeedbackValue" exact="$FeedbackValue" />
            <signal_cue cue="$EndSignalCue" />
            <cancel_cue cue="TradeWares" />
          </actions>
        </cue>
      </cues>
    </library>
  </cues>
</mdscript>
